--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.3
-- Dumped by pg_dump version 10.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: background_buttons; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.background_buttons (background_button_id, operation_name, object_class, button_text, tags) FROM stdin;
1	ImportFromDicomFileEdit	Posda::ProcessPopup	Import Edits	{edit_files}
2	CheckPublicMissingFilesInSeriesByCollection	Posda::ProcessPopup	Check Missing Files Public	{bills_test}
3	CopyCollectionToStaging	Posda::ProcessPopup	Copy Files To Dir	{bills_test}
4	CheckStructLinkagesByCollectionSite	Posda::ProcessPopup	Check Struct Links	{struct_linkages}
5	CheckPosdaPublicConsistency	Posda::ProcessPopup	Check Public Posda	{public_posda_consistency}
6	BackOutEdit	Posda::ProcessPopup	Backout Import Edits	{edit_files}
7	QuickCheckPosdaPublicConsistency	Posda::ProcessPopup	Quick Check Posda PUblic	{public_posda_consistency}
8	SetUpPublicToPosdaCopy	Posda::ProcessPopup	Set Up Copy of Collection From Public To Posda	{public_posda_consistency}
9	StartPublicToPosdaCopy	Posda::ProcessPopup	Start a waiting Public to Posda Copy	{public_posda_consistency}
10	DciodvfyReport	Posda::ProcessPopup	Dciodvfy Report	{dciodvfy}
11	StartFixPublicToPosdaCopy	Posda::ProcessPopup	Retry failed Public Copy	{public_posda_consistency}
12	LookForDupSopsInPublicByCollectionSite	Posda::ProcessPopup	Look for Conflicting Sops already in Public By Collection, Site	{comparing_posda_to_public}
13	DeletePvtExceptCtp	Posda::ProcessPopup	Copy Collection to Scratch Deleting All Private tags exept CTP tags	{bills_test}
14	CheckRtReferenceChain	Posda::ProcessPopup	Check Rt Linkage Chain	{struct_linkages}
16	FirstPassPhiByCollection	Posda::ProcessPopup	First Pass Phi By Collection	{simple_phi}
15	FirstPassPhiScanAndReport	Posda::ProcessPopup	First Pass Phi by collection, site and (optional) batch	{simple_phi}
17	FullPhiById	Posda::ProcessPopup	Full Phi Report by Scan Id	{simple_phi}
18	ProcessVisualReview	Posda::ProcessPopup	Process Visual Review Results	{visual_review_new_workflow}
19	RepealEdits	Posda::ProcessPopup	Repeal Edits	{find_patients,check_edits}
20	RejectEdits	Posda::ProcessPopup	Reject Edits	{find_patients,check_edits}
21	ImportEdits	Posda::ProcessPopup	Import Edits	{find_patients,check_edits}
22	CheckEditCurrent	Posda::ProcessPopup	Check If Edits Current	{find_patients,check_edits}
23	PhiPublicScan	Posda::ProcessPopup	Public Scan By Collection, Site	{simple_phi}
24	NonDicomPhiScan	Posda::ProcessPopup	Phi Scan of Non-Dicom Files	{non_dicom_phi}
\.


--
-- Data for Name: chained_query; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.chained_query (chained_query_id, from_query, to_query, caption) FROM stdin;
1	PixelTypes	FileIdByPixelType	files
2	HideEvents	HideEventInfo	Info
3	WhatHasComeInRecentlyWithSubject	ToExamineRecentFiles	files
4	CtSeriesWithCtImageInfoByCollection	CtImageDataConsistencyAcrossSeries	Image Data Consistent?
5	CtSeriesWithCtImageInfoByCollection	SeriesReport	rpt
6	QueriesRunning	GetQuery	drill
\.


--
-- Data for Name: chained_query_cols_to_params; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.chained_query_cols_to_params (chained_query_id, from_column_name, to_parameter_name) FROM stdin;
1	samples_per_pixel	samples_per_pixel
1	bits_allocated	bits_allocated
1	bits_stored	bits_stored
1	high_bit	high_bit
1	pixel_representation	pixel_representation
1	planar_configuration	planar_configuration
1	photometric_interpretation	photometric_interpretation
2	when_done	day_of_change
2	reason_for	reason_for
2	user_name	user_name
3	subj	patient_id
3	time	import_time_1
3	time	import_time_2
4	series_instance_uid	series_instance_uid
5	series_instance_uid	series_instance_uid
6	pid	pid
\.


--
-- Data for Name: dicom_module_to_posda_table; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.dicom_module_to_posda_table (dicom_module_name, create_row_query, table_name) FROM stdin;
Study	InsertFileStudy	file_study
\.


--
-- Data for Name: dicom_tag_parm_column_table; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.dicom_tag_parm_column_table (tag, tag_cannonical_name, posda_table_name, column_name) FROM stdin;
(0020,000d)	StudyInstanceUID	file_study	study_instance_uid
(0008,0020)	StudyDate	file_study	study_date
(0008,0030)	StudyTime	file_study	study_time
(0008,0090)	ReferringPhysicianName	file_study	referring_phy_name
(0020,0010)	StudyID	file_study	study_id
(0008,0050)	AccessionNumber	file_study	accession_number
(0008,1030)	StudyDescription	file_study	study_description
(0008,1060)	PhysicianReadingStudy	file_study	phys_reading
(0008,1080)	AdmittingDiagnosesDescription	file_study	admitting_diag
(0008,1048)	PhysicianOfRecord	file_study	phys_of_record
\.


--
-- Data for Name: popup_buttons; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.popup_buttons (popup_button_id, name, object_class, btn_col, is_full_table, btn_name) FROM stdin;
2	SopsDupsInDifferentSeriesByCollectionSite	Posda::PopupImageViewer	file_id	f	View
3	SopsDupsInDifferentSeriesByCollectionSite	Posda::PopupCompare	sop_instance_uid	f	Compare
1	%EditResults%	Posda::PopupCompareFilesPath	\N	f	Compare Files
4	DupSopsByCollectionSiteDateRange	Posda::PopupCompare	sop_instance_uid	f	Compare
5	DuplicateFilesBySop	Posda::PopupCompare	sop_instance_uid	f	Compare
6	DuplicateFilesBySop	Posda::PopupCompare	sop_instance_uid	f	Compare
7	DuplicateFilesBySop	Posda::PopupCompare	sop_instance_uid	f	Compare
9	GetSimilarDupContourCounts	Posda::PopupCompare	\N	t	Compare
10	DistinctSeriesByCollection	Posda::ProcessPopup	\N	t	BackgroundPhiScan
11	DistinctSeriesByCollection	Posda::ProcessPopup	\N	t	BackgroundDciodvfySeries
12	DistinctSeriesByCollection	Posda::ProcessPopup	\N	t	DciodvfySeriesReport
13	DistinctStudySeriesByCollection	Posda::ProcessPopup	\N	t	BackgroundApplyPrivateDispositions
14	GetDoses	Posda::ProcessPopup	\N	t	BackgroundDoseLinkageCheck
15	GetPlans	Posda::ProcessPopup	\N	t	BackgroundPlanLinkageCheck
16	GetSsByCollection	Posda::ProcessPopup	\N	t	BackgroundStructLinkageCheck
17	DistinctStudySeriesByCollectionSite	Posda::ProcessPopup	\N	t	BackgroundApplyPrivateDispositions
18	DistinctSeriesByCollectionSite	Posda::ProcessPopup	\N	t	BackgroundPhiScan
19	DistinctSeriesByCollectionSite	Posda::ProcessPopup	\N	t	BackgroundDciodvfySeries
20	DistinctSeriesByCollectionSite	Posda::ProcessPopup	\N	t	DciodvfySeriesReport
21	DistinctSeriesByCollectionSitePublic	Posda::ProcessPopup	\N	t	BackgroundPhiScan
22	%	Quince	series_instance_uid	f	view
8	%	choose	file_id	f	view
35	AllPatientDetailsWithNoCtp	Posda::ProcessPopup	\N	t	InitialAnonymizerCommands
36	ColSiteDetails	Posda::ProcessPopup	\N	t	PhiScan
37	DistinctSeriesByPatient	Posda::ProcessPopup	\N	t	LinkSeries
38	DistinctSeriesByPatient	Posda::ProcessPopup	\N	t	PhiScan
39	DistinctSeriesByPatientAdvanced	Posda::ProcessPopup	\N	t	CheckConsistency
40	DistinctSeriesByPatientAdvanced	Posda::ProcessPopup	\N	t	DicomValidation
41	DistinctSeriesByPatientAdvanced	Posda::ProcessPopup	\N	t	LinkForDownload
42	DistinctSeriesByPatientAdvanced	Posda::ProcessPopup	\N	t	PrivateDispositions
43	PatientDetailsWithBlankCtp	Posda::ProcessPopup	\N	t	InitialAnonymizerCommands
44	PatientDetailsWithNoCtp	Posda::ProcessPopup	\N	t	InitialAnonymizerCommands
45	SummaryOfToFiles	Posda::ProcessPopup	\N	t	LinkSeries
46	SummaryOfToFilesForPatient	Posda::ProcessPopup	\N	t	LinkSeries
47	GetZipUploadEventsByDateRangeNonDicomOnly	Posda::ProcessPopup	\N	t	ProcessRADCOMPUpload
49	GetXlsToConvert	Posda::ProcessPopup	\N	t	XlsConverter
50	GetXlsxToConvert	Posda::ProcessPopup	\N	t	XlsxConverter
48	GetDocxToConvert	Posda::ProcessPopup	\N	t	RadcompSubmissionConverter
51	GeFromToFilesFromNonDicomEditCompare	choose_to	to_file_id	f	view
52	GeFromToFilesFromNonDicomEditCompare	choose_from	from_file_id	f	view
53	AllPatientDetailsWithNoCtpLike	Posda::ProcessPopup	\N	t	InitialAnonymizerCommands
54	InboxContentByActivityId	choose_spreadsheet	spreadsheet_file_id	\N	view
\.


--
-- Data for Name: queries; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.queries (name, query, args, columns, tags, schema, description) FROM stdin;
AllSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
AllPixelInfoByBitDepth	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and bits_allocated = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
DistinctSeriesBySubjectIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,intake}	intake	Get Series in A Collection, Site, Subject\n
AllSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
AllPixelInfoByModality	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_series \n  where visibility is null and modality = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
ActiveQueriesOld	select\n  datname as db_name, procpid as pid,\n  usesysid as user_id, usename as user,\n  waiting, now() - xact_start as since_xact_start,\n  now() - query_start as since_query_start,\n  now() - backend_start as since_back_end_start,\n  current_query\nfrom\n  pg_stat_activity\nwhere\n  datname = ?\n	{db_name}	{db_name,pid,user_id,user,waiting,since_xact_start,since_query_start,since_back_end_start,current_query}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 8.4.20 (Current Linux)\n
AllHiddenSubjects	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere patient_id in (\n    select distinct patient_id \n    from file_patient\n  except \n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n) group by patient_id, project_name, site_name\norder by project_name, site_name, patient_id;\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects}	posda_files	Find All Subjects which have only hidden files\n
SubprocessInvocationByUser	select \n  distinct subprocess_invocation_id, \n  background_subprocess_id, spreadsheet_uploaded_id, query_invoked_by_dbif_id,\n  button_name, invoking_user, when_invoked, operation_name,\n  max(line_number) as num_lines\nfrom \n  subprocess_invocation natural left join subprocess_lines\n  natural left join background_subprocess\nwhere \n  invoking_user = ?\ngroup by \n  subprocess_invocation_id, \n  background_subprocess_id, spreadsheet_uploaded_id, query_invoked_by_dbif_id,\n  button_name, invoking_user, when_invoked, operation_name\norder by when_invoked desc	{invoking_user}	{subprocess_invocation_id,background_subprocess_id,spreadsheet_uploaded_id,query_invoked_by_dbif_id,button_name,invoking_user,when_invoked,operation_name,num_lines}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
BackgroundSubprocessBySubprocessId	select \n  background_subprocess_id, subprocess_invocation_id, \n  input_rows_processed,  when_script_started, when_background_entered,\n  when_script_ended, user_to_notify, process_error\nfrom \n  background_subprocess\nwhere \n  subprocess_invocation_id = ?\norder by when_script_started desc	{subprocess_invocaton_id}	{background_subprocess_id,subprocess_invocation_id,input_rows_processed,when_script_started,when_background_entered,when_script_ended,user_to_notify,process_error}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
GetSimpleValueSeen	select\n  value_seen_id as id\nfrom \n  value_seen\nwhere\n  value = ?	{value}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetDciodvfyErrorMissingAttr	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'MissingAttributes'\n  and error_subtype = ?\n  and error_tag = ?\n  and error_module = ?	{error_subtype,error_tag,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
AllVisibleSubjects	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
AllVisibleSubjectsByCollection	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      project_name = ? and\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{collection}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
SeriesByLikeDescriptionAndCollection	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and series_description like ?\n	{collection,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection matching Series Description\n
GetDciodvfyErrorUnrecog	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedEnumeratedValue'\n  and error_value = ?\n  and error_tag = ?\n  and error_index = ?	{error_value,error_tag,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
AverageSecondsPerFile	select avg(seconds_per_file) from (\n  select (send_ended - send_started)/number_of_files as seconds_per_file \n  from dicom_send_event where send_ended is not null and number_of_files > 0\n  and send_started > ? and send_ended < ?\n) as foo\n	{from_date,to_date}	{avg}	{send_to_intake}	posda_files	Average Time to send a file between times\n
GetDciodvfyErrorId	select currval('dciodvfy_error_dciodvfy_error_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a id of newly created dciodvfy_error row
GetInsertedSendId	select currval('dicom_send_event_dicom_send_event_id_seq') as id\n	{}	{id}	{NotInteractive,SeriesSendEvent}	posda_files	Get dicom_send_event_id after creation\nFor use in scripts.\nNot meant for interactive use\n
AllVrsByElementSig	select distinct vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by element_signature, vr, equipment_signature\norder by element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
DatesOfUploadByCollectionSite	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event\n  natural join ctp_file\nwhere project_name = ? and site_name = ? \n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
DiskSpaceByCollection	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  where project_name = ?\n  )\ngroup by project_name\n	{collection}	{collection,total_bytes}	{by_collection,posda_files,storage_used}	posda_files	Get disk space used by collection\n
DatabaseSize	SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20;\n	{}	{Name,Owner,Size}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 9.4.5 (Current Mac)\n
CreateFileSend	insert into dicom_file_send(\n  dicom_send_event_id, file_path, status, file_id_sent\n) values (\n  ?, ?, ?, ?\n)\n	{id,path,status,file_id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Add a file send row\nFor use in scripts.\nNot meant for interactive use\n
FilesByScanValueTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
DiskSpaceByCollectionSummary	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
DatesOfUploadByCollectionSiteVisible	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event natural join file_sop_common\n  natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
CountsByCollectionSite	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
DupSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
DistinctValuesByTagWithFileCount	select distinct element_signature, value, count(*) as num_files\nfrom (\nselect\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n) as foo\ngroup by element_signature, value\n	{tag}	{element_signature,value,num_files}	{tag_usage}	posda_phi	Distinct values for a tag with file count\n
DuplicateDownloadsByCollection	select distinct patient_id, series_instance_uid, count(*)\nfrom file_series natural join file_patient\nwhere file_id in (\n  select file_id from (\n    select\n      distinct file_id, count(*)\n    from file_import\n    where file_id in (\n      select\n        distinct file_id\n      from \n        file_patient natural join ctp_file\n      where\n        project_name = ? \n        and site_name = ? and visibility is null\n    )\n    group by file_id\n  ) as foo\n  where count > 1\n)\ngroup by patient_id, series_instance_uid\norder by patient_id\n	{project_name,site_name}	{series_instance_uid,count}	{by_collection,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
DistinctSopsInCollection	select distinct sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file\n  where\n    project_name = ? and visibility is null\n)\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctUnhiddenFilesInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
DistinctSopsInCollectionIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionIntake	select\n  distinct i.sop_instance_uid\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInSeries	select distinct sop_instance_uid, count(*)\nfrom file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{by_series_instance_uid,duplicates,posda_files,sops}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
DupSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
GetPrivateTagFeaturesBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr,\n  pt_consensus_disposition as disposition\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr,disposition}	{DispositionReport,NotInteractive}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
LookUpTagEle	select\n  tag, name, keyword, vr, vm, is_retired, comments\nfrom \n  dicom_element\nwhere\n  tag = ?	{tag}	{tag,name,keyword,vr,vm,is_retired,comments}	{NotInteractive,used_in_dciodvfy}	dicom_dd	Get tag from name or keyword
GetDciodvfyWarningNonStd	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'NonStandardAttribute'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_iod = ?\n\n 	{warning_tag,warning_desc,warning_iod}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
DuplicateDownloadsBySubject	select count(*) from (\n  select\n    distinct file_id, count(*)\n  from file_import\n  where file_id in (\n    select\n      distinct file_id\n    from \n      file_patient natural join ctp_file\n    where\n      patient_id = ? and project_name = ? \n      and site_name = ? and visibility is null\n  )\n  group by file_id\n) as foo\nwhere count > 1\n	{subject_id,project_name,site_name}	{count}	{by_subject,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
GetDciodvfyWarningMissingDicomDir	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'MissingForDicomDir'\n  and warning_tag = ?\n 	{warning_tag}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetSlopeIntercept	select\n  slope, intercept, si_units\nfrom\n  file_slope_intercept natural join slope_intercept\nwhere\n  file_id = ?\n	{file_id}	{slope,intercept,si_units}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
DuplicateSOPInstanceUIDs	select\n  sop_instance_uid, min(file_id) as first,\n  max(file_id) as last, count(*)\nfrom file_sop_common\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n      where project_name = ? and site_name = ? and patient_id = ?\n    ) as foo natural join ctp_file\n    where visibility is null\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by sop_instance_uid;\n	{collection,site,subject}	{sop_instance_uid,first,last,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
LookUpTag	select\n  tag, name, keyword, vr, vm, is_retired, comments\nfrom \n  dicom_element\nwhere\n  name = ? or\n  keyword = ?	{name,keyword}	{tag,name,keyword,vr,vm,is_retired,comments}	{NotInteractive,used_in_dciodvfy}	dicom_dd	Get tag from name or keyword
FilesWithIndicesByElementScanId	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, sequence_level,\n  item_number\nfrom\n  series_scan natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_element_id = ?\n	{scan_element_id}	{series_instance_uid,file,element_signature,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
PatientStatusCountsByCollection	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere project_name = ? and visibility is null\ngroup by collection, status\n	{collection}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
CreateSimpleValueSeen	insert into value_seen(\nvalue\n)values(?)	{value}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple Value Seen
DuplicateSOPInstanceUIDsByCollectionWithoutHidden1	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo natural join ctp_file\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{receive_reports}	posda_files	Return a count of visible duplicate SOP Instance UIDs\n
EquipmentByValueSignature	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,value,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of equipment, values seen in scan by VR with count\n
FilesByScanWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file, value\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesByTagWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n	{tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
ElementsWithMultipleVRs	select element_signature, count from (\n  select element_signature, count(*)\n  from (\n    select\n      distinct element_signature, vr\n    from\n      scan_event natural join series_scan\n      natural join scan_element natural join element_signature\n      natural join equipment_signature\n    where\n      scan_event_id = ?\n  ) as foo\n  group by element_signature\n) as foo\nwhere count > 1\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	List of Elements with multiple VRs seen\n
EquipmentByPrivateTag	select distinct equipment_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere element_signature = ?\norder by equipment_signature;\n	{scan_id,element_signature}	{equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
FilesInCollectionSiteForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{by_collection_site,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
GetDciodvfyWarningQuestionable	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'QuestionableValue'\n  and warning_reason = ?\n  and warning_tag = ?\n  and warning_index = ?\n 	{warning_reason,warning_tag,warning_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
SeriesCollectionSite	select distinct\n  series_instance_uid\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{series_instance_uid}	{find_series}	posda_files	Get a list of Series by Collection, Site\n
DuplicateSOPInstanceUIDsGlobalWithoutHidden	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
ElementScanIdByScanValueTag	select \n  distinct scan_element_id\nfrom\n  scan_element natural join element_signature\n  natural join series_scan natural join seen_value\n  natural join scan_event\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n	{scan_id,value,tag}	{scan_element_id}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
CountsByCollectionLike	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n  ) and project_name like ? and visibility is null\ngroup by\n  collection, site, patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  collection, site, patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection_like}	{collection,site,patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
GetDciodvfyWarningUncat	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'Uncategorized'\n  and warning_text = ?	{warning_text}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetSeriesWithSignature	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series with Signatures by Collection\n
GetWinLev	select\n  window_width, window_center, win_lev_desc, wl_index\nfrom\n  file_win_lev natural join window_level\nwhere\n  file_id = ?\norder by wl_index desc;\n	{file_id}	{window_width,window_center,win_lev_desc,wl_index}	{by_file_id,posda_files,window_level}	posda_files	Get a Window, Level(s) for a particular file \n
FirstFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	First files uploaded by series\n
GetSeriesSignature	select distinct\n  dicom_file_type, modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ?\ngroup by dicom_file_type, signature\n	{collection}	{dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series Signatures by Collection\n
FirstFileInSeriesIntake	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,intake,UsedInPhiSeriesScan}	intake	First files in series in Intake\n
GetDciodvfyWarningUnrecog	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedTag'\n  and warning_tag = ?\n  and warning_comment = ?\n 	{warning_tag,warning_comment}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetPublicTagDispositionBySignature	select\n  disposition\nfrom public_tag_disposition\nwhere tag_name = ?\n	{signature}	{disposition}	{DispositionReport,NotInteractive}	posda_public_tag	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
UpdateSendEvent	update dicom_send_event\n  set send_ended = now()\nwhere dicom_send_event_id = ?\n	{id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Update dicom_send_event_id after creation and completion of send\nFor use in scripts.\nNot meant for interactive use\n
IntakeFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{intake,used_in_simple_phi}	intake	List of all Series By Collection, Site on Intake\n
InsertSendEvent	insert into dicom_send_event(\n  destination_host, destination_port,\n  called_ae, calling_ae,\n  send_started, invoking_user,\n  reason_for_send, number_of_files,\n  is_series_send, series_to_send\n)values(\n  ?, ?,\n  ?, ?,\n  now(), ?,\n  ?, ?,\n  true, ?\n)\n	{host,port,called,calling,who,why,num_files,series}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Create a DICOM Series Send Event\nFor use in scripts.\nNot meant for interactive use\n
HideSeriesNotLikeWithModality	update ctp_file set visibility = 'hidden'\nwhere file_id in (\n  select\n    file_id\n  from\n    file_series\n  where\n    series_instance_uid in (\n      select\n         distinct series_instance_uid\n      from (\n        select\n         distinct\n           file_id, series_instance_uid, series_description\n        from\n           ctp_file natural join file_series\n        where\n           modality = ? and project_name = ? and site_name = ?and \n           series_description not like ?\n      ) as foo\n    )\n  )\n	{modality,collection,site,description_not_matching}	\N	{Update,posda_files}	posda_files	Hide series not matching pattern by modality\n
PatientStatusCounts	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, status\norder by collection, status\n	{}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
TagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which tags\n
StudiesInCollectionSite	select\n  distinct study_instance_uid\nfrom\n  file_study natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{project_name,site_name}	{study_instance_uid}	{find_studies}	posda_files	Get Studies in A Collection, Site\n
HideEarlyFilesCSP	update ctp_file set visibility = 'hidden' where file_id in (\n  select min as file_id\n  from (\n    select\n      distinct sop_instance_uid, min, max, count\n    from (\n      select\n        distinct sop_instance_uid, min(file_id),\n        max(file_id),count(*)\n      from (\n        select\n          distinct sop_instance_uid, file_id\n        from\n          file_sop_common \n        where sop_instance_uid in (\n          select\n            distinct sop_instance_uid\n          from\n            file_sop_common natural join ctp_file\n            natural join file_patient\n          where\n            project_name = ? and site_name = ? \n            and patient_id = ? and visibility is null\n        )\n      ) as foo natural join ctp_file\n      where visibility is null\n      group by sop_instance_uid\n    )as foo where count > 1\n  ) as foo\n);\n	{collection,site,subject}	\N	{}	posda_files	Hide earliest submission of a file:\n  Note:    uses sequencing of file_id to determine earliest\n           file, not import_time\n
CreateDciodvfyError	insert into dciodvfy_error(\n  error_type, error_tag, error_subtype, error_module,\n  error_reason, error_index, error_value, error_text\n) values (\n  ?, ?, ?, ?,\n  ?, ?, ?, ?\n)	{error_type,error_tag,error_subtype,error_module,error_reason,error_index,error_value,error_text}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_errors row by error_text 
ImageIdByFileId	select\n  distinct file_id, image_id\nfrom\n  file_image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id}	{by_file_id,image_id,posda_files}	posda_files	Get image_id for file_id \n
NumEquipSigsForPrivateTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
NewSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
IntakeSeriesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Series By Collection, Site on Intake\n
IntakeSeriesWithSignatureByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as series_instance_uid,\n  concat(q.manufacturer, ":", q.manufacturer_model_name, ":",\n  q.software_versions) as signature\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{series_instance_uid,Modality,signature}	{intake}	intake	List of all Series By Collection, Site on Intake\n
PatientStatusChangeByCollection	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where project_name = ? and visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{collection}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
LastFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, max(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	Last files uploaded by series\n
NewSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
NumEquipSigsForTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
PatientStatusChangeByPatient	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id = ?\norder by when\n	{patient_id}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Patient Id\n
RecordPatientStatusChange	insert into patient_import_status_change(\n  patient_id, when_pat_stat_changed,\n  pat_stat_change_who, pat_stat_change_why,\n  old_pat_status, new_pat_status\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?\n)\n	{patient_id,who,why,old_status,new_status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Record a change to Patient Import Status\nFor use in scripts\nNot really intended for interactive use\n
FilesByScanValueLikeTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value like ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
PixelInfoByImageId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  image natural join unique_pixel_data natural join pixel_location\n  natural join file_location natural join file_storage_root\nwhere image_id = ?\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoByFileId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  f.file_id = ? and pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoBySeries	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from file_series natural join ctp_file\n  where series_instance_uid = ? and visibility is null\n)\n	{series_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for all files in a series\n
PixDupsByCollecton	select \n  distinct series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_series \nwhere \n  project_name = ? and visibility is null\n  and file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) \ngroup by series_instance_uid\norder by count desc;\n	{collection}	{series_instance_uid,count}	{pix_data_dups}	posda_files	Counts of duplicate pixel data in series by Collection\n
GetScanElementId	select currval('scan_element_scan_element_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of ScanElementId Sequence\n
PixelDataIdByFileId	select\n  distinct file_id, image_id, unique_pixel_data_id\nfrom\n  file_image natural join image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id}	{by_file_id,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
AbreviatedCountsByCollectionLike	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, \n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n  ) and project_name like ? and visibility is null\ngroup by\n  collection, site, patient_id\norder by\n  collection, site, patient_id\n	{collection_like}	{collection,site,patient_id,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
SendEventSummary	select\n  reason_for_send, num_events, files_sent, earliest_send,\n  finished, finished - earliest_send as duration\nfrom (\n  select\n    distinct reason_for_send, count(*) as num_events, sum(number_of_files) as files_sent,\n    min(send_started) as earliest_send, max(send_ended) as finished\n  from dicom_send_event\n  group by reason_for_send\n  order by earliest_send\n) as foo\n	{}	{reason_for_send,num_events,files_sent,earliest_send,finished,duration}	{send_to_intake}	posda_files	Summary of SendEvents by Reason\n
GetDciodvfyWarningId	select currval('dciodvfy_warning_dciodvfy_warning_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get id of recently created dciodvfy_warnings row
CreateScanElement	insert into scan_element(\n  element_signature_id, seen_value_id, series_scan_id\n)values(\n  ?, ?, ?)\n	{element_signature_id,seen_value_id,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
PixelTypesWithGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get distinct pixel types with geometry\n
SentToIntakeByDate	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Files Sent To Intake By Date\n
PixelTypesWithNoGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration\nfrom\n  image i where image_id not in (\n    select image_id from image_geometry g where g.image_id = i.image_id\n  )\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get pixel types with no geometry\n
PosdaImagesByCollectionSite	select distinct\n  patient_id as "PID",\n  modality as "Modality",\n  sop_instance_uid as "SopInstance",\n  study_date as "StudyDate",\n  study_description as "StudyDescription",\n  series_description as "SeriesDescription",\n  study_instance_uid as "StudyInstanceUID",\n  series_instance_uid as "SeriesInstanceUID",\n  manufacturer as "Mfr",\n  manuf_model_name as "Model",\n  software_versions\nfrom\n  file_patient natural join file_series natural join\n  file_sop_common natural join file_study natural join\n  file_equipment natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n	{collection,site}	{PID,Modality,SopInstance,StudyDate,StudyDescription,SeriesDescription,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
PosdaTotalsWithDateRangeWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
PosdaTotalsWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get total posda files including hidden\n
StartTransaction	begin	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
PrivateTagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
PrivateTagsByEquipment	select distinct element_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere equipment_signature = ?\norder by element_signature;\n	{scan_id,equipment_signature}	{element_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
DistinctDispositionsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
ListVisualReviewInstances	select\n  visual_review_instance_id, visual_review_reason,\n  visual_review_scheduler,\n  visual_review_num_series,\n  when_visual_review_scheduled, \n  visual_review_num_series_done,\n  visual_review_num_equiv_class,\n  when_visual_review_sched_complete\nfrom visual_review_instance	{}	{visual_review_instance_id,visual_review_reason,visual_review_scheduler,visual_review_num_series,when_visual_review_scheduled,visual_review_num_series_done,visual_review_num_equiv_class,when_visual_review_sched_complete}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
GetVisualReviewStatusBothCountsById	select \n  distinct review_status, processing_status, count(distinct series_instance_uid) as num_series\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ?\ngroup by review_status, processing_status	{visual_review_instance_id}	{review_status,processing_status,num_series}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
GetFileIdByFileId	select\n  file_id\nfrom\n  file\nwhere\n  file_id = ?\n	{file_id}	{file_id}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
SeriesNickname	select\n  project_name, site_name, subj_id, series_nickname\nfrom\n  series_nickname\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{project_name,site_name,subj_id,series_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular series uid\n
StudyNickname	select\n  project_name, site_name, subj_id, study_nickname\nfrom\n  study_nickname\nwhere\n  study_instance_uid = ?\n	{study_instance_uid}	{project_name,site_name,subj_id,study_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular study uid\n
SeriesLike	select\n   distinct collection, site, pat_id,\n   series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     project_name as collection, site_name as site,\n     file_id, series_instance_uid, patient_id as pat_id,\n     series_description\n  from\n     ctp_file natural join file_series natural join file_patient\n  where\n     project_name = ? and site_name = ? and \n     series_description like ?\n) as foo\ngroup by collection, site, pat_id, series_instance_uid, series_description\norder by collection, site, pat_id\n	{collection,site,description_matching}	{collection,site,pat_id,series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern\n
LockWarnings	lock table dciodvfy_warning	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
LockErrors	lock table dciodvfy_error	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
SubjectsWithModalityByCollectionSite	select\n  distinct patient_id, count(*) as num_files\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere\n  modality = ? and project_name = ? and site_name = ?\ngroup by patient_id\norder by patient_id\n	{modality,project_name,site_name}	{patient_id,num_files}	{FindSubjects}	posda_files	Find All Subjects with given modality in Collection, Site\n
SubjectsWithModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, count(*) as num_files\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?\ngroup by patient_id, modality\n	{modality,project_name,site_name}	{patient_id,modality,num_files}	{FindSubjects,SymLink,intake}	intake	Find All Subjects with given modality in Collection, Site\n
SeriesNotLikeWithModality	select\n   distinct series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     file_id, series_instance_uid, series_description\n  from\n     ctp_file natural join file_series\n  where\n     modality = ? and project_name = ? and site_name = ? and \n     series_description not like ? and visibility is null\n) as foo\ngroup by series_instance_uid, series_description\n	{modality,collection,site,description_not_matching}	{series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern by modality\n
SeriesWithRGB	select\n  distinct series_instance_uid\nfrom\n  image natural join file_image\n  natural join file_series\n  natural join ctp_file\nwhere\n  photometric_interpretation = 'RGB'\n  and visibility is null\n	{}	{series_instance_uid}	{find_series,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
SopNickname	select\n  project_name, site_name, subj_id, sop_nickname, modality,\n  has_modality_conflict\nfrom\n  sop_nickname\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{project_name,site_name,subj_id,sop_nickname,modality,has_modality_conflict}	{}	posda_nicknames	Get a nickname, etc for a particular SOP Instance  uid\n
UpdatePatientImportStatus	update patient_import_status set \n  patient_import_status = ?\nwhere patient_id = ?\n	{patient_id,status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Update Patient Status\nFor use in scripts\nNot really intended for interactive use\n
SubjectCountByCollectionSite	select\n  distinct\n    patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id \norder by\n  patient_id\n	{collection,site}	{patient_id,count}	{counts}	posda_files	Counts query by Collection, Site\n
StopTransaction	commit	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
DistinctFilesByScanTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
DistinctSeriesHierarchyByCollectionPublic	select\n  distinct i. patient_id, i.study_instance_uid, s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, modality	{project_name}	{patient_id,study_instance_uid,series_instance_uid,modality,num_images}	{by_collection,find_series,public,series_search}	public	Get Series in A Collection\n
GetFileStorageRootByStorageClass	select\n  root_path\nfrom\n  file_storage_root\nwhere \n storage_class = ?\n  and current	{storage_class}	{root_path}	{NotInteractive,used_in_import_edited_files,used_in_check_circular_view}	posda_files	Get root path for a storage_class
VrsSeen	select distinct vr, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ?\n) as foo\ngroup by vr\norder by vr\n	{scan_id}	{vr,count}	{tag_usage}	posda_phi	List of VR's seen in scan (with count)\n
TestThisOne	select\n  patient_id, patient_import_status,\n  count(distinct file_id) as total_files,\n  min(import_time) min_time, max(import_time) as max_time,\n  count(distinct study_instance_uid) as num_studies,\n  count(distinct series_instance_uid) as num_series\nfrom\n  ctp_file natural join file natural join\n  file_import natural join import_event natural join\n  file_study natural join file_series natural join file_patient\n  natural join patient_import_status\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, patient_import_status\n	{project_name,site_name,PatientStatus}	{patient_id,patient_import_status,total_files,min_time,max_time,num_studies,num_series}	{}	posda_files	
CreateDciodvfyWarning	insert into dciodvfy_warning(\n  warning_type,\n  warning_tag,\n  warning_desc,\n  warning_iod,\n  warning_comment,\n  warning_value,\n  warning_reason,\n  warning_index,\n  warning_text\n) values (\n  ?, ?, ?, ?,\n  ?, ?, ?, ?,\n  ?\n)	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index,warning_text}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_warnings row
TotalDiskSpace	select\n  sum(size) as total_bytes\nfrom\n  file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\n	{}	{total_bytes}	{all,posda_files,storage_used}	posda_files	Get total disk space used\n
StudyConsistency	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency,study_consistency}	posda_files	Check a Study for Consistency\n
IncrementSimpleSeriesScanned	update phi_scan_instance set\n  num_series_scanned = num_series_scanned + 1\nwhere\n  phi_scan_instance_id = ?	{id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Increment series scanned
CreateElementSignature	insert into element_signature(element_signature, vr, is_private) values(?, ?, ?)\n	{element_signature,vr,is_private}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Element Signature Id
UnHideFilesCSP	update ctp_file set visibility = null where file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_patient\n  where\n    project_name = ? and site_name = ?\n    and visibility = 'hidden' and patient_id = ?\n);\n	{collection,site,subject}	\N	{}	posda_files	UnHide all files hidden by Collection, Site, Subject\n
GetSeenValueId	select currval('seen_value_seen_value_id_seq') as id	{}	{id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of seen_value_id sequence
CreateDciodvfyUnitScanWarning	insert into dciodvfy_unit_scan_warning(\n  dciodvfy_scan_instance_id,\n  dciodvfy_unit_scan_id,\n  dciodvfy_warning_id\n)values (?, ?, ?)	{" dicodvfy_scan_instance_id",dciodvfy_unit_scan_id,dciodvfy_warning_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan_error row
ValuesWithVrTagAndCountLimited	select distinct vr, value, element_signature, num_files from (\n  select\n    distinct vr, value, element_signature, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and\n    vr not in (\n      'AE', 'AT', 'DS', 'FL', 'FD', 'IS', 'OD', 'OF', 'OL', 'OW',\n      'SL', 'SQ', 'SS', 'TM', 'UL', 'US'\n    )\n  group by value, element_signature, vr\n) as foo\norder by vr, value\n	{scan_id}	{vr,value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetFileCountByLikeLoadPath	select distinct import_event_id, count(distinct file_id)  as num_files from file_import where rel_path like ? group by import_event_id;	{like_rel_path}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
GetZipUploadEventsByDateRange	select distinct import_event_id, count(distinct file_id)  as num_files \nfrom file_import natural join import_event\nwhere\nimport_time > ? and import_time < ? and import_comment = 'zip'\ngroup by import_event_id	{from,to}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
GetLoadPathByImportEventId	select file_id, rel_path from file_import where import_event_id = ?	{import_event_id}	{file_id,rel_path}	{radcomp}	posda_files	Add a filter to a tab
GetElementSignatureId	select currval('element_signature_element_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan,ElementDisposition}	posda_phi	Get current value of ElementSignatureId Sequence\n
GetZipUploadEventsByDateRangeNonDicomOnly	select distinct import_event_id, import_time, count (distinct file_id) as num_files from (\n  select import_event_id, file_id, import_time, rel_path, file_type\n  from file_import natural join import_event join file using(file_id)\n  where import_time > ? and import_time < ? and import_comment = 'zip'\n  and (rel_path like '%.docx' or rel_path like '%.xls' or rel_path like '%.xlsx' or rel_path like '%.csv')\n) as foo\ngroup by import_event_id, import_time	{from,to}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
GetScanEventId	select currval('series_scan_series_scan_id_seq') as id	{}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
FinalizeSimpleScanInstance	update phi_scan_instance set\n  end_time = now()\nwhere\n  phi_scan_instance_id = ?	{id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Finalize PHI Scan
FilesByModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, s.series_instance_uid, sop_instance_uid, dicom_file_uri\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,dicom_file_uri}	{FindSubjects,intake,FindFiles}	intake	Find All Files with given modality in Collection, Site on Intake\n
DiskSpaceByCollectionSiteSummary	select\n  distinct project_name as collection, site_name as site, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name, site_name\norder by total_bytes\n	{}	{collection,site,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections, sites\n
GetScanEventById	select * from scan_event where scan_event_id = ?\n	{scan_id}	{scan_event_id,scan_started,scan_ended,scan_status,scan_description,num_series_to_scan,num_series_scanned}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetVisualReviewInstanceId	select currval('visual_review_instance_visual_review_instance_id_seq') as id	{}	{id}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
GetDciodvfyUnitScanId	select currval('dciodvfy_unit_scan_dciodvfy_unit_scan_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetSeenValue	select * from seen_value where value = ?\n	{value}	{seen_value_id,value}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Seen Value Id
GetEquipmentSignatureId	select currval('equipment_signature_equipment_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of EquipmentSignatureId Sequence\n
GetEquipmentSignature	select * from equipment_signature where equipment_signature = ?\n	{equipment_signature}	{equipment_signature_id,equipment_signature}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Equipment Signature Id
ValuesByVr	select distinct value, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n) as foo\ngroup by value\norder by value\n	{scan_id,vr}	{value,count}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
WhereSeriesSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
CreateVisualReviewInstance	insert into visual_review_instance(\n  visual_review_reason,\n  visual_review_scheduler,\n  visual_review_num_series,\n  when_visual_review_scheduled\n) values (\n  ?, ?, ?, now()\n)	{visual_review_reason,visual_review_scheduler,visual_review_num_series}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Create a visual review instance
CreateSeenValue	insert into seen_value(value)values(?)	{value}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Seen Value
CreateEquipmentSignature	insert into equipment_signature(equipment_signature)values(?)\n	{equipment_signature}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Equipment Signature Id
CreateTableSequenceIndex	insert into sequence_index(\n  scan_element_id, sequence_level, item_number\n) values (?, ?, ?)\n	{scan_element_id,sequence_level,item_number}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Table Sequence Id
UpdateElementDisposition	update element_signature set \n  private_disposition = ?,\n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{private_disposition,name_chain,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
FirstFileInSeriesPosda	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo)\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan}	posda_files	First files in series in Posda\n
PrivateTagCountValueList	select \n  distinct element_signature, vr, value, private_disposition as disposition, count(*) as num_files\nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr, value, private_disposition\norder by element_signature, vr, value	{}	{vr,value,element_signature,num_files,disposition}	{postgres_status,PrivateTagKb,NotInteractive}	posda_phi	Get List of Private Tags with All Values\n
CreateScanEvent	insert into scan_event(\n  scan_started, scan_status, scan_description,\n  num_series_to_scan, num_series_scanned\n) values (\n  now(), 'In Process', ?,\n  ?, 0\n)\n\n	{description,num_series_to_scan}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
UpdateSeriesScan	update series_scan\n  set series_scan_status = ?\nwhere series_scan_id = ?	{series_scan_status,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scan to set status\n
FinalizeSimpleSeriesScan	update series_scan_instance set\n  num_files = ?,\n  end_time = now()\nwhere\n  series_scan_instance_id = ?	{num_files,id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Finalize Series Scan
ListOfPrivateElementsWithDispositions	select\n  element_signature, vr , private_disposition as disposition, element_signature_id, name_chain\nfrom\n  element_signature\nwhere\n  is_private\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetElementSignature	select * from element_signature\n  where element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,is_private,vr}	{UsedInPhiSeriesScan,NotInteractive,ElementDisposition}	posda_phi	Get Element Signature By Signature (pattern) and VR
GetElementDispositionVR	select\n  element_signature_id, element_signature, vr, private_disposition as disposition, name_chain\nfrom\n  element_signature\nwhere\n  element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
InsertIntoSeriesScan	insert into series_scan(\n  scan_event_id, equipment_signature_id, series_instance_uid,\n  series_scan_status, series_scanned_file\n) values (\n  ?, ?, ?, 'In Process', ?)	{scan_id,equipment_signature_id,series_instance_uid,series_scanned_file}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetScanEventEventId	select currval('scan_event_scan_event_id_seq') as id\n	{}	{num_series_scanned,id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of scan_event_id
UpdateSeriesScanned	update scan_event\nset num_series_scanned = ?\nwhere scan_event_id = ?	{num_series_scanned,scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scanned in scan event\n
UpdateSeriesFinished	update scan_event \nset scan_status = 'finished',\n  scan_ended = now()\nwhere scan_event_id = ?	{scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update status to finished in scan event\n
RecordElementDispositionChange	insert into element_signature_change(\n  element_signature_id, when_sig_changed,\n  who_changed_sig, why_sig_changed,\n  old_disposition, new_disposition,\n  old_name_chain, new_name_chain\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?,\n  ?, ?\n)\n	{element_signature_id,who_changed_sig,why_sig_changed,old_disposition,new_disposition,old_name_chain,new_name_chain}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Record a change to Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
CreateNonDicomFileById	insert into non_dicom_file(\n  file_id, file_type, file_sub_type, collection, site, subject, date_last_categorized\n)values(\n  ?, ?, ?, ?, ?, ?, now()\n)\n	{file_id,file_type,file_sub_type,collection,site,subject}	{}	{radcomp}	posda_files	Add a filter to a tab
GetNonDicomFileById	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  file_id = ?	{file_id}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetPixelPaddingInfo	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join \n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT'\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
ListOfPrivateElementsValues	select\n  distinct value\nfrom\n  scan_element natural join seen_value\nwhere\n  element_signature_id = ?\norder by value\n	{element_signature_id}	{value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
ListOfPublicElementsWithDispositionsBySopClassName	select\n  element_signature, vr , disposition, name_chain\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ?\norder by element_signature\n	{sop_class_uid,name}	{element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Public Disposition of element by sig and VR for SOP Class and name
GetElementByPrivateDispositionSimple	select\n  element_sig_pattern as element_signature, private_disposition as disposition\nfrom\n  element_seen\nwhere\n  is_private and private_disposition = ?\n	{private_disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi_simple	Get List of Private Elements By Disposition
DistinctSeriesByCollectionPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,public}	public	Get Series in A Collection\n
UpdateCountsDb	insert into totals_by_collection_site(\n  count_report_id,\n  collection_name, site_name,\n  num_subjects, num_studies, num_series, num_sops\n) values (\n  currval('count_report_count_report_id_seq'),\n  ?, ?,\n  ?, ?, ?, ?\n)\n	{project_name,site_name,num_subjects,num_studies,num_series,num_files}	\N	{intake,posda_counts}	posda_counts	
GetElementByPublicDisposition	select\n  element_signature, disposition\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ? and\n  not is_private and disposition = ?\n	{sop_class_uid,name,disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Elements By Disposition, Sop Class, and name
FirstFileInSeriesPublic	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan,public}	public	First files in series in Public\n
DistinctSeriesByCollectionLikePatient	select distinct patient_id, series_instance_uid, modality, count(*)\nfrom (\nselect distinct patient_id, series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct patient_id, series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common natural join file_patient\n   natural join ctp_file\nwhere\n  project_name = ? and patient_id like ?\n  and visibility is null)\nas foo\ngroup by patient_id, series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by patient_id, series_instance_uid, modality\n	{project_name,patient_id_like}	{patient_id,series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
GetPixelPaddingInfoByCollection	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join ctp_file natural join\n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT' and project_name = ? and visibility is null\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{collection}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
ListOfPublicDispositionTables	select\n  distinct sop_class_uid, name, count(*)\nfrom\n  public_disposition\ngroup by\n  sop_class_uid, name\norder by\n  sop_class_uid, name	{}	{sop_class_uid,name,count}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Disposition Tables
GetNonDicomFiles	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  visibility is null\n	{}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
UpdateNonDicomFileById	update non_dicom_file set\n  file_type = ?, \n  file_sub_type = ?, \n  collection = ?,\n  site = ?,\n  subject = ?,\n  visibility = ?,\n  date_last_categorized = now()\nwhere \n  file_id = ?	{file_type,file_sub_type,collection,site,subject,visibility,file_id}	{}	{radcomp}	posda_files	Add a filter to a tab
CreateNonDicomFileChangeRow	insert into non_dicom_file_change(\n  file_id, file_type, file_sub_type, collection, site, subject, visibility, when_categorized,\n  when_recategorized, who_recategorized, why_recategorized)\nvalues(\n  ?, ?, ?, ?, ?, ?, ?, ?,\n  now(), ?, ?\n)\n	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,who,why}	{}	{radcomp}	posda_files	Add a filter to a tab
GetElementByPrivateDisposition	select\n  element_signature, private_disposition as disposition\nfrom\n  element_signature\nwhere\n  is_private and private_disposition = ?\n	{private_disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Private Elements By Disposition
RelinquishBacklogControl	update control_status\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null,\n  source_pending_change_request = null,\n  request_time = null	{}	{}	{NotInteractive,Backlog}	posda_backlog	relese control of posda_backlog
DistinctFilesByTagAndValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ? and value = ?\norder by series_instance_uid, file\n	{tag,value}	{series_instance_uid,file,element_signature}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
GetSimpleSeriesScanId	select currval('series_scan_instance_series_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get id of newly created series_scan_instance
UpdateEquivalenceClassProcessingStatus	update image_equivalence_class\nset processing_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
FilesByModalityByCollectionSite	select\n  distinct patient_id, modality, series_instance_uid, sop_instance_uid, root_path || '/' || rel_path as path\nfrom\n  file_patient natural join file_series natural join file_sop_common natural join ctp_file\n  natural join file_location natural join file_storage_root\nwhere\n  modality = ? and\n  project_name = ? and \n  site_name = ? and\n  visibility is null	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,path}	{FindSubjects,intake,FindFiles}	posda_files	Find All Files with given modality in Collection, Site
SlopeInterceptByPixelType	select \n  distinct slope, intercept, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_slope_intercept natural join slope_intercept\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by slope, intercept\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{slope,intercept,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
InsertInitialPatientStatus	insert into patient_import_status(\n  patient_id, patient_import_status\n) values (?, ?)\n	{patient_id,status}	\N	{Insert,NotInteractive,PatientStatus}	posda_files	Insert Initial Patient Status\nFor use in scripts\nNot really intended for interactive use\n
PixelTypesWithRowsColumns	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_rows,pixel_columns,number_of_frames,pixel_representation,planar_configuration,modality,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
ValuesByVrWithTagAndCount	select distinct value, element_signature, private_disposition, num_files from (\n  select\n    distinct value, element_signature, private_disposition, vr, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n  group by value, element_signature, vr\n) as foo\norder by value\n	{scan_id,vr}	{value,element_signature,private_disposition,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
SeriesByNotLikeDescriptionAndCollectionSite	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere \n  project_name = ? and site_name = ? and \n  visibility is null and\n  series_description not like ?\n	{collection,site,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection, Site not matching Series Description\n
CreateConversionEvent	insert into conversion_event(\n  time_of_conversion, who_invoked_conversion, conversion_program\n) values (\n  now(), ?, ?\n)\n	{who_invoked_conversion,conversion_program}	{}	{radcomp}	posda_files	Add a filter to a tab
GetConversionId	select currval('conversion_event_conversion_event_id_seq') as id	{}	{id}	{radcomp}	posda_files	Add a filter to a tab
GetNonDicomConversionInfoById	select\n  root_path || '/' || rel_path as path,\n  non_dicom_file.file_type,\n  file_sub_type,\n  collection, site, subject, visibility, size,\n  date_last_categorized\nfrom\n  file_storage_root natural join file_location natural join non_dicom_file join file using(file_id)\nwhere file_id = ?	{file_id}	{path,file_type,file_sub_type,collection,site,subject,visibility,size,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
PatientStudySeriesFileHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
AllPublicSignaturesByScanId	select distinct element_signature as public_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\nwhere\n  scan_event_id = ? \n  and not is_private\norder by public_signature	{scan_id}	{public_signature}	{tag_usage}	posda_phi	List of non-private Element Signatures seen by Scan
FindStudiesWithMatchingDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description = ?\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection,description}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
PatientStudySeriesHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
FindFilesInStudyWithDescriptionByStudyUID	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency}	posda_files	Find SopInstanceUID and Description for All Files In Study\n
DistinctSeriesByCollectionExceptModality	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join ctp_file\nwhere\n  project_name = ? and modality != ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{project_name,modality}	{series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection with modality other than specified\n
FindStudiesWithNullDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
ListOfPrivateElementsWithDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ?\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetXlsToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'xls' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetFileSizeAndPathById	select\n  root_path || '/' || rel_path as path,\n  size\nfrom\n  file_storage_root natural join file_location natural join file \nwhere file_id = ?	{file_id}	{path,size}	{radcomp}	posda_files	Add a filter to a tab
InsertInitialDicomDD	insert into dicom_element(tag, name, keyword, vr, vm, is_retired, comments)\nvalues (?,?,?,?,?,?,?)	{tag,name,keyword,vr,vm,is_retired,comments}	{}	{Insert,NotInteractive,dicom_dd}	dicom_dd	Insert row into dicom_dd database
DistinctSeriesByDicomFileType	select \n  distinct series_instance_uid, dicom_file_type, count(distinct file_id)\nfrom\n  file_series natural join dicom_file natural join ctp_file\nwhere\n  dicom_file_type = ? and\n  visibility is null  \ngroup by series_instance_uid, dicom_file_type	{dicom_file_type}	{series_instance_uid,dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Distinct Series By Dicom File Type\n
PrivateTagValuesWithVrTagAndCountWhereDispositionIsNull	select\n  distinct vr , value, element_signature, private_disposition, count(*) as num_files\nfrom\n  element_signature natural left join scan_element natural left join series_scan natural left join seen_value\nwhere\n  is_private and private_disposition is null\ngroup by\n  vr, value, element_signature, private_disposition\n	{}	{vr,value,element_signature,private_disposition,count}	{DispositionReport,NotInteractive}	posda_phi	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
ListOfPrivateElementsWithNullDispositions	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and private_disposition is null\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
FilesInSeriesForApplyingPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, sop_instance_uid, \n  modality\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_sop_common natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{SeriesSendEvent,by_series,find_files,ApplyDisposition}	posda_files	Get Sop Instance UID, file_path, modality for all files in a series
DicomFileTypesNotProcessed	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
UpdateEquivalenceClassReviewStatus	update image_equivalence_class\nset review_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
RecordFileConversion	insert into non_dicom_conversion(from_file_id, to_file_id, conversion_event_id)\nvalues(?, ?, ?)	{from_file_id,to_file_id,conversion_event_id}	{}	{radcomp}	posda_files	Add a filter to a tab
GetNonDicomFilesByCollection	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  collection = ? and\n  visibility is null\n	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetSubmissionFormsToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'docx' and file_sub_type = 'radcomp data submittal form' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetXlsxToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'xlsx' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetDocxToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'docx' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetPhiNonDicomScanId	select\n  currval('phi_non_dicom_scan_instance_phi_non_dicom_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetNonDicomFileScanId	select\n  currval('non_dicom_file_scan_non_dicom_file_scan_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
PatientStudySeriesFileHierarchyByCollectionExcludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
UpdateStatusVisualReviewInstance	update visual_review_instance set\n  visual_review_num_series_done = ?,\n  visual_review_num_equiv_class = ?\nwhere\n  visual_review_instance_id = ?	{visual_review_num_series_done,visual_review_num_equiv_class,visual_review_instance_id}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
PatientStudySeriesHierarchyByCollectionNotMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
GetDciodvfyUnitScanErrorId	select currval('dciodvfy_unit_scan_error_dciodvfy_unit_scan_error_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
FilesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid\nfrom\n  file_location natural join file_storage_root natural join file_patient\n  natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\n  \nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{by_collection_site,find_files}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
FinalizeVisualReviewScheduling	update visual_review_instance set\n  when_visual_review_sched_complete = now()\nwhere\n  visual_review_instance_id = ?	{visual_review_instance_id}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
InsertCollectionCountPerRound	insert into collection_count_per_round(\n  collection, file_count\n) values (\n  ?, ?\n)\n	{collection,num_files}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into collection count per round
GetEquivalenceClassId	select currval('image_equivalence_class_image_equivalence_class_id_seq') as id	{}	{id}	{NotInteractive,equivalence_classes}	posda_files	Get current value of EquivalenceClassId Sequence\n
CreateEquivalenceInputClass	insert into image_equivalence_class_input_image(\n  image_equivalence_class_id,  file_id\n) values (\n  ?, ?\n)\n	{image_equivlence_class_id,file_id}	{}	{consistency,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
DicomFileTypes	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file natural join ctp_file\nwhere\n  visibility is null  \ngroup by dicom_file_type\norder by count desc	{}	{dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Dicom File Types with count of files in Posda\n
CreateEquivalenceClass	insert into image_equivalence_class(\n  series_instance_uid, equivalence_class_number,\n  processing_status\n) values (\n  ?, ?, 'Preparing'\n)\n	{series_instance_uid,equivalence_class_number}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
FilesInSeriesForApplicationOfPrivateDisposition	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_sop_common\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
SeriesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct \n  patient_id, study_instance_uid, series_instance_uid\nfrom\n  file_patient natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\nwhere\n  collection = ? and site = ? and visibility is null\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{by_collection_site,find_files}	posda_files	Get a patient, study, series hierarchy by collection, site
CreateNonDicomPathValueOccurance	insert into non_dicom_path_value_occurrance(\n  non_dicom_path_seen_id,\n  value_seen_id,\n  non_dicom_file_scan_id\n) values (\n  ?, ?, ?\n)	{non_dicom_path_seen_id,value_seen_id,non_dicom_file_scan_id}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
ClearPublicDispositions	delete from public_disposition where\n  sop_class_uid = ? and name = ?\n\n	{sop_class_uid,name}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Clear all public dispositions for a give sop_class and name
GetPublicFeaturesBySignature	select\n  name, vr\nfrom dicom_element\nwhere tag = ?	{element_signature}	{name,vr}	{UsedInPhiSeriesScan,NotInteractive,ElementDisposition}	dicom_dd	Get Element Signature By Signature (pattern) and VR
InsertPublicDisposition	insert into public_disposition(\n  element_signature_id, sop_class_uid, name, disposition\n) values (\n  ?, ?, ?, ?\n)\n\n	{element_signature_id,sop_class_uid,name,disposition}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Insert a public disposition
SeriesWithExactlyNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count = ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with exactly n equivalence classes
SeriesWithMoreThanNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count > ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
SeriesEquivalenceClassNoByProcessingStatus	select \n  distinct series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image\nwhere\n  processing_status = ?\ngroup by series_instance_uid, equivalence_class_number\norder by series_instance_uid, equivalence_class_number	{processing_status}	{series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
InsertIntoFileRoiImageLinkage	insert into file_roi_image_linkage(\n  file_id,\n  roi_id,\n  linked_sop_instance_uid,\n  linked_sop_class_uid,\n  contour_file_offset,\n  contour_length,\n  contour_digest,\n  num_points,\n  contour_type\n) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?\n)	{file_id,roi_id,linked_sop_instance_uid,linked_sop_class_uid,contour_file_offset,contour_length,contour_digest,num_points,contour_type}	{}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
SeriesFileByCollectionWithNoEquivalenceClass	select distinct\n  series_instance_uid\nfrom\n  file_series s\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\n  and not exists (\n    select \n      series_instance_uid\n   from\n      image_equivalence_class e\n   where\n      e.series_instance_uid = s.series_instance_uid\n )	{collection}	{series_instance_uid}	{equivalence_classes}	posda_files	Construct list of series in a collection where no image_equivalence_class exists
GoInService	update control_status\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,Backlog}	posda_backlog	Claim control of posda_backlog
GetValueForTagBySeries	select\n  distinct series_instance_uid, element_signature as tag, value\nfrom\n  series_scan natural join scan_element natural join seen_value natural join element_signature\nwhere\n  series_instance_uid = ? and element_signature = ?	{series_instance_uid,tag}	{series_instance_uid,tag,value}	{tag_values}	posda_phi	Find Distinct value for a given tag for a particular scanned series\n
CreateNonDicomFileScanInstance	insert into non_dicom_file_scan(\n  phi_non_dicom_scan_instance_id,\n  file_type,\n  file_in_posda,\n  posda_file_id\n) values (\n  ?, ?, true, ?\n)	{phi_non_dicom_scan_instance_id,file_type,posda_file_id}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetNonDicomPathSeenId	select\n  currval('non_dicom_file_scan_non_dicom_file_scan_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetNonDicomPathSeen	select\n  non_dicom_path_seen_id \nfrom\n  non_dicom_path_seen\nwhere\n  non_dicom_file_type = ? and\n  non_dicom_path = ?	{file_type,path}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
CreateNonDicomPathSeen	insert into non_dicom_path_seen(\n  non_dicom_file_type,\n  non_dicom_path\n) values (\n  ?, ?\n)	{non_dicom_file_type,non_dicom_path}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
IncrementPhiNonDicomFilesScanned	update phi_non_dicom_scan_instance\nset pndsi_num_files_scanned = pndsi_num_files_scanned + 1\nwhere phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
StartTransactionPosda	begin\n	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Start a transaction in Posda files
UpdateCollectionBacklogPrio	update\n  collection_count_per_round\nset\n  file_count = ?\nwhere\n  collection = ?\n\n	{priority,collection}	{}	{NotInteractive,Backlog}	posda_backlog	Update the priority of a collection in a backlog 
GetPosdaPhiSimpleElementSigInfo	select\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\nfrom element_seen\n\n	{}	{element_sig_pattern,vr,is_private,private_disposition,name_chain}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Get the relevant features of an element_signature in posda_phi_simple schema
UpdPosdaPhiSimpleEleName	update\n  element_seen\nset\n  tag_name = ?,\n  is_private = ?\nwhere\n  element_sig_pattern = ? and\n  vr = ?\n\n	{name,is_private,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Update name_chain in element_seen
GetPosdaFileStorageRoots	select\n file_storage_root_id as id, root_path as root, current, storage_class\nfrom\n  file_storage_root\n	{}	{id,root,current,storage_class}	{NotInteractive,Backlog}	posda_files	Get Posda File Storage Roots
ListOfValuesByElementInScan	select element_signature, value                  \nfrom element_signature natural join scan_element natural join seen_value natural join series_scan natural join scan_event where element_signature = ? and scan_event_id = ?;	{element_signature,scan_id}	{element_signature,value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
PatientStudySeriesFileHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  modality\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,modality}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
GetPosdaQueueSize	select\n count(*) as num_files\nfrom\n  file NATURAL JOIN file_location NATURAL JOIN file_storage_root\nwhere\n  is_dicom_file is null and\n  ready_to_process and\n  processing_priority is not null\n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_files	Get size of queue  in Posda
GetAllFilesAndDigests	select \n  received_file_path, file_digest\nfrom \n  request\n\n	{}	{received_file_path,digest}	{NotInteractive,Backlog}	posda_backlog	Get all files with digests in backlog
LockFilePosda	LOCK file in ACCESS EXCLUSIVE mode	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
UpdPosdaPhiEleName	update\n  element_signature\nset\n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n\n	{name,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Update name_chain in element signature
MakeBacklogReadyForProcessing	update control_status\n  set status = 'waiting to go inservice'\n	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Mark Backlog as ready for Processor
GetPrivateTagNameAndVrBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr}	{DispositionReport,NotInteractive,used_in_reconcile_tag_names}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
GetPosdaPhiElementSigInfo	select\n  element_signature,\n  vr,\n  is_private,\n  private_disposition,\n  name_chain\nfrom element_signature\n\n	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Get the relevant features of an element_signature in posda_phi schema
GetNRequestsForCollection	select \n  distinct request_id, collection, received_file_path, file_digest, time_received, size\nfrom \n  request natural join submitter\nwhere\n  collection = ? and not file_in_posda \norder by time_received \nlimit ?\n	{collection,num_rows}	{request_id,collection,received_file_path,file_digest,time_received,size}	{NotInteractive,Backlog}	posda_backlog	Get N Requests for a Given Collection
InsertFileImport	insert into file_import(\n  import_event_id, file_id,  file_name\n) values (\n  currval('import_event_import_event_id_seq'),?, ?\n)\n	{file_id,file_name}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
FinalizePhiNonDicomInstance	update phi_non_dicom_scan_instance\nset pndsi_end_time = now()\nwhere phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetPosdaFilesImportControl	select\n  status,\n  processor_pid,\n  idle_seconds,\n  pending_change_request,\n  files_per_round\nfrom\n  import_control	{}	{status,processor_pid,idle_seconds,pending_change_request,files_per_round}	{NotInteractive,PosdaImport}	posda_files	Get import control status from posda_files database
AbortRound	update round\n  set round_aborted = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
GetRoundId	select  currval('round_round_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog}	posda_backlog	Get posda file id of created round row
InsertImportEvent	  insert into import_event(\n    import_type, import_time\n  ) values (\n    'Processing Backlog', ?\n  )	{time_tag}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
AddWaitCount	update round\n  set wait_count = ?\nwhere\n  round_id = ?\n	{wait_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set wait_count in round
GetCurrentPosdaFileId	select  currval('file_file_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of created file row
PublicSeriesByCollection	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? \n	{collection}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{public}	public	List of all Series By Collection, Site on Public\n
StartRound	update round\n  set round_start = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
CloseRound	update round\n  set round_end = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
RollbackPosda	rollback	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Abort a transaction in Posda files
InsertRoundCounts	insert into round_counts(\n  round_id, collection,\n  num_requests, priority\n) values (\n  ?, ?,\n  ?, ?\n)\n	{round_id,collection,num_requests,priority}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_counts
EndTransactionPosda	commit\n	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	End a transaction in Posda files
GetPosdaFileIdByDigest	select\n file_id\nfrom\n  file\nwhere\n  digest = ?\n\n	{digest}	{file_id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of file by file_digest
MakePosdaFileReadyToProcess	update file\n  set ready_to_process = true\nwhere file_id = ?	{file_id}	{}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
RelinquishControlPosdaImport	update import_control\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null	{}	{}	{NotInteractive,PosdaImport}	posda_files	relese control of posda_import
CreateRound	insert into round(\n  round_created\n) values (\n  now()\n)\n	{}	{}	{NotInteractive,Backlog}	posda_backlog	Create a row in round table to record files_imported in this round
MarkFileAsInPosda	update request\nset\n  file_in_posda = true,\n  time_entered = now(),\n  posda_file_id = ?\nwhere\n  request_id = ?\n\n	{posda_file_id,request_id}	{}	{NotInteractive,Backlog}	posda_backlog	Update a request status to indicate file in Posda
InsertRoundCollection	insert into round_collection(\n  round_id, collection,\n  num_entered, num_failed,\n  num_dups\n) values (\n  ?, ?,\n  ?, ?,\n  ?\n)\n	{round_id,collection,num_entered,num_failed,num_dups}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_collection
InsertFileLocation	insert into file_location(\n  file_id, file_storage_root_id, rel_path\n) values ( ?, ?, ?)	{file_id,file_storage_root_id,rel_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
GoInServicePosdaImport	update import_control\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,PosdaImport}	posda_files	Claim control of posda_import
AddProcessCount	update round\n  set process_count = ?\nwhere\n  round_id = ?\n	{process_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set Process Count in round
GetNonDicomFileIdTypeAndPathByCollectionSite	select\n  file_id, non_dicom_file.file_type as file_type, file_sub_type,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location natural join non_dicom_file\nwhere\n  collection = ? and site = ?\n  and visibility is null	{collection,site}	{file_id,file_type,file_sub_type,path}	{NotInteractive,non_dicom_phi}	posda_files	Create a dciodvfy_scan_instance row
RoundInfoById	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id = ?\norder by round_id, collection	{round_id}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of round by id
GetGeometricInfoIntake	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	intake	Get Geometric Information by Sop Instance UID from intake
RoundSummary1	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null \ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
GetGeometricInfoPublic	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	public	Get Geometric Information by Sop Instance UID from public
GetCountSsVolume	select count(distinct sop_instance_uid) as num_links from \n(select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n) as foo;	{sop_instance_uid}	{num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
GetBacklogCountAndPrioritySummary	select\n  distinct collection, file_count as priority, count(*) as num_requests\nfrom\n  submitter natural join request natural join collection_count_per_round\nwhere\n  not file_in_posda\ngroup by collection, file_count\n	{}	{collection,priority,num_requests}	{NotInteractive,Backlog,backlog_status}	posda_backlog	Get List of Collections with Backlog and Priority Counts
GetRoiList	select \n   roi_id, roi_num ,roi_name\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{roi_id,roi_num,roi_name}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
DatesOfUpload	select \n  distinct project_name as collection, site_name as site,\n  date_trunc as date, count(*) as num_uploads from (\n   select \n    project_name,\n    site_name,\n    date_trunc('day', import_time),\n    file_id\n  from file_import natural join import_event\n    natural join ctp_file \n) as foo\ngroup by project_name, site_name, date\norder by date, project_name, site_name	{}	{collection,site,date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
RoundCountsByCollection2	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ?\norder by round_id, collection	{collection}	{round_id,collection,num_dups,round_created,round_start,round_end,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
DupSopsWithConflictingPixels	select distinct sop_instance_uid, count\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1	{}	{sop_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
RoundCountsByCollection	select \n  round_id, num_requests\nfrom round natural join round_counts\nwhere collection = ?	{collection}	{round_id,num_requests}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
ListOfCollectionsAndSitesLikeCollection	select \n    distinct project_name, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and project_name like ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{CollectionLike}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
GetContoursFromRoiId	select\n  roi_contour_id, contour_num, geometric_type, \n  number_of_points, sop_class as linked_image_sop_class,\n  sop_instance as linked_image_sop_instance, \n  frame_number as linked_image_frame_number\nfrom\n  roi_contour natural left join contour_image\nwhere roi_id = ?	{roi_id}	{roi_contour_id,contour_num,geometric_type,number_of_points,linked_image_sop_class,linked_image_sop_instance,linked_image_frame_number}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
SubjectsWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
GetPlansAndSSReferences	select sop_instance_uid as plan_referencing,\nss_referenced_from_plan as ss_referenced\nfrom plan natural join file_plan join file_sop_common using(file_id)	{}	{plan_referencing,ss_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan and ss sops where plan references ss\n\n
GetRoiCounts	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\ngroup by sop_instance_uid\norder by count desc\n	{}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
GetContourData	select\n  contour_data\nfrom\n  roi_contour\nwhere roi_contour_id = ?	{roi_contour_id}	{contour_data}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Contour Data by roi_contour_id\n
ListOfDciodvfyErrors	select \n  distinct error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index,\n  count(distinct dciodvfy_unit_scan_id)  as num_scan_units \nfrom \n  dciodvfy_error\n  natural join dciodvfy_unit_scan_error\ngroup by \n  error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index\norder by\n  error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index	{}	{error_type,error_tag,error_value,error_subtype,error_module,error_reason,error_index,num_scan_units}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy errors in DB
SeriesWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient natural join \n  file_study natural join file_series \nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id, study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
GetNonDicomFilesByCollectionWithPath	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized, rel_path\nfrom\n  non_dicom_file natural join file_import\nwhere\n  collection = ? and\n  visibility is null\n	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,rel_path}	{radcomp}	posda_files	Add a filter to a tab
CreatePhiNonDicomScanInstance	insert into phi_non_dicom_scan_instance(\n  pndsi_description,\n  pndsi_start_time,\n  pndsi_num_files,\n  pndsi_num_files_scanned\n) values (\n  ?, now(), ?, 0\n)	{description_of_scan,num_files}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
PhiNonDicomScanStatus	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   pndsi_end_time as end_time\nfrom\n  phi_non_dicom_scan_instance\norder by start_time\n	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,end_time}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
GetVisibilityByFileId	select\n  file_id, visibility\nfrom\n   ctp_file\nwhere\n   file_id = ?\n	{file_id}	{file_id,visibility}	{ImageEdit,NotInteractive}	posda_files	Get Visibility for a file by file_id\n
UpdateNameChain	update element_signature set \n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{name_chain,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
HideFile	update\n  ctp_file\nset\n  visibility = 'hidden'\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
RoundSummary1Recent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '24:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
WhereSopSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_sop_common natural join ctp_file\n  where\n    sop_instance_uid = ? and visibility is null\n)\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
GetSeriesFileCountsByPatientId	select\n  series_instance_uid, modality, dicom_file_type, count(distinct sop_instance_uid) as num_sops\nfrom\n  file_series natural join file_patient natural join \n  dicom_file natural join file_sop_common\nwhere\n  patient_id = ?\ngroup by series_instance_uid, modality, dicom_file_type\n	{patient_id}	{series_instance_uid,modality,dicom_file_type,num_sops}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Counts in file_series by patient_id\n\n
UpdPosdaPhiSimplePrivDisp	update\n  element_seen\nset\n  private_disposition = ?\nwhere\n  element_sig_pattern = ? and\n  vr = ?\n\n	{private_disposition,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Update name_chain in element_seen
StudyHierarchyByStudyUIDWithAcessionNoAndNumFiles	select distinct\n  study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  modality,\n  '<' || accession_number || '>' as accession_number,\n  count(distinct sop_instance_uid) as num_files\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_sop_common\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_description,\n  series_instance_uid, series_description, modality,accession_number\norder by accession_number	{study_instance_uid}	{study_instance_uid,study_description,series_instance_uid,series_description,modality,accession_number,num_files}	{by_study,Hierarchy}	posda_files	Show List of Study Descriptions, Series UID, Series Descriptions, and Count of SOPS for a given Study Instance UID
CreateEquivalenceClassNew	insert into image_equivalence_class(\n  series_instance_uid,\n  equivalence_class_number,\n  visual_review_instance_id,\n  processing_status\n) values (\n  ?, ?, ?, 'Preparing'\n)\n	{series_instance_uid,equivalence_class_number,visual_review_instance_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
RoundRunningTimeCurrentRound	select now() - round_start as running_time from round where round_id in (\nselect round_id from round where round_end is null and round_start is not null)	{}	{running_time}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
tags_by_role	select\n  filter_name as role, unnest(tags_enabled) as tag\nfrom query_tag_filter where filter_name = ?	{role}	{role,tag}	{roles}	posda_queries	Show a complete list of associated tags for a role\n
GetCountSsVolumeBySeriesUid	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid from file_sop_common natural join file_series\n         where series_instance_uid = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
NonDicomPhiReportJsonMetaQuotes	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'json'\ngroup by type, path, q_value\norder by type, path, q_value	{scan_id}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi}	posda_phi_simple	Simple Phi Report with Meta Quotes
ListOfUncategorizedDciodvfyErrors	select distinct error_text, count(*)  as num_occurances from dciodvfy_error\nwhere\n  error_type = 'Uncategorized'\ngroup by \nerror_text	{}	{error_text,num_occurances}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy uncategorized warnings in DB
WhereSopSitsPublic	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	public	Get Collection, Patient, Study Hierarchy in which SOP resides\n
DistinctSeriesBySubjectPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,public}	public	Get Series in A Collection, Site, Subject\n
GetBacklogControl	select\n  status, processor_pid,\n  idle_poll_interval,\n  last_service, pending_change_request,\n  source_pending_change_request,\n  request_time, num_files_per_round,\n  target_queue_size,\n  (now() - request_time) as time_pending\nfrom control_status\n	{}	{status,processor_pid,idle_poll_interval,last_service,pending_change_request,source_pending_change_request,request_time,num_files_per_round,target_queue_size,time_pending}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get control status from backlog database
LockDicomEditCompareDisposition	lock dicom_edit_compare_disposition\n	{}	{}	{adding_ctp,for_scripting}	posda_files	Lock table dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface.
GetReferencedButUnknownPlanSops	select\n  sop_instance_uid, \n  rt_dose_referenced_plan_uid as plan_sop_instance_uid \nfrom \n  rt_dose d natural join file_dose join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,plan_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of doses which reference unknown SOPs\n\n
RequestShutdown	update control_status\n  set pending_change_request = 'shutdown',\n  source_pending_change_request = 'DbIf',\n  request_time = now()	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	request a shutdown of Backlog processing
GetDosesReferencingBadPlans	select\n  sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select \n    file_id\n  from\n    rt_dose d natural join file_dose  \n  where\n    not exists (\n      select\n        sop_instance_uid \n      from\n        file_sop_common fsc \n      where d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n  )\n)	{}	{sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDosesAndPlanReferences	select\n  sop_instance_uid as dose_referencing,\n  rt_dose_referenced_plan_uid as plan_referenced\nfrom\n  rt_dose natural join file_dose join file_sop_common using (file_id)	{}	{dose_referencing,plan_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of dose and plan sops where dose references plan\n
GetDicomEditCompareDisposition	select\n  number_edits_scheduled,\n  number_compares_with_diffs,\n  number_compares_without_diffs,\n  current_disposition,\n  dest_dir\nfrom\n  dicom_edit_compare_disposition\nwhere\n  subprocess_invocation_id = ?\n  	{subprocess_invocation_id}	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,current_disposition,dest_dir}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
GetReferencedButUnknownSsSops	select\n  sop_instance_uid, \n  ss_referenced_from_plan as ss_sop_instance_uid \nfrom \n  plan p natural join file_plan join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    p.ss_referenced_from_plan  = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,ss_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
ListOfElementSignaturesAndVrs	select\n  distinct element_signature, vr, name_chain, count(*)\nfrom\n  element_signature\ngroup by element_signature, vr, name_chain\n	{}	{element_signature,vr,name_chain,count}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetEditList	select * from dicom_edit_event	{}	{dicom_edit_event_id,from_dicom_file,to_dicom_file,edit_desc_file,when_done,performing_user}	{ImageEdit}	posda_files	Get list of dicom_edit_event
PatientStatusChange	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
DupReport	select\n  distinct collection,\n  sum(num_entered) num_files,\n  sum(num_dups) num_dups,\n  (cast(sum(num_dups) as float)/cast((sum(num_entered) + sum(num_dups)) as float))*100.0 as\n   percent_dups\nfrom\n  round_collection\ngroup by collection\norder by percent_dups desc	{}	{collection,num_files,num_dups,percent_dups}	{Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Report on Percentage of duplicates by collection
GetPatientStatus	select\n  patient_import_status as status\nfrom\n  patient_import_status\nwhere\n  patient_id = ?\n	{patient_id}	{status}	{NotInteractive,PatientStatus,Update}	posda_files	Get Patient Status
IntakePatientStudySeriesHierarchyByCollectionSite	select\n  p.patient_id as patient_id,\n  t.study_instance_uid as study_instance_uid,\n  s.series_instance_uid as series_instance_uid\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  s.study_pk_id = t.study_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{intake,Hierarchy}	intake	Patient, study, series hierarchy by Collection, Site on Intake\n
ListOfPrivateElementsFromDD	select\n  pt_signature as tag,\n  pt_consensus_vr as vr,\n  pt_consensus_vm as vm,\n  pt_consensus_name as name\nfrom\n  pt	{}	{tag,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Private Tags from DD
ListOfCollectionsBySite	select \n    distinct project_name as collection, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and site_name = ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{site}	{collection,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
insert_list_of_roles	update query_tag_filter\nset tags_enabled = ?\nwhere filter_name = ?	{tag_list,role}	{}	{roles}	posda_queries	Insert a list of tags for a role\n
GetPublicHierarchyBySopInstance	select\n  i.patient_id, s.study_instance_uid, s.series_instance_uid, modality, sop_instance_uid\nfrom \n  general_image i, general_series s where sop_instance_uid = ? and\n  s.general_series_pk_id = i.general_series_pk_id	{sop_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,modality,sop_instance_uid}	{Hierarchy}	public	Get Patient, Study, Series, Modality, Sop Instance by sop_instance from public database
RoundSummary1VeryRecent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '1:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
DiskSpaceByCollectionSummaryWithDups	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file natural join file_import\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
ListOfRepeatingPrivateElementsFromDD	select\n  ptrg_signature_masked as tag,\n  ptrg_base_grp as base_grp,\n  ptrg_grp_mask as id_mask,\n  ptrg_grp_ext_mask as ext_mask,\n  ptrg_grp_ext_shift as ext_shift,\n  ptrg_consensus_vr as vr,\n  ptrg_consensus_vm as vm,\n  ptrg_consensus_name as name \nfrom ptrg	{}	{tag,base_grp,id_mask,ext_mask,ext_shift,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Repeating Private Tags from DD
PhiNonDicomScanStatusInProgress	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   now() - pndsi_start_time as time_running\nfrom\n  phi_non_dicom_scan_instance\nwhere pndsi_end_time is null\norder by start_time	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,time_running}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
PhiNonDicomScanStatusComplete	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   pndsi_end_time - pndsi_start_time as duration\nfrom\n  phi_non_dicom_scan_instance\nwhere pndsi_end_time is not null\norder by start_time	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,duration}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
FilePathByFileId	select\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{path}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,used_in_file_import_into_posda,reimport_queries}	posda_files	Get file path from id
GetListStructureSetsByCollectionSite	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\n  and project_name = ? and site_name = ?\norder by project_name, site_name, patient_id	{collection,site}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
RoundInfoLastCompleteRound	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id in (\n  select max(round_id) as round_id from round where round_end is not null\n)\norder by round_id, collection	{}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
GetDciodvfyUnitScanWarningId	select currval('dciodvfy_unit_scan_warning_dciodvfy_unit_scan_warning_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetBacklogQueueSize	select\n count(*) as num_files\nfrom\n  request\nwhere\n  file_in_posda is false \n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
GetBacklogQueueSizeWithCollection	select\n distinct collection, count(*) as num_files\nfrom\n  request natural join submitter\nwhere\n  file_in_posda is false\ngroup by collection\n\n	{}	{collection,num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
FilesInSeriesForApplicationOfPrivateDispositionIntake	select\n  i.dicom_file_uri as path, i.sop_instance_uid, s.modality\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.series_instance_uid = ?	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,intake}	intake	Get path, sop_instance_uid, and modality for all files in a series\n
GetListStructureSets	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\norder by project_name, site_name, patient_id	{}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
CountsByCollectionSiteExt	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type, dicom_file_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
NonDicomPhiReportCsvMetaQuotesLimit	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'csv'\ngroup by type, path, q_value\norder by type, path, q_value\nlimit ?	{scan_id,limit}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_phi_simple	Simple Phi Report with Meta Quotes
UpdateDicomEditCompareDispositionStatus	update dicom_edit_compare_disposition set\n  current_disposition = ?,\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{current_disposition,subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update status of an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
ReviewEditsByTimeSpan	select\n  distinct project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere\n  time_of_change > ? and time_of_change < ?\ngroup by\n  project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for	{from,to}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series over a time range
PatientStudySeriesHierarchyByCollectionSiteMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and site_name = ? \n    and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site,series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
PatientStudySeriesFileHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(*)\nfrom\n  file_study natural join\n  dicom_file natural join\n  ctp_file natural join\n  file_series natural join \n  file_patient natural join\n  file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\ngroup by\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,count}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
RoundCountsByCollection2Recent	select\n  round_id, collection,\n  round_created,\n  round_start - round_created as q_time,  \n  round_end - round_created as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and (now() - round_end) < '1:00'\norder by round_id, collection	{collection}	{round_id,collection,round_created,q_time,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
GetSeriesWithImageByCollectionSite	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
list_of_roles	select\n  filter_name as role\nfrom query_tag_filter	{}	{role}	{roles}	posda_queries	Show a complete list of roles\n
ReviewEditsBySite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
ReviewEditsByCollectionSite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  project_name = ? and site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{collection,site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for collection, site
AllValuesByElementSigIdAndScanId	select\n  distinct value\nfrom\n  seen_value natural join scan_element\nwhere\n  element_signature_id = ? and series_scan_id in (\n  select\n    series_scan_id \n  from \n    series_scan\n  where \n    scan_event_id = ?\n  )\norder by value\n	{element_signature_id,scan_id}	{value}	{tag_usage}	posda_phi	List of values seen in scan with specified tag\n
NonDicomFileInPosdaByScanPathValue	select \n  distinct posda_file_id as file_id, non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value\nfrom\n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and \n  file_type = ? and \n  non_dicom_path = ? and \n  value = ?\norder by type, path, q_value	{scan_id,file_type,non_dicom_path,value}	{file_id,type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi}	posda_phi_simple	Simple Phi Report with Meta Quotes
ListOfUncategorizedDciodvfyWarnings	select distinct warning_text, count(*)  as num_occurances from dciodvfy_warning\nwhere\n  warning_type = 'Uncategorized'\ngroup by \nwarning_text	{}	{warning_text,num_occurances}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy uncategorized warnings in DB
AddPhiElement	insert into element_signature (\n  element_signature,\n  vr,\n  is_private,\n  private_disposition,\n  name_chain\n) values (\n  ?, ?, ?, ?, ?\n)\n	{element_signature,vr,is_private,private_disposition,name_chain}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Add an element_signature row to posda_phi
DistinctSeriesByCollectionIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake}	intake	Get Series in A Collection\n
ListOfCollectionsAndSites	select \n    distinct project_name, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
AddPhiSimpleElement	insert into element_seen (\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\n) values (\n  ?, ?, ?, ?, ?\n)\n	{element_signature,vr,is_private,private_disposition,name_chain}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Add an element_seen row to posda_phi_simple
SeriesVisualReviewResultsByCollectionSite	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetPosdaFileCreationRoot	select file_storage_root_id, root_path from file_storage_root where current and storage_class = 'created'	{}	{file_storage_root_id,root_path}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get the file_storage root for newly created files
RoundSummary1DateRange	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_start > ? and round_end < ?\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
CreateBackgroundInputLine	insert into background_input_line(\n  background_subprocess_id,\n  line_number,\n  line\n) values (\n  ?, ?, ?\n)	{background_subprocess_id,param_index,param_value}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_input_line table\n\nUsed by background subprocess
ReviewEditsBySiteCollectionLike	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ? and project_name like ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site,CollectionLike}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
DistinctSeriesByCollectionSitePublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	public	Get Series in A Collection, Site\n
PatientStudySeriesHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
DistinctSopsInCollectionSitePublicWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	public	Get Distinct SOPs in Collection with number files\n
DuplicateSopsInSeries	select\n  sop_instance_uid, import_time, file_id\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\norder by sop_instance_uid, import_time\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series,dup_sops}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
SeriesVisualReviewResultsByCollectionSiteStatus	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
TagsSeenPrivate	select\n  element_signature, vr, is_private, private_disposition, name_chain\nfrom\n  element_signature\nwhere is_private\norder by element_signature, vr	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
ShowAllHideEventsByCollectionSite	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file \n  where project_name = ? and site_name = ? \n)	{collection,site}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
SeriesVisualReviewResultsByCollectionSiteStatusNotGood	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status != 'Good'\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SubjectCountsDateRangeSummaryByCollectionSite	select \n  distinct patient_id,\n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_patient natural join \n  file_import natural join \n  import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id\norder by patient_id	{collection,site}	{patient_id,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
DistinctSopsInCollectionSiteIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	intake	Get Distinct SOPs in Collection with number files\n
SeriesVisualReviewResultsByCollectionSiteStatusVisible	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
PatientIdByNonDicomFileId	select subject from non_dicom_file where file_id = ?	{file_id}	{subject}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
NonDicomPhiReportCsvMetaQuotes	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'csv'\ngroup by type, path, q_value\norder by type, path, q_value\n	{scan_id}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_phi_simple	Simple Phi Report with Meta Quotes
ListOfQueriesPerformedByQueryName	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n query_name = ?	{query_name}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
GetPopupDefinition	select\n  command_line, input_line_format,\n  operation_name, operation_type,\n  tags\nfrom \n  spreadsheet_operation\nwhere\n  operation_name = ?\n	{operation_name}	\N	{NotInteractive,used_in_process_popup}	posda_queries	N\no\nn\ne
GetSeriesWithImageByCollectionSiteDateRange	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,from,to}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
ListOfQueriesPerformed	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\n	{}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
FileIdByPixelType	select\n  distinct file_id\nfrom\n  image natural join file_image\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  (pixel_representation = ?  or pixel_representation is null) and\n  (planar_configuration = ? or planar_configuration is null)\nlimit 100	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{file_id}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
DuplicateFilesBySop	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, sop_instance_uid, modality, file_id,\n    root_path || '/' || file_location.rel_path as file_path,\n    count(*) as num_uploads,\n    min(import_time) as first_upload, \n    max(import_time) as last_upload\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_sop_common using(file_id)\n  join file_series using(file_id)\n  join file_location using(file_id)\n  join file_storage_root using(file_storage_root_id)\n  join file_import using (file_id)\n  join import_event using (import_event_id)\nwhere\n  sop_instance_uid = ?\n  and visibility is null\ngroup by\n  project_name, site_name, patient_id, sop_instance_uid, modality, \n  file_id, file_path\norder by\n  collection, site, patient_id, sop_instance_uid, modality\n	{sop_instance_uid}	{collection,site,patient_id,sop_instance_uid,modality,file_id,file_path,num_uploads,first_upload,last_upload}	{duplicates}	posda_files	Counts query by Collection, Site\n
PatientStudySeriesHierarchyByCollectionMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
DuplicateSopsInSeriesDistinct	select\n  distinct sop_instance_uid,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\ngroup by sop_instance_uid\norder by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,num_files,earliest,latest}	{by_series,dup_sops}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
SubjectsWithDupSops	select\n  distinct collection, site, patient_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{duplicates,dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetPhiNonDicomScanInstanceById	select\n  phi_non_dicom_scan_instance_id,\n  pndsi_description as description,\n  pndsi_start_time as start_time,\n  pndsi_num_files as num_files,\n  pndsi_num_files_scanned as num_files_scanned,\n  pndsi_end_time as end_time\nfrom\n  phi_non_dicom_scan_instance\nwhere\n  phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{phi_non_dicom_scan_instance_id,description,start_time,num_files,num_files_scanned,end_time}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
LongestRunningNQueriesByDate	select * from (\nselect query_invoked_by_dbif_id as id, query_name, query_end_time - query_start_time as duration,\ninvoking_user, query_start_time, number_of_rows\nfrom query_invoked_by_dbif\nwhere query_end_time is not null and\nquery_start_time > ? and query_end_time < ?\norder by duration desc) as foo\nlimit ?	{from,to,n}	{id,query_name,duration,invoking_user,query_start_time,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
FileIdPathTimesLoadedCountsBySopInstance	select\n  distinct file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common where sop_instance_uid = ?\ngroup by file_id, path\norder by first_loaded	{sop_instance_uid}	{file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get file path from id
SubjectsWithDupSopsByCollection	select\n  distinct collection, site, subj_id, \n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id, sop_instance_uid, import_time\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_import\n    natural join import_event\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection}	{collection,site,subj_id,num_sops,num_files,earliest,latest}	{dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SubjectsWithDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, \n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id, sop_instance_uid, import_time\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_import\n    natural join import_event\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and site_name = ?\n            and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,earliest,latest}	{dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FirstFileForSopPosda	select\n  root_path || '/' || rel_path as path,\n  modality\nfrom \n  file_location natural join file_storage_root\n  natural join file_sop_common\n  natural join file_series\n  natural join ctp_file\nwhere\n  sop_instance_uid = ? and visibility is null\nlimit 1	{sop_instance_uid}	{path,modality}	{by_series,UsedInPhiSeriesScan}	posda_files	First files in series in Posda\n
SopInstanceFilePathCountAndLoadTimesBySeries	select\n  distinct sop_instance_uid, file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common\n  natural join file_series\nwhere series_instance_uid = ?\ngroup by sop_instance_uid, file_id, path\norder by sop_instance_uid, first_loaded	{series_instance_uid}	{sop_instance_uid,file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,dup_sops}	posda_files	Get file path from id
GetSsVolumeForStudySeriesCount	select \n  distinct for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, count(distinct sop_instance) as num_sops\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\ngroup by for_uid, study_instance_uid, series_instance_uid, sop_class\n	{sop_instance_uid}	{for_uid,study_instance_uid,series_instance_uid,sop_class_uid,num_sops}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
GetDciodvfyErrorAttrPres	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributesPresentWhenConditionNotSatisfied'\n  and error_tag = ?\n  and error_module = ?	{error_tag,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
PhiScanStatus	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id\n	{}	{id,start_time,end_time,duration,description,to_scan,scanned}	{tag_usage,phi_review,phi_status,scan_status}	posda_phi_simple	Status of PHI scans\n
RtstructSopsByCollectionSiteDateRange	select distinct\n  sop_instance_uid\nfrom\n  file_series natural join ctp_file natural join file_sop_common\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and site_name = ?\n  and visibility is null and import_time > ? and \n  import_time < ?\n  and modality = 'RTSTRUCT'	{collection,site,from,to}	{sop_instance_uid}	{Hierarchy,apply_disposition,hash_unhashed}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetDicomEditCompareToFiles	select \n  path,\n  file_id,\n  project_name,\n  visibility\nfrom \n  (\n    select to_file_path as path, to_file_digest as digest\n    from dicom_edit_compare\n    where subprocess_invocation_id = ?\n  ) as foo natural left join\n  file natural left join ctp_file	{subprocess_invocation_id}	{path,file_id,project_name,visibility}	{adding_ctp,for_scripting}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
GetValuesForTag	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ? and scan_event_id = ?\n	{tag,scan_id}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
RoiLinkagesByFileId	select\n  distinct roi_id,\n  linked_sop_instance_uid as sop_instance_uid,\n  contour_type\nfrom\n  file_roi_image_linkage\nwhere file_id =?	{file_id}	{roi_id,sop_instance_uid,contour_type}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
TagsSeenSimplePrivateWithCount	select \n  distinct element_sig_pattern,\n  vr,\n  private_disposition, tag_name,\n  count(distinct value) as num_values\nfrom\n  element_seen natural left join\n  element_value_occurance\n  natural left join value_seen\nwhere\n  is_private \ngroup by element_sig_pattern, vr, private_disposition, tag_name\norder by element_sig_pattern;	{}	{element_sig_pattern,vr,private_disposition,tag_name,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
GetSeriesWithSignatureByCollectionSite	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection,site}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature,phi_review}	posda_files	Get a list of Series with Signatures by Collection\n
GetImportEventId	select  currval('import_event_import_event_id_seq') as id\n	{}	{id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of created import_event row
InsertEditImportEvent	insert into import_event(\n  import_type, import_comment, import_time\n) values (\n  ?, ?, now()\n)	{import_type,import_comment}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Insert an Import Event for an Edited File
FilePathComponentsByFileId	select\n  root_path, rel_path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{root_path,rel_path}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,used_in_file_import_into_posda}	posda_files	Get file path from id
TagsSeenSimplePrivate	select\n  element_sig_pattern, vr, private_disposition, tag_name\nfrom\n  element_seen\nwhere\n  is_private\norder by element_sig_pattern	{}	{element_sig_pattern,vr,private_disposition,tag_name}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
InsertFileImportLong	insert into file_import(\n  import_event_id, file_id,  rel_path, rel_dir, file_name\n) values (\n  ?, ?, ?, ?, ?\n)\n	{import_event_id,file_id,rel_path,rel_dir,file_name}	{}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Create an import_event
CreateNonDicomEditCompareDisposition	insert into non_dicom_edit_compare_disposition(\n  subprocess_invocation_id, start_creation_time, current_disposition, process_pid, dest_dir\n)values (\n  ?, now(), 'Starting Up', ?, ?\n)	{subprocess_invocation_id,process_pid,dest_dir}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Create an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
FinalizeNonDicomEditCompareDisposition	update non_dicom_edit_compare_disposition set\n  end_creation_time = now(),\n  last_updated = now(),\n  current_disposition = 'Comparisons Complete'\nwhere\n  subprocess_invocation_id = ?\n	{subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Update an entry in dicom_edit_compare_disposition to indicate its done.\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
GetSimpleValuesForTag	select\n  distinct value\nfrom\n  element_seen natural join\n  element_value_occurance natural join\n  value_seen\nwhere element_sig_pattern = ? and vr = ?\n	{tag,vr}	{value}	{tag_values}	posda_phi_simple	Find Values for a given tag, vr in posda_phi_simple\n
UnHideFile	update\n  ctp_file\nset\n  visibility = null\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
SeriesWithDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetValuesByEleVr	select\n  distinct value\nfrom\n  element_signature\n  join scan_element using(element_signature_id)\n  join seen_value using (seen_value_id)\nwhere\n  element_signature = ? and vr = ?\n	{element_signature,vr}	{value}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get All  values in posda_phi by element, vr
AddBackgroundTimeAndRowsToBackgroundProcess	update background_subprocess set\n  when_background_entered = now(),\n  input_rows_processed = ?,\n  background_pid = ?\nwhere\n  background_subprocess_id = ?\n\n	{input_rows,background_pid,background_subprocess_id}	\N	{NotInteractive,used_in_background_processing}	posda_queries	N\no\nn\ne
ListOfQueriesPerformedByDate	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere query_start_time > ? and query_end_time < ?\n	{from,to}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
GetNonSquareImageIds	select file_id from image natural join file_image  where pixel_rows != pixel_columns\noffset ? limit ?	{offset,limit}	{file_id}	{ImageEdit}	posda_files	Get list of dicom_edit_event
InsertIntoNonDicomEditCompareFixed	insert into non_dicom_edit_compare(\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  report_file_id,\n  to_file_path\n) values ( ?, ?, ?, ?, ?)	{subprocess_invocation_id,from_file_digest,to_file_digest,report_file_id,to_file_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda,public_posda_counts,non_dicom_edit}	posda_files	Lock the file table in posda_files
PublicFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{public,used_in_simple_phi}	public	List of all Series By Collection, Site on Intake\n
GetSeriesWithSignatureByCollectionSiteDateRange	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection,site,from,to}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature,phi_review}	posda_files	Get a list of Series with Signatures by Collection\n
ShowPopUps	select * from popup_buttons\n 	{}	{popup_button_id,name,object_class,btn_col,is_full_table,btn_name}	{AllCollections,universal}	posda_queries	Get a list of configured pop-up buttons
NonDicomDifferenceReportByEditId	select\n  distinct report_file_id, count(distinct to_file_path) as num_files\nfrom non_dicom_edit_compare\nwhere subprocess_invocation_id =?\ngroup by report_file_id\norder by report_file_id	{subprocess_invocation_id}	{report_file_id,num_files}	{used_in_file_import_into_posda,used_in_file_migration,non_dicom_edit}	posda_files	Get count of files relative to storage root
GetCurrentEditEventRowId	select currval('dicom_edit_event_dicom_edit_event_id_seq') as id	{}	{id}	{NotInteractive,used_in_import_edited_files}	posda_files	Get current dicom_edit_event_id\nFor use in scripts\nNot really intended for interactive use\n
CloseDicomFileEditEvent	update dicom_edit_event\n  set time_completed = now(),\n  report_file = ?,\n  notification_sent = ?\nwhere\n  dicom_edit_event_id = ?	{report_file_id,notify,dicom_edit_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Increment edits done in dicom_edit_event table\nFor use in scripts\nNot really intended for interactive use\n
ListOfDciodvfyWarningsWithCounts	select distinct warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index, count(distinct dciodvfy_unit_scan_id)  as num_scan_units from dciodvfy_warning\nnatural join dciodvfy_unit_scan_error group by \nwarning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index\norder by warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index	{}	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index,num_scan_units}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy warnings in DB
SopsDupsInDifferentSeriesByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetAdverseFileEventsByEditEventId	select\n  adverse_file_event_id,\n  file_id,\n  event_description,\n  when_occured\nfrom\n  adverse_file_event natural join\n  dicom_edit_event_adverse_file_event\nwhere\n  dicom_edit_event_id = ?	{dicom_edit_event_id}	{adverse_file_event_id,file_id,event_description,when_occured}	{NotInteractive,used_in_import_edited_files}	posda_files	Get List of Adverse File Events for a given dicom_edit_event\nFor use in scripts\nNot really intended for interactive use\n
GetFileIdAndVisibilityByDigest	select\n  f.file_id as id,\n  c.file_id as ctp_file_id,\n  c.visibility as visibility\nfrom\n  file f left join ctp_file c\n  using(file_id)\nwhere\n  f.file_id in (\n  select file_id\n  from\n     file\n  where\n     digest = ?\n)	{digest}	{id,ctp_file_id,visibility}	{NotInteractive,used_in_import_edited_files}	posda_files	Get file_id, and current visibility by digest\nFor use in scripts\nNot really intended for interactive use\n
IncrementEditsDone	update dicom_edit_event\n  set edits_done = edits_done + 1\nwhere\n  dicom_edit_event_id = ?	{dicom_edit_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Increment edits done in dicom_edit_event table\nFor use in scripts\nNot really intended for interactive use\n
DistinctSeriesByCollectionSiteSubject	select distinct patient_id, series_instance_uid, dicom_file_type, modality, count(*)\nfrom (\nselect distinct patient_id, series_instance_uid, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct patient_id, series_instance_uid, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join file_patient\n   natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null)\nas foo\ngroup by patient_id, series_instance_uid, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by patient_id, series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,patient_id}	{patient_id,series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
InsertIntoPatientMappingNew	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  diagnosis_date, baseline_date, uid_root) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,uid_root}	{}	{adding_ctp,mapping_tables,insert_pat_mapping,non_dicom_edit}	posda_files	Make an entry into the patient_mapping table with no batch and interval
PatientIdMappingByPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root\nfrom \n  patient_mapping\nwhere\n  from_patient_id = ?	{from_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
PatientIdAndMappingByNonDicomFileId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom \n  patient_mapping pm, non_dicom_file ndf\nwhere\n  pm.from_patient_id = ndf.subject and\n  file_id = ?	{file_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root,computed_shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
SimplePhiReportAll	select \n  distinct element_sig_pattern as element, vr, value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ?\ngroup by element_sig_pattern, vr, value, description\norder by vr, element	{scan_id}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
LinkAFEtoEditEvent	insert into dicom_edit_event_adverse_file_event(\n  dicom_edit_event_id, adverse_file_event_id\n) values (?, ?)\n	{dicom_edit_event_id,adverse_file_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert row linking adverse_file_edit_event to dicom_edit_event\nFor use in scripts\nNot really intended for interactive use\n
PublicPatientsByCollectionSite	select\n  distinct p.patient_id as PID, count(distinct i.image_pk_id) as num_images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by PID\n	{collection,site}	{PID,num_images}	{public}	public	List of all Files Images By Collection, Site\n
GetFileIdVisibilityBySeriesInstanceUid	select distinct file_id, visibility\nfrom file_series natural left join ctp_file\nwhere series_instance_uid = ?	{series_instance_uid}	{file_id,visibility}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
SimplePhiReportSelectedVR	select \n  distinct element_sig_pattern as element, vr, value, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element_sig_pattern, vr, value;	{scan_id}	{element,vr,value,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetDicomEditCompareFromFiles	select \n  file_id,\n  project_name,\n  visibility\nfrom \n  file natural left join ctp_file\nwhere\n  file_id in (\n    select file_id from file f, dicom_edit_compare dec\n    where f.digest = dec.from_file_digest and subprocess_invocation_id = ?\n  )	{subprocess_invocation_id}	{file_id,project_name,visibility}	{adding_ctp,for_scripting}	posda_files	Get a list of from files from the dicom_edit_compare table for a particular edit instance, with visibility\n\nNB: project_name will be null if there is no ctp_file row (so to hide the file you need to create a row with\n       project_name = 'UNKNOWN', site_name = 'UNKNOWN' and visibility = 'hidden' (if you want to hide the file)
RtdoseSopsByCollectionSiteDateRange	select distinct\n  sop_instance_uid\nfrom\n  file_series natural join ctp_file natural join file_sop_common\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and site_name = ?\n  and visibility is null and import_time > ? and \n  import_time < ?\n  and modality = 'RTDOSE'	{collection,site,from,to}	{sop_instance_uid}	{Hierarchy,apply_disposition,hash_unhashed}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetCurrentAdverseFileEvent	select currval('adverse_file_event_adverse_file_event_id_seq') as id	{}	{id}	{NotInteractive,used_in_import_edited_files}	posda_files	Get current dicom_edit_event_id\nFor use in scripts\nNot really intended for interactive use\n
ListOfDciodvfyWarnings	select distinct warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index\n from dciodvfy_warning\norder by warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index	{}	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy warnings in DB
UpdateNonDicomEditCompareDisposition	update non_dicom_edit_compare_disposition set\n  num_edits_scheduled = ?,\n  num_compares_with_diffs = ?,\n  num_compares_without_diffs = ?,\n  current_disposition = 'Comparisons In Progress',\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
LockNonDicomEditCompareDisposition	lock non_dicom_edit_compare_disposition\n	{}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Lock table non_dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface.
FilesInSeries	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
UpdateElementDispositionOnly	update element_signature set \n  private_disposition = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{private_disposition,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
GetDciodvfyErrorUnrecogEnum	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedEnumeratedValue'\n  and error_value = ?\n  and error_tag = ?\n  and error_index = ?	{error_value,error_tag,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
TagsSeenPrivateWithCountNullDisp	select\n  distinct element_signature, \n  vr, \n  private_disposition, \n  name_chain, \n  count(distinct value) as num_values\nfrom\n  element_signature natural left join\n  scan_element natural left join\n  seen_value\nwhere is_private and private_disposition is null\ngroup by element_signature, vr, private_disposition, name_chain\norder by element_signature, vr	{}	{element_signature,vr,private_disposition,name_chain,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
AddNewDataToRoiTable	update roi set\n  max_x = ?,\n  max_y = ?,\n  max_z = ?,\n  min_x = ?,\n  min_y = ?,\n  min_z = ?,\n  roi_interpreted_type = ?,\n  roi_obser_desc = ?,\n  roi_obser_label = ?\nwhere\n  roi_id = ?	{max_x,max_y,max_z,min_x,min_y,min_z,roi_interpreted_type,roi_obser_desc,roi_obser_label,roi_id}	{}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
AddTagToQuery	update queries\nset tags = array_append(tags, ?)\nwhere name = ?	{tag,name}	{}	{query_tags,meta,test,hello}	posda_queries	Add a tag to a query
TagsSeenSimplePrivateWithCountAndNullDisp	select \n  distinct element_sig_pattern,\n  vr,\n  private_disposition, tag_name,\n  count(distinct value) as num_values\nfrom\n  element_seen natural left join\n  element_value_occurance\n  natural left join value_seen\nwhere\n  is_private and private_disposition is null\ngroup by element_sig_pattern, vr, private_disposition, tag_name\norder by element_sig_pattern;	{}	{element_sig_pattern,vr,private_disposition,tag_name,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
TagsSeenPrivateWithCount	select\n  distinct element_signature, \n  vr, \n  private_disposition, \n  name_chain, \n  count(distinct value) as num_values\nfrom\n  element_signature natural left join\n  scan_element natural left join\n  seen_value\nwhere is_private\ngroup by element_signature, vr, private_disposition, name_chain\norder by element_signature, vr	{}	{element_signature,vr,private_disposition,name_chain,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
SimplePhiReportByScanVrScreenDeletedPT	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, \n  private_disposition as disposition, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ? and\n  private_disposition in ('k', 'oi', 'h', 'o', null)\ngroup by element_sig_pattern, vr, value, tag_name, private_disposition	{scan_id,vr}	{element,vr,value,description,disposition,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
RemoveTagFromQuery	update queries\nset tags = array_remove(tags, ?::text)\nwhere name = ?	{tag_name,query_name}	{}	{meta}	posda_queries	Remove a tag from a query
GetNonDicomEditCompareDisposition	select\n  num_edits_scheduled,\n  num_compares_with_diffs,\n  num_compares_without_diffs,\n  current_disposition,\n  dest_dir\nfrom\n  non_dicom_edit_compare_disposition\nwhere\n  subprocess_invocation_id = ?\n  	{subprocess_invocation_id}	{num_edits_scheduled,num_compares_with_diffs,num_compares_without_diffs,current_disposition,dest_dir}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Retrieve entries from patient_mapping table
UpdateNonDicomEditCompareDispositionStatus	update non_dicom_edit_compare_disposition set\n  current_disposition = ?,\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{current_disposition,subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Update status of an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
CreateSimpleElementSeen	insert into \n   element_seen(element_sig_pattern, vr)\n   values(?, ?)\n	{element_sig_pattern,vr}	{}	{NotInteractive,used_in_simple_phi_maint,used_in_phi_maint}	posda_phi_simple	Create a new Simple PHI scan
GetSimpleElementSeenIndex	select currval('element_seen_element_seen_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get index of newly created element_seen
GetSimpleElementSeen	select\n  element_seen_id as id\nfrom \n  element_seen\nwhere\n  element_sig_pattern = ? and\n  vr = ?	{element_sig_pattern,vr}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get an element_seen row by element, vr (if present)
CreateSimpleSeriesScanInstance	insert into series_scan_instance(\nscan_instance_id, series_instance_uid, start_time\n)values(?, ?, now())	{scan_instance_id,series_instance_uid}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
SeriesConsistency	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments,\n  count(*)\nfrom\n  file_series natural join ctp_file\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,modality,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{by_series,consistency,series_consistency}	posda_files	Check a Series for Consistency\n
GetDciodvfyErrorUnrecogPub	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedPublicTag'\n  and error_tag = ?\n	{error_tag}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'UnrecognizedPublicTag'
CreateSimplePhiScanRow	insert into phi_scan_instance(\ndescription, num_series, start_time, num_series_scanned,file_query\n)values(?, ?,now(), 0,?)	{description,num_series,file_query}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
ShowFilesHiddenByCollectionSite	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  reason_for as reason,\n  prior_visibility as before,\n  new_visibility as after,\n  user_name as user,\n  count(distinct file_id) as num_files,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest\nfrom \n  file_visibility_change natural join\n  file_patient natural join\n  ctp_file\nwhere\n  project_name = ? and site_name = ?\ngroup by\n   collection, site, \n   patient_id,\n   reason, before, after, user_name\norder by\n  earliest, patient_id	{collection,site}	{collection,site,patient_id,reason,before,after,user,num_files,earliest,latest}	{old_hidden}	posda_files	Show Files Hidden By User Date Range
GetSimplePhiScanId	select currval('phi_scan_instance_phi_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
GetNonDicomEditCompareToFiles	select \n  path,\n  file_id,\n  collection,\n  visibility\nfrom \n  (\n    select to_file_path as path, to_file_digest as digest\n    from non_dicom_edit_compare\n    where subprocess_invocation_id = ?\n  ) as foo natural left join\n  file natural left join non_dicom_file	{subprocess_invocation_id}	{path,file_id,collection,visibility}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Before import:\n       There should be no file_id (i.e. file has not been imported)  And there should be no collection.\n       (i.e. normally file_id, collection, and visibility are all null).
GetNonDicomEditCompareFromFiles	select \n  file_id,\n  collection,\n  visibility\nfrom \n  file join non_dicom_file using(file_id)\nwhere\n  file_id in (\n    select file_id from file f, non_dicom_edit_compare ndec\n    where f.digest = ndec.from_file_digest and subprocess_invocation_id = ?\n  )	{subprocess_invocation_id}	{file_id,collection,visibility}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get a list of from files from the non_dicom_edit_compare table for a particular edit instance, with visibility\n\nNB: collection will be null if there is no non_dicom_file row.  This shouldn't ever happen.  ever!  abort and investigate\n       visibility, on the other hand, should always be null.  
GetDciodvfyErrorAttrSpecWithIndex	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributeSpecificErrorWithIndex'\n  and error_tag = ?\n  and error_subtype= ?\n  and error_index = ?	{error_tag,error_subtype,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_errors row where subtype = AttributeSpecificErrorWithIndex
GetDciodvfyWarningUnrecogTag	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedTag'\n  and warning_tag = ?\n  and warning_comment = ?\n 	{warning_tag,warning_comment}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetDciodvfyWarningUnrecognizedDT	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedDefinedTerm'\n  and warning_tag = ?\n  and warning_value = ?\n  and warning_index = ?\n	{warning_tag,warning_value,warning_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = UnrecognizedDefinedTerm
PlansWithNoFrameOfRef	select \n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root natural join ctp_file\nwhere \n  file_id in (\n    select file_id \n    from file_plan p\n    where not exists (select for_uid from file_for f where f.file_id = p.file_id)\n  )	{}	{file_id,path}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
SetDciodvfyScanInstanceNumScanned	update dciodvfy_scan_instance set\n  scanned_so_far = ?\nwhere\n  dciodvfy_scan_instance_id = ?	{scanned_so_far,dciodvfy_scan_instance_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetDciodvfyErrorCantBeNegative	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'CantBeNegative'\n  and error_tag = ?\n  and error_value = ?\n	{error_tag,error_value}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'CantBeNegative'
ImageFrameOfReferenceBySeries	select \n  distinct for_uid, count(*) as num_files\nfrom\n  file_series natural join file_sop_common natural join file_for natural join ctp_file\nwhere \n  series_instance_uid = ? and visibility is null\ngroup by for_uid	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDciodvfyErrorAttrSpec	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributeSpecificError'\n  and error_tag = ?\n  and error_subtype= ?	{error_tag,error_subtype}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_errors row where subtype = AttributeSpecificError
GetDciodvfyWarningWrongExpVr	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'WrongExplicitVr'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_comment = ?\n  and warning_value = ?\n  and warning_reason = ?\n 	{warning_tag,warning_desc,warning_comment,warning_value,warning_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetDciodvfyErrorInvalidEleLen	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'InvalidElementLength'\n  and error_tag = ?\n  and error_value = ?\n  and error_subtype = ?\n  and error_reason = ?\n  and error_index = ?\n	{error_tag,error_value,error_subtype,error_reason,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'InvalidElementLength'
GetDciodvfyWarningRetiredAttr	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'RetiredAttribute'\n  and warning_tag = ?\n  and warning_desc = ?	{warning_tag,warning_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warnings row where warning_type = GetDciodvfyWarningRetiredAttr
FilesEarlierThanDateByCollectionSite	select \n  distinct file_id, visibility as old_visibility\nfrom \n  ctp_file natural join file_import natural join import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null\n  and import_time < ?\n 	{collection,site,before}	{file_id,old_visibility}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Show Received before date by collection, site
GetDciodvfyErrorBadVm	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'BadValueMultiplicity'\n  and error_tag = ?\n  and error_value = ?\n  and error_index = ?\n  and error_module = ?\n	{error_tag,error_value,error_index,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
GetDciodvfyWarningAttrSpec	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'AttributeSpecificWarning'\n  and warning_tag = ?\n  and warning_desc= ?	{warning_tag,warning_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = AttributeSpecificWarning
GetDciodvfyWarningAttrSpecWithValue	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'AttributeSpecificWarningWithValue'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_value = ?\n\n\n  	{warning_tag,warning_desc,warning_value}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = AttributeSpecificWarningWithValue
GeFromToFilesFromNonDicomEditCompare	select \n  file_id as from_file_id, \n  foo.to_file_id \nfrom \n  file, \n  (\n    select \n      from_file_digest, \n      file_id as to_file_id\n    from \n      file,\n       non_dicom_edit_compare \n    where \n      to_file_digest = digest\n      and subprocess_invocation_id = ?\n  ) as foo\nwhere \n  from_file_digest = digest;	{subprocess_invocation_id}	{from_file_id,to_file_id}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Retrieve entries from patient_mapping table
QueryByName	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere name = ?\n	{name}	{name,description,query,tags}	{AllCollections,queries}	posda_queries	Get a list of available queries
DupSopsWithFileIdByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  file_id,\n  visibility\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id,\n    visibility\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n\n	{collection,site,from,to}	{collection,site,subj_id,sop_instance_uid,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetRoiIdFromFileIdRoiNum	select\n  roi_id\nfrom\n  roi natural join structure_set natural join file_structure_set\nwhere \n  file_id =? and roi_num = ?	{file_id,roi_num}	{roi_id}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
DistinctVrByScan	select \n  distinct vr, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? \ngroup by vr	{scan_id}	{vr,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetRoiContoursAndFiles	select distinct root_path || '/' || rel_path as file_path, roi_id, roi_contour_id, roi_num, contour_num, geometric_type, number_of_points \nfrom roi_contour natural join roi natural join structure_set natural join file_structure_set natural join file_storage_root natural join file_location\nwhere file_id = ?	{file_id}	{file_path,roi_id,roi_contour_id,roi_num,contour_num,geometric_type,number_of_points}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
InsertFileFrameOfRef	insert into file_for(file_id, for_uid, position_ref_indicator) values(?, ?, ?)	{file_id,for_uid,position_ref_indicator}	{}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
SimplePhiReportByScanVr	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
CreateDciodvfyScanInstance	insert into dciodvfy_scan_instance(\n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time\n) values (\n  ?, ?, ?, 0, now()\n)	{type_of_unit,description_of_scan,number_units}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
FilesByModalityByCollectionSiteDateRange	select\n  distinct patient_id, modality, series_instance_uid, sop_instance_uid, \n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom\n  file_patient natural join file_series natural join file_sop_common natural join ctp_file\n  natural join file_location natural join file_storage_root\n  join file_import using(file_id) join import_event using(import_event_id)\nwhere\n  modality = ? and\n  project_name = ? and \n  site_name = ? and\n  import_time > ? and import_time < ? and\n  visibility is null\ngroup by patient_id, modality, series_instance_uid, sop_instance_uid, path	{modality,collection,site,from,to}	{patient_id,modality,series_instance_uid,sop_instance_uid,path,earliest,latest}	{FindSubjects,intake,FindFiles}	posda_files	Find All Files with given modality in Collection, Site
GetListOfUnprocessedStructureSets	select\n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location\nwhere file_id in (\n  select distinct file_id\n  from dicom_file df natural join ctp_file\n  where \n  dicom_file_type = 'RT Structure Set Storage'\n  and visibility is null\n  and not exists (\n    select file_id from file_roi_image_linkage r where r.file_id = df.file_id\n  )\n)	{}	{file_id,path}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
FastCurrentPatientStatii	select \n  patient_id,\n  patient_import_status\nfrom \n  patient_import_status\n	{}	{patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
GetNonDicomFileTypeSubTypeCollectionSiteSubjectById	select \n  file_type,\n  file_sub_type,\n  collection,\n  site,\n  subject\nfrom \n  non_dicom_file\nwhere file_id = ?	{file_id}	{file_type,file_sub_type,collection,site,subject}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get stuff from non_dicom_file by id\n
PlanToSsLinkageByCollectionSite	select\n  sop_instance_uid as referencing_plan, ss_referenced_from_plan as referenced_ss\nfrom\n  file_plan natural join plan join file_sop_common using(file_id) natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null	{collection,site}	{referencing_plan,referenced_ss}	{"Structure Sets",sops,LinkageChecks,plan_linkages,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
CreateDicomFileEditRow	insert into dicom_file_edit(\n  dicom_edit_event_id, from_file_digest, to_file_digest\n) values (?, ?, ?)\n	{dicom_edit_event_id,from_file_digest,to_file_digest}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert dicom_edit_event row\nFor use in scripts\nNot really intended for interactive use\n
TagsSeen	select\n  element_signature, vr, is_private, private_disposition, name_chain\nfrom\n  element_signature order by element_signature	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
TagsSeenSimple	select\n  element_sig_pattern, vr, is_private, private_disposition, tag_name\nfrom\n  element_seen order by element_sig_pattern	{}	{element_sig_pattern,vr,is_private,private_disposition,tag_name}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
ShowImportsBySopInstance	select \n  file_id, import_time, import_comment \nfrom \n  import_event natural join file_import \nwhere file_id in (\n  select file_id from file_sop_common where sop_instance_uid = ?\n)\norder by import_time	{sop_instance_uid}	{file_id,import_time,import_type,import_comment}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
InsertEditEventRow	insert into dicom_edit_event(\n  edit_desc_file, time_started, edit_comment, num_files, process_id, edits_done\n) values (?, now(), ?, ?, ?, 0)\n	{edit_desc_file,edit_comment,num_files,process_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert edit_event\nFor use in scripts\nNot really intended for interactive use\n
DciodvfyErrorIdByValue	select \n  distinct dciodvfy_error_id\nfrom \n  dciodvfy_error\nwhere\n  error_value = ?	{error_value}	{dciodvfy_error_id}	{tag_usage,dciodvfy}	posda_phi_simple	find dciodvfy_error_id by contents of error_value
UpdateNonDicomFileTypeSubTypeCollectionSiteSubjectById	update non_dicom_file set\n  file_type = ?,\n  file_sub_type = ?,\n  collection = ?,\n  site = ?,\n  subject = ?\nwhere file_id = ?	{file_type,file_sub_type,collection,site,subject,file_id}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get stuff from non_dicom_file by id\n
DistinctSeriesByCollectionLikePublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project like ?\ngroup by series_instance_uid, modality	{collection_like}	{series_instance_uid,modality,num_images}	{by_collection,find_series,public}	public	Get Series in A Collection\n
GetSeriesInfoById	select\n  file_id,\n  modality,\n  series_instance_uid,\n  series_number,\n  laterality,\n  series_date,\n  series_time,\n  performing_phys,\n  protocol_name,\n  series_description,\n  operators_name,\n  body_part_examined,\n  patient_position,\n  smallest_pixel_value,\n  largest_pixel_value,\n  performed_procedure_step_id,\n  performed_procedure_step_start_date,\n  performed_procedure_step_start_time,\n  performed_procedure_step_desc, \n  performed_procedure_step_comments,\n  date_fixed\nfrom file_series\nwhere file_id = ?	{file_id}	{file_id,modality,series_instance_uid,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,performed_procedure_step_comments,date_fixed}	{reimport_queries}	posda_files	Get file path from id
GetPatientInfoById	select\n  file_id,\n  patient_name,\n  patient_id,\n  id_issuer,\n  dob,\n  sex,\n  time_ob,\n  other_ids\n  other_name,\n  ethnic_group,\n  comments\nfrom file_patient\nwhere file_id = ?	{file_id}	{file_id,modality,series_instance_uid,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,performed_procedure_step_comments,date_fixed}	{reimport_queries}	posda_files	Get file path from id
DoseLinkageToPlanByCollectionSite	select\n  sop_instance_uid as referencing_dose,\n  rt_dose_referenced_plan_uid as referenced_plan\nfrom\n  rt_dose natural join file_dose natural join file_sop_common natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null	{collection,site}	{referencing_dose,referenced_plan}	{"Structure Sets",sops,LinkageChecks,plan_linkages,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
FinalizeDciodvfyScanInstance	update dciodvfy_scan_instance set\n  end_time = now()\nwhere\n  dciodvfy_scan_instance_id = ?	{dciodvfy_scan_instance_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
RoiForBySopInstanceUid	select \n  distinct for_uid, count(*) as num_files\nfrom\n  file_series natural join file_sop_common natural join file_for natural join ctp_file\nwhere \n  series_instance_uid = ? and visibility is null\ngroup by for_uid	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
InsertDistinguishedValue	insert into distinguished_pixel_digest_pixel_value(\n  pixel_digest, pixel_value, num_occurances\n  ) values (\n  ?, ?, ?\n)	{pixel_digest,value,num_occurances}	{}	{duplicates,distinguished_digest}	posda_files	insert distinguished pixel digest
GetSsReferencingUnknownImages	select\n  project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\nselect\n  distinct ss_file_id as file_id from \n(select\n  sop_instance_uid, ss_file_id \nfrom (\n  select \n    distinct linked_sop_instance_uid as sop_instance_uid, file_id as ss_file_id\n  from\n    file_roi_image_linkage\n  ) foo left join file_sop_common using(sop_instance_uid)\n  where\n  file_id is null\n) as foo\n)\norder by collection, site, patient_id, file_id\n	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsVolumeReferencingUnknownImages	select \n  project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     not exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\norder by collection, site, patient_id	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsReferencingKnownImages	select\n  project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n  select\n    distinct ss_file_id as file_id \n  from (\n    select\n      sop_instance_uid, ss_file_id \n    from (\n      select \n        distinct\n           linked_sop_instance_uid as sop_instance_uid,\n           file_id as ss_file_id\n      from\n        file_roi_image_linkage\n    ) foo left join file_sop_common using(sop_instance_uid)\n    join ctp_file using(file_id)\n  where\n    visibility is null\n  ) as foo\n)\norder by collection, site, patient_id, file_id\n	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsVolumeReferencingKnownImages	select \n  project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\norder by collection, site, patient_id	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSimilarDupContourCounts	select\n  distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id\nfrom\n   ctp_file\n   natural join file_patient\n   natural join file_series\n   natural join file_sop_common\nwhere file_id in (\n  select distinct file_id from (\n    select \n      distinct file_id, count(*) as num_dup_contours\n    from\n      file_roi_image_linkage \n    where \n      contour_digest in (\n      select contour_digest\n     from (\n        select \n          distinct contour_digest, count(*)\n        from\n          file_roi_image_linkage group by contour_digest\n     ) as foo\n      where count > 1\n    ) group by file_id order by num_dup_contours desc\n  ) as foo\n  where num_dup_contours = ?\n)\n	{num_dup_contours}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
DuplicateCtpFile	select\n  distinct project_name as collection,\n  site_name as site,\n  dicom_file_type,\n  count(distinct file_id) as num_files,\n  min(import_time) as first,\n  max(import_time) as last,\n  count(*) as num_imports,\n  max(import_time) - min(import_time) as duration\nfrom\n   ctp_file natural join dicom_file natural join file_import natural join import_event\nwhere file_id in (\n  select file_id from (\n    select distinct file_id, count(*) from dicom_file group by file_id \n  ) as foo where count > 1\n) group by collection, site, dicom_file_type order by collection, site;	{}	{collection,site,dicom_file_type,num_files,first,last,num_imports,duration}	{AllCollections,queries}	posda_files	Get a list of available queries
StorageRootIdByClass	select file_storage_root_id as id from file_storage_root where\nstorage_class = ?	{storage_class}	{id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get file storage root by storage class\n\nUsed in file migration; should return a single row. If not, error in database configuration.
ListOfAvailableQueriesByTag	select tag, name, description from (\n  select\n    unnest(tags) as tag,\n    name, description\n  from queries\n) as foo\nwhere tag = ?\norder by name	{tag}	{tag,name,description}	{AllCollections,q_list}	posda_queries	Get a list of available queries
SimplePhiReportByScanVrPublicOnly	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\n  and not is_private\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
FindTagsInQuery	select\n  tag from (\n  select name, unnest(tags) as tag\n  from queries) as foo\nwhere\n  name = ?	{name}	{tag}	{meta,test,hello,query_tags}	posda_queries	Find all queries matching tag
FindQueryNameMatching	select\n  distinct name\nfrom\n  queries\nwhere\n  name ~ ?\norder by name	{name_matching}	{name}	{meta,test,hello}	posda_queries	Find all queries with name matching arg
FindQueryMatching	select\n  distinct name\nfrom\n  queries\nwhere\n  query ~ ?\norder by name	{query_matching}	{name}	{meta,test,hello}	posda_queries	Find all queries with name matching arg
DeleteLastTagFromQuery	update queries \n  set tags = tags[1:(array_upper(tags,1) -1)]\nwhere name = ?	{name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
PixelTypesWithGeoRGB	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop, count(distinct image_id) as num_images\nfrom\n  image natural left join image_geometry\nwhere\n  photometric_interpretation = 'RGB'\ngroup by photometric_interpretation,\n  samples_per_pixel, bits_allocated, bits_stored, high_bit, pixel_representation,\n  planar_configuration, iop\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop,num_images}	{find_pixel_types,image_geometry,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
PixelTypes	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type,\n  count(distinct file_id)\nfrom\n  image natural join file_image natural join file_series\n  natural join dicom_file\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,dicom_file_type,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
SimplePhiReportByScanVrPrivateOnly	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, private_disposition as disposition,\n  count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\n  and is_private\ngroup by element_sig_pattern, vr, value, tag_name, private_disposition	{scan_id,vr}	{element,vr,value,description,disposition,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
FindQueryByTag	select\n  distinct name from (\n  select name, unnest(tags) as tag\n  from queries) as foo\nwhere\n  tag = ?	{tag_name}	{name}	{meta,test,hello}	posda_queries	Find all queries matching tag
GetDciodvfyScanInstanceId	select currval('dciodvfy_scan_instance_dciodvfy_scan_instance_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
InsertDistinguishedDigest	insert into distinguished_pixel_digests(\n  pixel_digest,\n  type_of_pixel_data,\n  sample_per_pixel,\n  number_of_frames,\n  pixel_rows,\n  pixel_columns,\n  bits_stored,\n  bits_allocated,\n  high_bit,\n  pixel_mask,\n  num_distinct_pixel_values) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n);	{pixel_digest,type_of_pixel_data,sample_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,pixel_mask,num_distinct_pixel_values}	{}	{duplicates,distinguished_digest}	posda_files	insert distinguished pixel digest
GetStudyInfoById	select\n  file_id,\n  study_instance_uid,\n  study_date,\n  study_time,\n  referring_phy_name,\n  study_id,\n  accession_number,\n  study_description,\n  phys_of_record,\n  phys_reading,\n  admitting_diag\nfrom file_study\nwhere file_id = ?	{file_id}	{file_id,study_instance_uid,study_date,study_time,referring_phy_name,study_id,accession_number,study_description,phys_of_record,phys_reading,phys_reading,admitting_diag}	{reimport_queries}	posda_files	Get file path from id
GetEquipmentInfoById	select\n  file_id,\n  manufacturer,\n  institution_name,\n  institution_addr,\n  station_name,\n  inst_dept_name,\n  manuf_model_name,\n  dev_serial_num,\n  software_versions,\n  spatial_resolution,\n  last_calib_date,\n  last_calib_time,\n  pixel_pad\nfrom file_equipment\nwhere file_id = ?	{file_id}	{file_id,manufacturer,institution_name,institution_addr,station_name,inst_dept_name,manuf_model_name,dev_serial_num,software_versions,spatial_resolution,last_calib_date,last_calib_time,pixel_pad}	{reimport_queries}	posda_files	Get file path from id
DeleteFirstTagFromQuery	update queries \n  set tags = tags[(array_lower(tags,1) + 1):(array_upper(tags,1))]\nwhere name = ?	{name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
SeriesWithDuplicatePixelDataThatMatters	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  file_series natural join file_image\n  natural join file_patient\n  natural join ctp_file\nwhere \n  visibility is null \n  and image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n) group by collection, site, patient_id, series_instance_uid\n	{collection}	{collection,site,series_instance_uid,patient_id,num_files}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
PrependTagToQuery	update queries\nset tags = array_prepend(?, tags)\nwhere name = ?	{tag,name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
ListOfAvailableQueriesByTagLike	select distinct name, description, tags from (\n  select\n    unnest(tags) as tag,\n    name, description,\n    array_to_string(tags, ',') as tags\n  from queries\n) as foo\nwhere tag like ?\norder by name	{tag}	{name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
ListOfAvailableQueriesByNameLike	select schema, name, description, tags from (\n  select\n    schema, name, description,\n    array_to_string(tags, ',') as tags\n  from queries\n) as foo\nwhere name like ?\norder by name	{name_like}	{schema,name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
ListOfSchemas	select\n distinct schema\nfrom queries\norder by schema	{}	{schema}	{AllCollections,schema}	posda_queries	Get a list of available queries
GetDciodvfyErrorUncat	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'Uncategorized'\n  and error_text = ?	{error_text}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
ComplexDuplicatePixelData	select \n  distinct project_name, site_name, patient_id, series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_patient natural join file_series \nwhere \n  file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count = ?\n    )\n    and visibility is null\n  ) \ngroup by project_name, site_name, patient_id, series_instance_uid\norder by count desc;\n	{count}	{project_name,site_name,patient_id,series_instance_uid,count}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
AllPatientDetailsWithNoCtpLike	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n not exists (select file_id from ctp_file c where c.file_id = f.file_id)\n and patient_id like ?\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{patient_id_like}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
GetDciodvfyErrorMayNotBePres	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'MayNotBePresent'\n  and error_tag = ?\n  and error_reason = ?	{error_tag,error_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
DistinctPatientStudySeriesByCollection	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere\n  project_name = ? and\n  visibility is null\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
PixelDataDuplicateCounts	select\n  distinct pixel_digest, count(*)\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest	{}	{pixel_digest,count}	{pix_data_dups,pixel_duplicates}	posda_files	Find digest with counts of files\n
GetSeriesForPhiInfo	select \n  series_instance_uid\nfrom \n  series_scan_instance \nwhere series_scan_instance_id in (\n  select series_scan_instance_id \n  from element_value_occurance \n  where element_seen_id in (\n    select \n      element_seen_id \n    from element_seen \n    where element_sig_pattern = ? and vr = ?\n  )\n  and value_seen_id in (\n    select value_seen_id \n    from value_seen\n    where value = ?\n  )\n  and phi_scan_instance_id = ?\n)	{element,vr,value,scan_id}	{series_instance_uid}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get an element_seen row by element, vr (if present)
ListOfAvailableQueriesBySchema	select\n  name, description,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere schema = ?\norder by name	{schema}	{name,description,tags}	{AllCollections,schema}	posda_queries	Get a list of available queries
SeriesWithDuplicatePixelDataTest	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  file_series natural join file_image\n  natural join file_patient\n  natural join ctp_file\nwhere \n  visibility is null \n  and image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(distinct file_id)\n              from file_image natural join ctp_file\n              where project_name = ? and visibility is null\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n) group by collection, site, patient_id, series_instance_uid\n	{collection}	{collection,site,series_instance_uid,patient_id,num_files}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
KnownBlankImagesInSeries	select distinct pixel_digest, count(*) as num_files from (\n  select file_id, digest as pixel_digest\n  from\n    file_image join image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n  where file_id in (select file_id from file_series natural join ctp_file where series_instance_uid = ?)\n)\nas foo group by pixel_digest	{series_instance_uid}	{pixel_digest,num_files}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
SeriesByDistinguishedDigest	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  ctp_file natural join\n  file_patient natural\n  join file_series natural\n  join file_sop_common\nwhere file_id in(\n  select file_id \n  from\n    file_image\n    join image using (image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  where digest = ?\n  ) and visibility is null\ngroup by collection, site, patient_id, series_instance_uid\norder by collection, site, patient_id	{distinguished_pixel_digest}	{collection,site,patient_id,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
GetSeriesByPatId	select\n  distinct series_instance_uid, count(distinct file_id) as num_files\nfrom\n  file_series natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and\n  visibility is null\ngroup by series_instance_uid	{patient_id}	{series_instance_uid,num_files}	{meta,test,hello,query_tabs,bills_test}	posda_files	See if ctp_file_row exists
DistinctDispositonsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
WhereSeriesSitsQuick	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n  limit 1\n)	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{by_series_instance_uid,posda_files,sops,used_in_simple_phi}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
GetBasicImageGeometry	select\n  iop, ipp\nfrom\n  file_series\n  join file_image using (file_id)\n  join image_geometry using (image_id)\nwhere \n  series_instance_uid = ?	{series_instance_uid}	{iop,ipp}	{NotInteractive,used_in_import_edited_files,used_in_check_circular_view}	posda_files	Get file_id, and current visibility by digest\nFor use in scripts\nNot really intended for interactive use\n
GetNLocationsAndDigestsByFileStorageRootId	select\n  file_id, digest, rel_path\nfrom file_location natural join file\nwhere\n  file_storage_root_id = ?\nlimit ?	{file_storage_root_id,n}	{file_id,digest,rel_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
ListOfAvailableQueriesForDescEdit	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\norder by name	{}	{name,description,query,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
SsRoiForsBySopInstance	select \n  distinct for_uid\nfrom\n  roi natural join file_structure_set\nwhere\n  file_id in (\n    select file_id \n    from file_sop_common natural join ctp_file\n    where sop_instance_uid = ? and visibility is null\n  )	{sop_instance_uid}	{for_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsVolumeReferencingKnownImagesByCollection	select \n  distinct project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\nand project_name = ?\nand visibility is null\norder by collection, site, patient_id	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
DispositonsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  value\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name,value}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
ListOfAvailableQueriesForDescEditBySchema	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere schema = ?\norder by name	{schema}	{name,description,query,tags}	{AllCollections,schema}	posda_queries	Get a list of available queries
SsSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  roi natural join file_structure_set join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_structure_set \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
PlanSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  file_for natural join file_plan join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_plan \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
PatientIdMappingByFromPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root\nfrom \n  patient_mapping\nwhere\n  from_patient_id = ?	{from_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
RecordElementDispositionChangeSimple	insert into element_disposition_changed(\n  element_seen_id,\n  when_changed,\n  who_changed,\n  why_changed,\n  new_disposition\n) values (\n  ?, now(), ?, ?, ?)	{id,who,why,disp}	{}	{tag_usage,simple_phi,used_in_phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
ChangeFileStorageRootIdByFileIdAndOldStorageRootId	update\n  file_location\nset file_storage_root_id = ?\nwhere file_storage_root_id = ?\nand file_id = ?	{new_file_storage_root_id,old_file_storage_root_id,file_id}	{}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
FindInconsistentStudyIgnoringStudyTime	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
GetSeriesWithImageByCollectionSitePatient	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and \n  site_name = ? and \n  patient_id = ? and\n  visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,patient_id}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
GetSeriesWithImageAndNoEquivalenceClassByCollectionSiteDateRange	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series fs natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\n  and (\n    select count(*) \n    from image_equivalence_class ie\n    where ie.series_instance_uid = fs.series_instance_uid\n  ) = 0\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,from,to}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
ListHiddenFilesByCollectionPatient	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id,\n  visibility as old_visibility\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_series\nwhere\n  visibility is not null and\n  project_name = ? and\n  patient_id = ?	{collection,patient_id}	{collection,site,patient_id,series_instance_uid,file_id,old_visibility}	{find_series,equivalence_classes,consistency,visual_review_results,old_visibility}	posda_files	Show Received before date by collection, site
UpdateElementDispositionSimple	update\n  element_seen\nset\n  private_disposition = ?\nwhere\n  element_seen_id = ?	{disp,id}	{}	{tag_usage,used_in_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
RoundSummaryWithCollectionDateRange	select\n  distinct round_id, collection,\n  round_start, \n  round_end - round_start as duration, \n  round_end\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_start > ? and round_end < ?\ngroup by \n  round_id, collection, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,collection,round_start,duration,round_end}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
GetNonDicomFilesByPatientId	select \n  file_id, non_dicom_file.file_type, file_sub_type, \n  collection, site, subject, visibility, date_last_categorized,\n  size, digest, root_path || '/' || rel_path as path\nfrom\n  non_dicom_file join file using (file_id) natural join file_location natural join file_storage_root\nwhere\n  visibility is null\n  and subject = ?\n	{patient_id}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,size,digest,path}	{radcomp}	posda_files	Add a filter to a tab
GetMaxStudyDate	select\n   max(study_date) as study_date\nfrom \n  file_patient natural join ctp_file natural join file_study\nwhere\n  patient_id = ?	{patient_id}	{study_date}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
PatientIdMappingByToPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift,\n  site_code\nfrom \n  patient_mapping\nwhere\n  to_patient_id = ?	{to_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root,computed_shift,site_code}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
SimplePhiReportAllRelevantPrivateOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na')\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,disp,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
FileStorageRootSummary	select \n  distinct file_storage_root_id,\n  root_path,\n  storage_class,\n  count(distinct file_id) as num_files\nfrom\n  file_storage_root\n  natural join file_location\ngroup by file_storage_root_id, root_path, storage_class;	{}	{file_storage_root_id,root_path,storage_class,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
NumFilesToMigrate	select\n  count(*) as num_files\nfrom\n  file_location natural join file_storage_root\nwhere\n  storage_class = ?	{storage_class}	{num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
SeriesEquivalenceClassResults	select\n  distinct series_instance_uid,\n  equivalence_class_number, \n  review_status,\n  count(distinct file_id) as files_in_class\nfrom\n  image_equivalence_class\n  natural join image_equivalence_class_input_image\nwhere series_instance_uid in (\n  select \n    distinct series_instance_uid\n  from\n    ctp_file\n    natural join file_series \n    join image_equivalence_class using(series_instance_uid) \n  where project_name = ? and visibility is null and review_status = ?\n) group by\n   series_instance_uid,\n   equivalence_class_number,\n   review_status\norder by series_instance_uid, equivalence_class_number	{project_name,status}	{series_instance_uid,equivalence_class_number,review_status,files_in_class}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SeriesVisualReviewResultsExtendedByCollectionSiteStatus	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  equivalence_class_number,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join\n  file_patient natural join\n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  equivalence_class_number\norder by\n  series_instance_uid	{project_name,site_name,status}	{collection,site,series_instance_uid,patient_id,dicom_file_type,modality,review_status,num_files,equivalence_class_number}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DoseSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  file_for natural join file_dose join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_dose \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
DistinctSeriesByCollectionLikeSeriesDescription	select \n  distinct collection, \n  site, patient_id, series_instance_uid, \n  series_description,\n  dicom_file_type, modality, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\n  from (\n    select\n     distinct project_name as collection,\n     site_name as site,\n     patient_id, \n     series_instance_uid, \n     series_description,\n     dicom_file_type, \n     modality, sop_instance_uid,\n     file_id\n    from \n     file_series\n     natural join dicom_file\n     natural join file_sop_common \n     natural join file_patient\n     natural join ctp_file\n  where\n    project_name = ? \n    and site_name = ? \n    and series_description like ?\n    and visibility is null\n) as foo\ngroup by collection, site, patient_id, \n  series_instance_uid, series_description, dicom_file_type, modality\n	{collection,site,description}	{collection,site,patient_id,series_instance_uid,series_description,dicom_file_type,modality,num_sops,num_files}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
GetSeriesWithOutImageByCollectionSite	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series\n  natural join file_sop_common\n  natural join file_patient\n  natural join ctp_file ctp\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and not exists (select image_id from file_image fi where ctp.file_id = fi.file_id)\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
InsertIntoNonDicomAttachments	insert into non_dicom_attachments(\n  non_dicom_file_id,\n  dicom_file_id,\n  patient_id,\n  manifest_uid,\n  study_instance_uid,\n  series_instance_uid,\n  manifest_date,\n  version\n)values(\n  ?, ?, ?, ?, ?, ?, ?, ?\n)\n	{non_dicom_file_id,dicom_file_id,patient_id,manifest_uid,study_instance_uid,series_instance_uid,manifest_date,version}	{}	{radcomp}	posda_files	Add a filter to a tab
GetSeriesWithImageByCollection	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
VisibleSeriesVisualReviewResultsByCollectionSiteStatus	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SeeIfDigestIsAlreadyKnownDistinguished	select count(*) from distinguished_pixel_digests where pixel_digest = ?	{pixel_digest}	{count}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
FindDuplicatedPixelDigests	select\n  distinct pixel_digest, num_files\nfrom (\n  select\n    distinct digest as pixel_digest, count(distinct file_id) as num_files\n  from\n    file_image\n    join image using(image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  group by digest\n) as foo\nwhere num_files > 3\norder by num_files desc\n\n	{}	{pixel_digest,num_files}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
ListOfQueriesPerformedByUserByDate	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n  invoking_user = ? and\n  query_start_time > ? and query_end_time < ?\norder by query_start_time	{user,from,to}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
GetPixelDescriptorByDigest	select\n  samples_per_pixel, \n  number_of_frames, \n  pixel_rows,\n  pixel_columns,\n  bits_stored,\n  bits_allocated,\n  high_bit, \n  file_offset,\n  root_path || '/' || rel_path as path\nfrom\n  image\n  natural join unique_pixel_data\n  natural join pixel_location\n  join file_location using (file_id)\n  join file_storage_root using (file_storage_root_id)\nwhere digest = ?\nlimit 1	{pixel_digest}	{samples_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,file_offset,path}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
LongestRunningNQueries	select * from (\nselect query_invoked_by_dbif_id as id, query_name, query_end_time - query_start_time as duration,\ninvoking_user, query_start_time, number_of_rows\nfrom query_invoked_by_dbif\nwhere query_end_time is not null\norder by duration desc) as foo\nlimit ?	{n}	{id,query_name,duration,invoking_user,query_start_time,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
PrivateTagsWhichArentMarked	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  private_disposition as disp\nfrom\n  element_seen\nwhere\n  is_private is null and \n  element_sig_pattern like '%"%'\n	{}	{id,element_sig_pattern,vr,tag_name,disp}	{tag_usage,simple_phi,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
GetSpreadsheetInfoForRadcompDisp	select\n  distinct patient_id,\n  study_instance_uid as study_uid, \n  series_instance_uid as series_uid,\n  baseline_date - diagnosis_date + interval '1 day' as shift,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file,\n  patient_mapping\nwhere\n  patient_id = to_patient_id and\n  ctp_file.project_name = ? and ctp_file.visibility is null\ngroup by\n  patient_id, study_uid, series_uid, shift	{collection}	{patient_id,study_uid,series_uid,num_files,shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
OneFileFromSop	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_sop_common\nwhere\n  sop_instance_uid = ? and visibility is null\nlimit 1\n	{sop_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
DistinctSeriesByCollectionPublicTest	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	public	Get Series in A Collection, Site\n
AddFilterToTab	insert into query_tabs_query_tag_filter(query_tab_name, filter_name, sort_order)\nvalues(?, ?, ?)	{query_tab_name,filter_name,sort_order}	{}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
QueryArgsByQueryId	select\n  arg_index as num, arg_name as name, arg_value as value\nfrom\n  dbif_query_args\nwhere\n  query_invoked_by_dbif_id = ?\norder by arg_index	{id}	{num,name,value}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
PublicSeriesByCollectionVisibilityMetadata	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions,\n   count(distinct  i.sop_instance_uid) as Images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  tdp.project = ? and\n  s.visibility = ?\ngroup by PID, StudyDate, Modality\n	{collection,visibility}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,Images}	{public}	public	List of all Series By Collection, Site on Public with metadata\n
PublicSeriesByCollectionMetadata	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions,\n   count( i.sop_instance_uid) as Images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  tdp.project = ? \ngroup by PID, StudyDate, Modality\n	{collection}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,Images}	{public}	public	List of all Series By Collection, Site on Public with metadata\n
MarkPrivateTags	update element_seen set\n  is_private = true\nwhere\n  is_private is null and \n  element_sig_pattern like '%"%'\n	{}	{id,element_sig_pattern,vr,tag_name,disp}	{tag_usage,simple_phi,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
ListOfQueriesPerformedByUser	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n  invoking_user = ?	{user}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
GetAttachmentFiles	select \n  fl.file_id,\n  root_path || '/' || rel_path as path,\n  ndf.file_type as ext\nfrom\n  non_dicom_file ndf,\n  file_location as fl natural join file_storage_root,\n  non_dicom_attachments a\nwhere\n  a.non_dicom_file_id = ndf.file_id and \n  a.non_dicom_file_id = fl.file_id and\n  ndf.collection = ?	{collection}	{file_id,path,ext}	{radcomp}	posda_files	Add a filter to a tab
CreateNewQueryTab	insert into query_tabs (\n  query_tab_name,\n  query_tab_description, \n  defines_dropdown,\n  sort_order,\n  defines_search_engine)\nvalues(\n  ?, ?, true, ?, false\n)	{query_tab_name,query_tab_description,sort_order}	{}	{meta,test,hello,query_tabs}	posda_queries	Create a new query tab
PrivateTagCountReport	select \n  distinct element_signature, vr, count(*) as times_seen,\n  count(distinct value) as num_distinct_values \nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr\norder by element_signature, vr, times_seen, num_distinct_values;\n	{}	{element_signature,vr,times_seen,num_distinct_values}	{postgres_status,PrivateTagKb}	posda_phi	Get List of all Private Tags ever scanned with occurance and distinct value counts
ShowQueryTabHierarchyByTab	select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n	{query_tab_name}	{query_tab_name,filter_name,tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
GetScanInstanceById	select\n  phi_scan_instance_id,\n  start_time,\n  end_time,\n  description,\n  num_series,\n  num_series_scanned,\n  file_query\nfrom \n  phi_scan_instance\nwhere phi_scan_instance_id = ?	{phi_scan_instance_id}	{phi_scan_instance_id,start_time,end_time,description,num_series,num_series_scanned,file_query}	{adding_ctp,for_scripting,scan_status}	posda_phi_simple	Get a query_scan_instance by instance_id
DeleteFilterFromTab	delere from query_tabs_query_tag_filter\nwhere query_tab_name = ? and filter_name = ?	{query_tab_name,filter_name}	{}	{meta,test,hello,query_tabs}	posda_queries	Remove a filter from a tab
AllQueryTabs	select \n   distinct  query_tab_name\nfrom\n  query_tabs	{}	{query_tab_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
StudyHierarchyByStudyUID	select distinct\n  study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  modality,\n  count(distinct sop_instance_uid) as number_of_sops\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_sop_common\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_description,\n  series_instance_uid, series_description, modality	{study_instance_uid}	{study_instance_uid,study_description,series_instance_uid,series_description,modality,number_of_sops}	{by_study,Hierarchy}	posda_files	Show List of Study Descriptions, Series UID, Series Descriptions, and Count of SOPS for a given Study Instance UID
DistinctPatientStudySeriesByCollectionDateRange	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\n  natural join file_import\n  natural join import_event\nwhere\n  project_name = ? and\n  visibility is null and\n  import_time > ?\n  and import_time < ?\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection,from,to}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
FilesByCollectionSiteWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  ctp_file\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  project_name = ?	{collection}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{hide_files}	posda_files	Get List of files for Collection, Site with visibility
FindTagsInQueries	select\n  distinct tag from (\n  select name, unnest(tags) as tag\n  from queries) as foo\norder by tag	{}	{tag}	{meta,test,hello,query_tags}	posda_queries	Find all queries matching tag
ShowQueryTabHierarchyByTabWithQueryCounts	select distinct query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\nselect\n  query_tab_name, filter_name, tag, query_name\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n) as foo\nnatural join(\n  select name as query_name, unnest(tags) as tag\nfrom queries\n) as fie\n) as foo\ngroup by query_tab_name, filter_name, tag\norder by filter_name, tag	{query_tab_name}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
DispositonsSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  private_disposition as disposition\nfrom\n  element_seen\nwhere\n  is_private\norder by element_sig_pattern\n	{}	{id,element_sig_pattern,vr,tag_name,disposition}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
GetSpreadsheetInfoForRadcompDispWithModality	select\n  distinct patient_id,\n  study_instance_uid as study_uid, \n  series_instance_uid as series_uid,\n  modality,\n  baseline_date - diagnosis_date + interval '1 day' as shift,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file,\n  patient_mapping\nwhere\n  patient_id = to_patient_id and\n  ctp_file.project_name = ? and ctp_file.visibility is null\ngroup by\n  patient_id, study_uid, series_uid, modality, shift	{collection}	{patient_id,study_uid,series_uid,modality,num_files,shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
ByDistinguishedDigest	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id as subject,\n  series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_series\nwhere file_id in (\n  select \n    file_id\n  from\n    file_image\n    join image using(image_id)\n    join unique_pixel_data using(unique_pixel_data_id)\n  where digest = ?\n  ) and visibility is null \ngroup by \n  collection,\n  site,\n  series_instance_uid,\n  subject\norder by\n  collection,\n  site,\n  subject	{pixel_digest}	{collection,site,subject,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
ShowAllHideEventsByCollectionSiteAlt	select\n distinct\n  user_name,\n  date_trunc('hour',time_of_change) as hour_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for,\n  count(distinct file_id) as num_files\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file \n  where project_name = ? and site_name = ?\n  and visibility = 'hidden' \n)\ngroup by user_name, hour_of_change, prior_visibility, new_visibility, reason_for	{collection,site}	{user_name,hour_of_change,prior_visibility,new_visibility,reason_for,num_files}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
ShowQueryTabHierarchy	select \n  query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\ngroup by query_tab_name, filter_name, tag\norder by \n  query_tab_name, filter_name, tag	{}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
SeriesReport	select \n  file_id, sop_instance_uid, modality, cast(instance_number as int) inst_num, iop, ipp\nfrom \n  file_series natural join file_sop_common \n  left join file_image_geometry using(file_id) \n  left join image_geometry using(image_geometry_id)\nwhere file_id in (\n  select \n  file_id from file_series natural join ctp_file\n  where series_instance_uid = ?\n    and visibility is null\n) order by inst_num;	{series_instance_uid}	{file_id,modality,inst_num,iop,ipp,sop_instance_uid}	{by_series_instance_uid,duplicates,posda_files,sops,series_report}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
SimplePhiReportAllRelevantPrivateOnlyNew	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na', 'h', 'o', 'oi')\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,disp,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
DistinguishedDigests	select\n   pixel_digest as distinguished_pixel_digest,\n   type_of_pixel_data,\n   sample_per_pixel,\n   number_of_frames,\n   pixel_rows,\n   pixel_columns,\n   bits_stored,\n   bits_allocated,\n   high_bit,\n   pixel_mask,\n   num_distinct_pixel_values,\n   pixel_value,\n   num_occurances\nfrom \n  distinguished_pixel_digests natural join\n  distinguished_pixel_digest_pixel_value	{}	{distinguished_pixel_digest,type_of_pixel_data,sample_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,pixel_mask,num_distinct_values,pixel_value,num_occurances}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
ShowQueryTabHierarchyByTabWithQueries	select\n  query_tab_name, filter_name, tag, query_name\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n) as foo\nnatural join(\n  select name as query_name, unnest(tags) as tag\nfrom queries\n) as fie\norder by filter_name, tag, query_name	{query_tab_name}	{query_tab_name,filter_name,tag,query_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FinalizeDciodvfyUnitScan	update dciodvfy_unit_scan set\n  num_errors_in_unit = ?,\n  num_warnings_in_unit = ?,\n  end_time = now()\nwhere\n  dciodvfy_unit_scan_id = ?\n 	{num_errors_in_unit,num_warnings_in_unit,unit_scan_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan row
FilesByCollectionSitePatientVisibility	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and visibility = ?\norder by collection, site, patient_id\n\n	{collection,site,patient_id,visibility}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
CreateDciodvfyUnitScanError	insert into dciodvfy_unit_scan_error(\n  dciodvfy_scan_instance_id,\n  dciodvfy_unit_scan_id,\n  dciodvfy_error_id\n)values (?, ?, ?)	{" dicodvfy_scan_instance_id",dciodvfy_unit_scan_id,dciodvfy_error_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan_error row
AddPidToSubprocessInvocation	update subprocess_invocation set\n  process_pid = ?\nwhere\n  subprocess_invocation_id = ?\n	{pid,subprocess_invocation_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add a pid to a subprocess_invocation row\n\nused in DbIf after subprocess invoked
StructVolByFileId	select\n  distinct sop_instance,\n  sop_class,\n  study_instance_uid,\n  series_instance_uid,\n  for_uid\nfrom\n  file_structure_set natural join\n  ss_for natural join\n  ss_volume\nwhere file_id = ?	{file_id}	{sop_instance,sop_class,study_instance_uid,series_instance_uid,for_uid}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
FilesByCollectionSitePatientWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  ctp_file\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  project_name = ?\n  and site_name = ?\n  and patient_id = ?	{collection,site,patient_id}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{hide_events}	posda_files	Get List of files for Collection, Site with visibility
CreateSubprocessLine	insert into subprocess_lines(\n subprocess_invocation_id,\n line_number,\n line\n) values (\n  ?, ?, ?\n)	{subprocess_invocation_id,line_number,line}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_lines table\n\nUsed when invoking a spreadsheet operation from a either a button or a spreadsheet \nto record data retrieved from subprocess (i.e response displayed on screen)
VisibleFilesByCollectionSitePatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and\n  visibility is null\norder by collection, site, patient_id\n\n	{collection,site,patient_id}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
CreateDciodvfyUnitScan	insert into dciodvfy_unit_scan(\n  type_of_unit,\n  unit_uid,\n  unit_id,\n  num_file_in_unit,\n  start_time\n) values( ?, ?, ?, ?, now())	{type_of_unit,unit_uid,unit_id,num_file_in_unit}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan row
AddErrorToBackgroundProcess	update background_subprocess set\n  process_error = ?\nwhere\n subprocess_invocation_id = ?\n	{process_error,background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add a error to a background_subprocess  row\n\nused in a background subprocess when an error occurs
FindPotentialDistinguishedSops	select \n  distinct project_name as collection,\n  site_name as site, \n  patient_id, \n  image_id,\n  count(*)\nfrom\n  ctp_file\n  natural join file_patient\n  natural join file_image\nwhere\n  file_id in \n  (select \n    distinct file_id \n  from\n    file_image \n  where\n    image_id in\n    (select\n       image_id from \n       (select\n         distinct image_id, count(distinct file_id) \n       from\n         file_image \n       group by image_id\n       ) as foo\n     where count > 1000\n  )\n) group by collection, site, patient_id, image_id\norder by collection, site, image_id, patient_id\n\n	{}	{collection,site,patient_id,image_id,count}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesVisibilityByCollectionSitePatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ?\norder by collection, site, patient_id\n\n	{collection,site,patient_id}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetSubProcessInvocationId	select currval('subprocess_invocation_subprocess_invocation_id_seq') as id	{}	{id}	{NotInteractive,used_in_background_processing}	posda_queries	Get the id of the subprocess_invocation row just created
RTDOSEWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Dose Storage' and \n  visibility is null and\n  modality != 'RTDOSE'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
VisibilityChangeEventsByCollectionForAllFiles	select\n  distinct project_name as collection, \n  site_name as site,\n  user_name, \n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(distinct file_id)\nfrom\n  file_visibility_change natural join\n  ctp_file\nwhere\n  project_name = ?\ngroup by collection, site, user_name, time, reason_for\norder by time, collection, site	{collection}	{collection,site,user_name,time,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
CreateBackgroundSubprocess	insert into background_subprocess(\n  subprocess_invocation_id,\n  command_executed,\n  foreground_pid,\n  when_script_started,\n  user_to_notify\n) values (\n  ?, ?, ?, now(), ?\n)\nreturning background_subprocess_id	{subprocess_invocation_id,command_executed,foreground_pid,user_to_notify}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess table\n\nUsed by background subprocess
MRWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'MR Image Storage' and \n  visibility is null and\n  modality != 'MR'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
RTSTRUCTWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Structure Set Storage' and \n  visibility is null and\n  modality != 'RTSTRUCT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
RTPLANWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Plan Storage' and \n  visibility is null and\n  modality != 'RTPLAN'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
AddCompletionTimeToBackgroundProcess	update background_subprocess set\n  when_script_ended = now()\nwhere\n  background_subprocess_id = ?\n	{background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add when_script_ended to a background_subprocess  row\n\nused in a background subprocess when complete
PTWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'Positron Emission Tomography Image Storage' and \n  visibility is null and\n  modality != 'PT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
GetQuery	select \n query\nfrom pg_stat_activity\nwhere pid = ?	{pid}	{query}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
RoundSummary1AvoidingCrash	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups)\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null \ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
ShowQueryTabHierarchyWithQueries	select \n  distinct query_tab_name, filter_name, tag, query_name\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\norder by \n  query_tab_name, filter_name, tag, query_name	{}	{query_tab_name,filter_name,tag,query_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
CreateBackgroundSubprocessParam	insert into background_subprocess_params(\n  background_subprocess_id,\n  param_index,\n  param_value\n) values (\n  ?, ?, ?\n)	{background_subprocess_id,param_index,param_value}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess_params table\n\nUsed by background subprocess
PatientsWithNoCtp	select\n  distinct patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\nwhere\n  not exists (select file_id from ctp_file c where sc.file_id = c.file_id)\ngroup by patient_id;	{}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
ShowQueryTabHierarchyWithCounts	select \n  query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\ngroup by query_tab_name, filter_name, tag\norder by \n  query_tab_name, filter_name, tag	{}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FilesWithNoCtpByPatientId	select\n  distinct file_id\nfrom\n  file_patient p\nwhere\n  not exists(\n  select file_id from ctp_file c\n  where c.file_id = p.file_id\n)\nand patient_id = ?\n	{patient_id}	{file_id}	{adding_ctp}	posda_files	Get Series in A Collection\n
GetBackgroundSubprocessId	select currval('background_subprocess_background_subprocess_id_seq') as id	{}	{id}	{NotInteractive,used_in_background_processing}	posda_queries	Get the id of the background_subprocess row just created
FileStorageRootSummaryExtended	select \n  distinct file_storage_root_id,\n  root_path,\n  storage_class,\n  count(distinct file_id) as num_files,\n  sum(size) as total_bytes\nfrom\n  file_storage_root\n  natural join file_location\n  natural join file\ngroup by file_storage_root_id, root_path, storage_class;	{}	{file_storage_root_id,root_path,storage_class,num_files,total_bytes}	{used_in_file_import_into_posda,bills_test}	posda_files	Get count of files relative to storage root
WhereSopSitsIntake	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	intake	Get Collection, Patient, Study Hierarchy in which SOP resides\n
CtpFilesSummary	select\n distinct project_name as collection,\n trial_name,\n site_name as site,\n site_id,\n visibility,\n count(distinct file_id) as num_files\nfrom ctp_file\ngroup by \n  collection,\n  trial_name,\n  site,\n  site_id,\n  visibility\norder by\n  collection, trial_name, site, site_id, visibility	{}	{collection,trial_name,site,site_id,visibility,num_files}	{adding_ctp}	posda_files	Get Series in A Collection\n
CreateBackgroundSubprocessError	insert into background_subprocess(\n  subprocess_invocation_id,\n  input_rows_processed,\n  command_executed,\n  foreground_pid,\n  background_pid,\n  when_script_started,\n  when_background_entered,\n  user_to_notify,\n  process_error\n) values (\n  ?, ?, ?, ?, ?, ?, now(), ?, ?\n)	{subprocess_invocation_id,input_rows_processed,command_executed,foreground_pid,background_pid,when_script_started,user_to_notify,process_error}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess table with an error in initialization\n\nUsed by background subprocess
RoundStatsForDateRange	select\n  date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request\nwhere time_received > ? and time_received < ?\ngroup by time order by time desc	{interval,from,to}	{time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
QueriesRunning	select \n  datname, pid,\n  now() - backend_start as time_backend_running,\n  now() - query_start as time_query_running, \n  now() - state_change as time_since_state_change,\n  state\nfrom pg_stat_activity\n  order by datname, state	{}	{datname,pid,time_backend_running,time_query_running,time_since_state_change,state}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
TagsInMultipleTagFilters	select distinct tag, count(*) as num_locations\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\ngroup by tag\norder by num_locations desc	{}	{tag,num_locations}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
OneFileInSeries	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\nlimit 1\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
TagLocations	select\n  query_tab_name,\n  filter_name, \n  tag\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nwhere tag = ?	{tag}	{query_tab_name,filter_name,tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
WherePatientSits	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  patient_id = ?\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id,\n  modality\n	{patient_id}	{collection,site,visibility,patient_id,patient_name,series_instance_uid,modality,num_files}	{adding_ctp}	posda_files	Get Series in A Collection\n
CreateSubprocessInvocationButton	insert into subprocess_invocation (\n  from_spreadsheet,\n  from_button,\n  query_invoked_by_dbif_id,\n  button_name,\n  command_line,\n  invoking_user,\n  when_invoked,\n  operation_name\n) values (\n  false, true, ?, ?, ?, ?, now(), ?\n)\nreturning subprocess_invocation_id\n	{query_invoked_by_dbif_id,btn_name,command_line,invoking_user,operation_name}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_invocation table\n\nUsed when invoking a spreadsheet operation from a button
DatabaseSizes	select d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20\n	{}	{name,owner,size}	{AllCollections,postgres_stats,database_size}	posda_files	Get a list of collections and sites\n
FilesWithNoCtp	select\n  distinct file_id\nfrom\n  file_patient p\nwhere\n  not exists(\n  select file_id from ctp_file c\n  where c.file_id = p.file_id\n)\n	{}	{file_id}	{adding_ctp}	posda_files	Get Series in A Collection\n
FindInconsistentSeriesIgnoringTime	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series\n
SimplePhiReportAllPrivateOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,disp,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
ActiveQueriesRunning	select \n  datname, pid,\n  now() - query_start as time_query_running, \n  query\nfrom pg_stat_activity\nwhere\n  state = 'active'\norder by datname, state\n	{}	{datname,pid,time_query_running,query}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
DciodvfyErrorsStringBySeriesAndScanInstance	select                                                    \n  dciodvfy_error_id || '|' ||\n  error_type || '|' ||                                                                                                                                                                                                                   \n  error_tag || '|' ||\n  coalesce(error_value, '[null]') || '|' ||\n  coalesce(error_subtype, '[null]') || '|' ||\n  coalesce(error_module, '[null]') || '|' ||\n  coalesce(error_reason, '[null]') || '|' ||\n  coalesce(error_index, '[null]') || '|' ||\n  coalesce(error_text, '[null]') as error_string\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{error_string}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
RoundStatsWithCollectionSiteForDateRange	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
DciodvfyErrorsBySeriesAndScanInstance	select\n  dciodvfy_error_id,\n  error_type,\n  error_tag,\n  error_value,\n  error_subtype,\n  error_module,\n  error_reason,\n  error_index,\n  error_text\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{dciodvfy_error_id,error_type,error_tag,error_value,error_subtype,error_module,error_reason,error_index,error_text}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
GetFileHierarchyByCollection	select \n  distinct root_path || '/' || rel_path as path,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  file_id \nfrom \n  ctp_file natural join\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_location natural join\n  file_storage_root\nwhere\n  project_name = ?\n  and visibility is null	{collection}	{path,patient_id,study_instance_uid,series_instance_uid,file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
CreateCopyFromPublicEntry	insert into copy_from_public(\n  who, why, when_row_created, status_of_copy\n) values (\n  ?, ?, now(), ?\n)	{who,why,status_of_copy}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
DistinctSeriesByCollection	select distinct series_instance_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  project_name = ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by series_instance_uid, patient_id, dicom_file_type, modality\n	{collection}	{series_instance_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy}	posda_files	Get Series in A Collection\n
RoundStatsByCollectionForDateRange	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ? and collection = ?\ngroup by collection, site, time order by time desc, collection	{interval,from,to,collection}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
GetActivities	select\n  activity_id, brief_description, when_created, who_created, when_closed\nfrom activity\nwhere who_created = ?\n	{user}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
RoundStatsWithCollectionSiteSubjectForDateRange	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
CreateActivity	insert into activity(brief_description, when_created, who_created) values (\n?, now(), ?);	{description,user}	{}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
InsertActivityInboxContent	insert into activity_inbox_content(\n activity_id, user_inbox_content_id\n) values (\n  ?, ?\n)\n	{activity_id,user_inbox_content_id}	{}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
ListActivities	select\n  activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  when_closed\nfrom\n  activity	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
DciodvfyErrorsStringByErrorId	select                                                    \n  dciodvfy_error_id || '|' ||\n  error_type || '|' ||                                                                                                                                                                                                                   \n  coalesce(error_tag, '[null]') || '|' ||\n  coalesce(error_value, '[null]') || '|' ||\n  coalesce(error_subtype, '[null]') || '|' ||\n  coalesce(error_module, '[null]') || '|' ||\n  coalesce(error_reason, '[null]') || '|' ||\n  coalesce(error_index, '[null]') || '|' ||\n  coalesce(error_text, '[null]') as error_string\nfrom dciodvfy_error \nwhere  dciodvfy_error_id = ?	{dciodvfy_error_id}	{error_string}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
DciodvfyErrorIdsBySeriesAndScanInstance	select                                                    \n  dciodvfy_error_id\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{dciodvfy_error_id}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
DistinctPatientStudySeriesByCollectionSite	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  visibility is null\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
InboxContentByActivityId	select\n user_name, user_inbox_content_id as id, operation_name,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  activity_inbox_content natural join user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural join subprocess_invocation\n  natural left join spreadsheet_uploaded\nwhere activity_id = ?\norder by when_invoked desc	{activity_id}	{user_name,id,operation_name,when,file_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
GetDciodvfyErrorInvalidValueForVr	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'InvalidValueForVr'\n  and error_tag = ? and\n  error_index = ? and\n  error_value = ? and\n  error_reason = ? and\n  error_subtype = ?\n	{error_tag,error_index,error_value,error_reason,error_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'InvalidValueForVr'
GetSeriesBasedOnErrorId	select \n  distinct unit_uid as series_instance_uid\nfrom \n  dciodvfy_unit_scan natural join dciodvfy_unit_scan_error\nwhere\n  dciodvfy_error_id = ?\norder by dciodvfy_error_id	{dciodvfy_error_id}	{series_instance_uid}	{tag_usage,dciodvfy}	posda_phi_simple	find series for a particular dciodvfy_error
PatientStudySeriesHierarchyByCollectionSiteWithCounts	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,num_files}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetDupContourCountsExtended	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  file_id,\n  num_dup_contours\nfrom (\n  select \n    distinct file_id, count(*) as num_dup_contours\n  from\n    file_roi_image_linkage \n  where \n    contour_digest in (\n    select contour_digest\n    from (\n      select \n        distinct contour_digest, count(*)\n      from\n        file_roi_image_linkage group by contour_digest\n    ) as foo\n    where count > 1\n  ) group by file_id \n) foo join ctp_file using (file_id) join file_patient using(file_id)\norder by num_dup_contours desc	{}	{collection,site,patient_id,file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
ForConstructingSeriesEquivalenceClasses	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  file_id\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join file_image_geometry using (file_id)\n  left join image_geometry using (image_geometry_id)\nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{series_instance_uid,modality,series_number,laterality,series_date,dicom_file_type,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_desc,performed_procedure_step_comments,image_type,iop,pixel_rows,pixel_columns,file_id}	{consistency,find_series,equivalence_classes}	posda_files	For building series equivalence classes
HideEventInfo	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  ctp_file natural join\n  file_series natural join \n  file_patient\nwhere file_id in (\nselect\n  distinct file_id\nfrom\n  file_visibility_change\nwhere\n  date_trunc('day', time_of_change) = ? and\n  reason_for = ? and\n  user_name = ?\n)\ngroup by\n  collection, site, patient_id, series_instance_uid\norder by\n  collection, site, patient_id, series_instance_uid	{day_of_change,reason_for,user_name}	{collection,site,patient_id,series_instance_uid,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
ClosedPlanarContoursWithoutLinksByFile	select\n  distinct roi_id,\n  roi_name\nfrom\n  file_structure_set natural join\n  structure_set natural join\n  roi natural join \n  roi_contour r\nwhere\n  file_id =? and \n  geometric_type = 'CLOSED_PLANAR' and \n  not exists (\n    select roi_contour_id from contour_image ci where ci.roi_contour_id = r.roi_contour_id\n  )	{file_id}	{roi_id,roi_name}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
FilesInHierarchyByPatient	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  study_date,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_patient natural join ctp_file\n  where\n    patient_id = ? and visibility is null\n)\ngroup by collection, site, patient_id, \n  study_instance_uid, series_instance_uid, study_date\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{patient_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,study_date,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
FileWithInfoBySopInPublic	select\n  frame_of_reference_uid as frame_of_ref,\n  image_orientation_patient as iop,\n  image_position_patient as ipp,\n  pixel_spacing,\n  i_rows as pixel_rows,\n  i_columns as pixel_columns\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  sop_instance_uid = ?	{sop_instance_uid}	{frame_of_ref,iop,ipp,pixel_spacing,pixel_rows,pixel_columns}	{LinkageChecks,used_in_struct_linkage_check}	public	Get list of Roi with info by file_id\n\n
HideEvents	select\n  distinct date_trunc('day', time_of_change) as when_done, \n  reason_for,\n  user_name, \n  count(*) as num_files\nfrom\n  file_visibility_change\ngroup by when_done, reason_for, user_name\norder by when_done desc	{}	{when_done,reason_for,user_name,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
FileWithInfoBySopInPosda	select \n  file_for.for_uid as frame_of_ref,\n  iop, \n  ipp,\n  pixel_spacing,\n  pixel_rows,\n  pixel_columns\nfrom\n  file_sop_common natural join ctp_file\n  natural join file_for natural join file_image\n  join image_geometry using (image_id)\n  join image using (image_id)\nwhere\n  sop_instance_uid = ?\n  and visibility is null	{sop_instance_uid}	{frame_of_ref,iop,ipp,pixel_spacing,pixel_rows,pixel_columns}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
RoundWithIntervalOverlap	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end - round_start as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and \n  round_end > ? and round_start < ?\norder by round_id, collection	{collection,from,to}	{round_id,collection,num_dups,round_created,round_start,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools,backlog_round_history}	posda_backlog	Summary of rounds
GetNfilesToCopy	select\n  c.sop_instance_uid,\n  c.replace_file_id,\n  c.copy_file_path\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is null) and \n  (inserted_file_id is null)\nlimit ?	{copy_from_public_id,count}	{sop_instance_uid,replace_file_id,copy_file_path}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
AreVisibleFilesMarkedAsBadOrUnreviewedInSeries	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  file_patient natural join\n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  series_instance_uid = ?\n  and visibility is null and \n  review_status != 'Good'\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
UpdateCopyInformation	update copy_from_public set \n  status_of_copy = ?,\n  pid_of_running_process = ?\nwhere copy_from_public_id = ?	{status_of_copy,pid_of_running_process,copy_from_public_id}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
IsThisSeriesNotVisuallyReviewed	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  'Not submitted for review' as review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series ser natural join \n  ctp_file\nwhere\n  series_instance_uid = ?\n  and visibility is null\n  and not exists (\n    select * from image_equivalence_class iec\n    where iec.series_instance_uid = ser.series_instance_uid\n  )\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{series_instance_uid}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
AreVisibleFilesMarkedAsBadOrUnreviewed	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{collection,site}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
HowManyFilesToHideInCopyFromPublic	select\n  count(*) as num_to_hide\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is null) 	{copy_from_public_id}	{num_to_hide}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
HowManyRowsInCopyFromPublic	select\n  count(*) as num_copies_total\nfrom file_copy_from_public c\nwhere\n  c.copy_from_public_id = ? 	{copy_from_public_id}	{num_copies_total}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
HowManyFilesHiddenInCopyFromPublic	select\n  count(*) as num_hidden\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is not null) 	{copy_from_public_id}	{num_hidden}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
HowManyFilesToCopyInCopyFromPublic	select\n  count(*) as num_to_copy\nfrom file_copy_from_public\nwhere\n  copy_from_public_id = ? and\n  inserted_file_id is null	{copy_from_public_id}	{num_to_copy}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
HowManyFilesCopiedInCopyFromPublic	select\n  count(*) as num_copied\nfrom file_copy_from_public\nwhere\n  copy_from_public_id = ? and\n  inserted_file_id is not null	{copy_from_public_id}	{num_copied}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
InboxEmailToUsername	select user_name\nfrom user_inbox\nwhere user_email_addr = ?\n\n	{user_email_addr}	{user_name}	{NotInteractive,used_in_background_processing}	posda_queries	Convert an email address to a username
RoundSummary2	select\n  round_id,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count\nfrom\n  round\norder by round_id	{}	{round_id,round_created,round_start,round_end,round_aborted,wait_count,process_count}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
StudiesInPublicHnsccWithMostCtAndRt	select\n patient_id, study_instance_uid, num_images as num_cts\nfrom (\n  select \n    distinct i.patient_id, t.study_instance_uid,\n    s.series_instance_uid, \n    t.study_desc, series_desc, count(*) as num_images\n  from \n    general_image i, trial_data_provenance tdp, general_series s, study t\n  where\n    i.study_pk_id = t.study_pk_id and i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n    i.general_series_pk_id = s.general_series_pk_id and tdp.project = 'HNSCC' and\n    modality = 'CT' and t.study_desc = 'RT SIMULATION' \n  group by series_instance_uid\n) as foo order by num_images desc	{}	{patient_id,study_instance_uid,num_cts}	{meta,test,hello,query_tabs,bills_test}	public	Name says it all
GetFilesAndSopsBySeries	select \n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id, \n  root_path || '/' || rel_path as path\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  file_location natural join\n  file_storage_root natural left join\n  ctp_file\nwhere \n  series_instance_uid = ? and\n  visibility is null	{series_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,path}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
GetSiteCodes	select\n  site_name, site_code\nfrom\n  site_codes\n  	{}	{site_name,site_code}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
FilesInSeriesWithPositionPixelDig	select\n  distinct file_id, image_id, unique_pixel_data_id, ipp, instance_number\nfrom\n  file_series natural join file_image natural join ctp_file natural join file_sop_common\n  natural join image natural join image_geometry\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,image_id,unique_pixel_data_id,ipp,instance_number}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get file info from series for comparison of dup_series
GetPublicCopyInfoBySop	select dicom_file_uri, tdp.project, dp_site_name as site_name, dp_site_id as site_id\nfrom general_image i, trial_data_provenance tdp \nwhere tdp.trial_dp_pk_id = i.trial_dp_pk_id and sop_instance_uid = ?	{sop_instance_uid}	{dicom_file_uri,project,site_name,site_id}	{bills_test,copy_from_public}	public	Add a filter to a tab
FilesInSeriesForApplicationOfPrivateDispositionPublic	select\n  i.dicom_file_uri as path, i.sop_instance_uid, s.modality\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.series_instance_uid = ?	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,intake}	public	Get path, sop_instance_uid, and modality for all files in a series\n
SeriesListBySubjectName	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file\nwhere \n  patient_id = ?\n  and visibility is null\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{patient_id}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy}	posda_files	Get List of Series by Subject Name
DistinctStudySeriesByCollection	select distinct study_instance_uid as study_uid, series_instance_uid as series_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct study_instance_uid, series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient natural join file_study\nwhere\n  project_name = ?\n  and visibility is null)\nas foo\ngroup by study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by study_uid, series_uid, patient_id, dicom_file_type, modality\n	{collection}	{study_uid,series_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi}	posda_files	Get Series in A Collection\n
StatusOfDciodvfyScans	select \n  dciodvfy_scan_instance_id as id,\n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time,\n  end_time\nfrom \n  dciodvfy_scan_instance\norder by id\n  	{}	{id,type_of_unit,description_of_scan,number_units,scanned_so_far,start_time,end_time}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
TableSizePosdaFiles	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_files	Get a list of collections and sites\n
GetDoseReferencingGoodPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d  natural join file_dose  where\nexists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference known SOPs\n\n
GetSsVolumeReferencingUnknownImagesByCollection	select \n  distinct project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     not exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\nand project_name = ?\nand visibility is null\norder by collection, site, patient_id	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDoseReferencingBadPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d natural join file_dose  where\nnot exists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,dose_linkages}	posda_files	Get list of RTDOSE which reference unknown SOPs\n\n
RecordReportInsertion	insert into report_inserted(\n  report_file_in_posda, report_rows_generated, background_subprocess_id\n)values(\n  ?, ?, ?\n)	{posda_id_of_report_file,rows_in_report,background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Record the upload of a report file by a background subprocess\n\nused in a background subprocess when a report file is uploaded
SimplePublicPhiReportSelectedVR	select \n  distinct element_sig_pattern as element, vr, value, tag_name, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  not is_private and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element_sig_pattern, vr, value, tag_name\norder by vr, element_sig_pattern, value	{scan_id}	{element,vr,value,tag_name,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetPlansReferencingBadSS	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan  where\nnot exists (select sop_instance_uid from file_sop_common fsc where p.ss_referenced_from_plan \n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsReferencingUnknownImagesByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, series_instance_uid, file_id\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere file_id in (\nselect\n  distinct ss_file_id as file_id from \n(select\n  sop_instance_uid, ss_file_id \nfrom (\n  select \n    distinct linked_sop_instance_uid as sop_instance_uid, file_id as ss_file_id\n  from\n    file_roi_image_linkage\n  ) foo left join file_sop_common using(sop_instance_uid)\n  where\n  file_id is null\n) as foo\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
DuplicateSopsWithLastLoadDateByCollection	select\n  distinct sop_instance_uid, file_id, max(import_time) latest\nfrom file_location join file_import using(file_id) join import_event using (import_event_id)  \n  join file_sop_common using(file_id) join ctp_file using (file_id)\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(distinct file_id)\n    from file_sop_common natural join ctp_file\n    where project_name = ? and visibility is null group by sop_instance_uid\n    ) as foo\n  where count > 1\n  ) and visibility is null\ngroup by sop_instance_uid, file_id	{collection}	{collection}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
GetSsByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n select distinct file_id from file_structure_set\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSsReferencingKnownImagesByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere file_id in (\n  select\n    distinct ss_file_id as file_id \n  from (\n    select\n      sop_instance_uid, ss_file_id \n    from (\n      select \n        distinct\n           linked_sop_instance_uid as sop_instance_uid,\n           file_id as ss_file_id\n      from\n        file_roi_image_linkage\n    ) foo left join file_sop_common using(sop_instance_uid)\n    join ctp_file using(file_id)\n  where\n    visibility is null\n  ) as foo\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of RTSTRUCT which reference known SOPs by Collection\n\n
GetPlansReferencingGoodSS	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan  where\nexists (select sop_instance_uid from file_sop_common fsc where p.ss_referenced_from_plan \n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
VisibilityChangeEventsByCollectionWithoutFurtherBreakdown	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
AddInsertedToFileCopyFromPublic	update file_copy_from_public set\n  inserted_file_id = ?\nwhere copy_from_public_id = ? and sop_instance_uid = ?	{inserted_file_id,copy_from_public_id,sop_instance_uid}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
GetPlans	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan)	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
StorageRootIdById	select root_path from file_storage_root where\nfile_storage_root_id = ?	{file_storage_root_id}	{root_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
GetListCollectionPrios	select collection, file_count as priority\nfrom collection_count_per_round\norder by collection\n\n	{}	{collection,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get a list of all collections defined in backlog with priorities.
GetDoses	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect distinct file_id from rt_dose d natural join file_dose)	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
WhatHasComeInRecentlyWithSubject	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
FindInconsistentSeries	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series,for_bill_series_consistency}	posda_files	Find Inconsistent Series\n
EquivalenceClassStatusSummaryByCollection	select\n  distinct project_name as collection,\n  processing_status,\n  review_status, count(distinct image_equivalence_class_id)\nfrom\n  image_equivalence_class join file_series using(series_instance_uid) join ctp_file using(file_id)\nwhere project_name = ?\ngroup by collection, processing_status, review_status	{collection}	{collection,processing_status,review_status,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
CountsByCollectionDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
CtWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'CT Image Storage' and \n  visibility is null and\n  modality != 'CT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
RecentUploadsTest1	select\n        project_name,\n        site_name,\n        dicom_file_type,\n        count(*),\n        (extract(epoch from now() - max(import_time)) / 60)::int as minutes_ago,\n        to_char(max(import_time), 'HH24:MI') as time\n\n    from (\n        select \n          project_name,\n          site_name,\n          dicom_file_type,\n          sop_instance_uid,\n          import_time\n\n        from \n          file_import\n          natural join import_event\n          natural join ctp_file\n          natural join dicom_file\n          natural join file_sop_common\n          natural join file_patient\n\n        where import_time > now() - interval '1' day\n          and visibility is null\n    ) as foo\n    group by\n        project_name,\n        site_name,\n        dicom_file_type\n    order by minutes_ago asc;	{}	{project_name,site_name,dicom_file_type,count,minutes_ago,time}	{files}	posda_files	Show files received by Posda in the past day.
SubjectCountsDateRangeSummaryByCollectionSiteDateRange	select \n  distinct patient_id,\n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join file_patient natural join file_import natural join import_event\n  natural join file_sop_common\nwhere\n  project_name = ? and site_name = ? and import_time > ? and\n  import_time < ?\ngroup by patient_id\norder by patient_id	{collection,site,from,to}	{patient_id,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
SubjectCountsDateRangeSummaryByCollectionSiteSubject	select \n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  study_date, \n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  file_patient natural join \n  file_import natural join \n  import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null and patient_id = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, study_date\norder by patient_id, study_date	{collection,site,patient_id}	{patient_id,study_instance_uid,series_instance_uid,study_date,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
CurrentPatientWithoutStatii	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  '<undef>' as patient_import_status\nfrom \n  ctp_file natural join file_patient p\nwhere \n  visibility is null and\n  not exists (select * from patient_import_status s where p.patient_id = s.patient_id)	{}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
CurrentPatientStatii	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_import_status\nfrom \n  ctp_file natural join file_patient natural left join patient_import_status\nwhere \n  visibility is null	{}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
CurrentPatientStatiiByCollectionSite	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_import_status\nfrom \n  ctp_file natural join file_patient natural left join patient_import_status\nwhere\n  visibility is null and project_name = ? and site_name = ?	{collection,site}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
DoesDoseReferenceBadPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d natural join file_dose  where\nnot exists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Get list of RTDOSE which reference unknown SOPs\n\n
FindInconsistentStudy	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,for_bill_study_consistency}	posda_files	Find Inconsistent Studies\n
SeriesListBySubjectNameByDateRange	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere \n  patient_id = ?\n  and visibility is null\n  and import_time > ? \n  and import_time < ?\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{patient_id,from,to}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy,backlog_round_history}	posda_files	Get List of Series by Subject Name
GetDoseReferencingNoPlan	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose natural join file_dose  where\nrt_dose_referenced_plan_uid is null)	{collection}	{collection,site,patient_id,sop_instance_uid,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSopOfPlanReferenceByDose	select\n  distinct rt_dose_referenced_plan_uid as sop_instance_uid,\n  rt_dose_referenced_plan_class as sop_class_uid\nfrom\n  rt_dose natural join file_dose\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid,sop_class_uid}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Get Plan Reference Info for RTDOSE by file_id\n
DoesDoseReferenceGoodPlan	select\n  sop_instance_uid\nfrom\n  file_sop_common fsc, rt_dose d natural join file_dose f\nwhere\n  f.file_id = ? and d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid	{file_id}	{sop_instance_uid}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Determine whether an RTDOSE references a known plan\n\n
DoesDoseReferenceNoPlan	select\n  file_id\nfrom\n  rt_dose  natural join file_dose\nwhere\n  rt_dose_referenced_plan_uid is null\n  and file_id = ?	{file_id}	{file_id}	{"Structure Sets",sops,LinkageChecks,used_in_dose_linkage_check}	posda_files	Return a row if file references no plan\n\n
subprocess_invocations	select command_line, when_invoked, spreadsheet_uploaded_id from subprocess_invocation\nwhere from_spreadsheet\norder by when_invoked	{}	{command_line,when_invoked,spreadsheet_uploaded_id}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FileSizeByPublic	select distinct project as collection, sum(dicom_size) as total_disc_used from general_image group by project order by total_disc_used desc	{}	{collection,total_disc_used}	{AllCollections,queries}	public	Get a list of available queries
CountsCollectionDateRangeBySubject	select\n  distinct\n    patient_id,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id\norder by\n  patient_id\n	{from,to,collection}	{patient_id,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
FileSizeByCollection	select project_name as collection,sum(size) as total_disc_used from file natural join ctp_file group by project_name order by total_disc_used desc	{}	{collection,total_disc_used}	{AllCollections,queries}	posda_files	Get a list of available queries
TableSizePosdaPhiSimple	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_phi_simple	Get a list of collections and sites\n
RoundStatsWithSubjByCollectionForDateRange	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ? and collection = ?\ngroup by collection, site, subj, time order by time desc, collection	{interval,from,to,collection}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
PosdaImagesByCollectionSitePlus	select distinct\n  patient_id,\n  sop_instance_uid,\n  study_instance_uid,\n  series_instance_uid,\n  digest\nfrom\n  file\n  natural join  file_patient\n  natural join file_series\n  natural join file_sop_common\n  natural join file_study\n   natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n\n	{collection,site}	{patient_id,sop_instance_uid,study_instance_uid,series_instance_uid,digest}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
SeriesListByStudyInstanceUid	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file\nwhere \n  study_instance_uid = ?\n  and visibility is null\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{study_instance_uid}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy}	posda_files	Get List of Series by Study Instance UID
IntakeImagesByCollectionSitePlus	select\n  p.patient_id,\n  i.sop_instance_uid,\n  t.study_instance_uid,\n  s.series_instance_uid\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n\n	{collection,site}	\N	{intake}	intake	N\no\nn\ne
GetSopOfSsReferenceByPlan	select\n  distinct ss_referenced_from_plan as sop_instance_uid\nfrom\n  plan natural join file_plan\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid}	{LinkageChecks,used_in_plan_linkage_check}	posda_files	Get Plan Reference Info for RTDOSE by file_id\n
FindInconsistentSeriesIgnoringTimeCollectionSite	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and site_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series by Collection Site\n
FindInconsistentStudyIgnoringStudyTimeByCollectionSite	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and site_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
TableSizePosdaBacklog	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_backlog	Get a list of collections and sites\n
TableSizePosdaQueries	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_queries	Get a list of collections and sites\n
IsFileProcessed	select is_dicom_file is not null as processed\nfrom file\nwhere file_id = ?\n	{file_id}	{processed}	{}	posda_files	\n
GetFilesToImportFromEdit	select\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  to_file_path\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and subprocess_invocation_id = ?\n      intersect\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and subprocess_invocation_id = ?\n    ) as foo\n  )\n  and subprocess_invocation_id = ?\nlimit ?	{subprocess_invocation_id,subprocess_invocation_id_1,subprocess_invocation_id_2,limit}	{subprocess_invocation_id,from_file_digest,to_file_digest,to_file_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetFileVisibilityByDigest	select distinct file_id,  visibility from file natural join ctp_file where digest = ?	{digest}	{file_id,visibility}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get current visibility by file_id\n
PatientStudySeriesHierarchyByCollectionSiteWithDateRange	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join \n  ctp_file natural join \n  file_series natural join \n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from \n      ctp_file  natural join\n      file_import natural join\n      import_event\n    where project_name = ? and site_name = ? and\n    visibility is null and\n    import_time > ? and import_time < ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site,from,to}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy with upload times within a date range
DistinctStudySeriesByCollectionSite	select distinct study_instance_uid as study_uid, series_instance_uid as series_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct study_instance_uid, series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient natural join file_study\nwhere\n  project_name = ? and site_name = ?\n  and visibility is null)\nas foo\ngroup by study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by study_uid, series_uid, patient_id, dicom_file_type, modality\n	{collection,site}	{study_uid,series_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi}	posda_files	Get Series in A Collection\n
GetMaxProcessedFileId	select\n  max(file_id) as file_id\nfrom\n  file\nwhere\n  is_dicom_file is not null\n	{}	{file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
InsertIntoDicomEditCompare	insert into dicom_edit_compare(\n  edit_command_file_id,\n  from_file_digest,\n  to_file_digest,\n  short_report_file_id,\n  long_report_file_id\n) values ( ?, ?, ?, ?, ?)	{edit_command_file_id,from_file_digest,to_file_digest,short_report_file_id,long_report_file_id}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
GetFilesNotHiddenInDicomFileCompare	select\n  distinct from_file_digest\nfrom\n  dicom_edit_compare\nwhere\n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and edit_command_file_id = ?\n      except\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and edit_command_file_id = ?\n    ) as foo\n  )\n  and edit_command_file_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{from_file_digest}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get Files not hidden but replacement imported
GetMaxFileId	select\n  max(file_id) as file_id\nfrom\n  file\n	{}	{file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetFilePath	select\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{path}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
GetFileVisibility	select distinct visibility from ctp_file where file_id = ?	{file_id}	{visibility}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get current visibility by file_id\n
GetPtInfoBySeries	select \n  distinct \n  pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam\nfrom file_pt_image natural join file_patient natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null	{series_instance_uid}	{radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
ValuesWithVrTagAndCount	select\n    distinct vr, value, element_signature, private_disposition, count(*)  as num_files\nfrom\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\nwhere\n    scan_event_id = ?\ngroup by value, element_signature, vr, private_disposition\n	{scan_id}	{vr,value,element_signature,private_disposition,num_files}	{tag_usage,PrivateTagKb}	posda_phi	List of values seen in scan by VR (with count of elements)\n
SafeToHideDupSopsBeforeDate	select distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?\nexcept\nselect distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest >= ?	{collection,break_date,collection_1,break_date_1}	{collection}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
files_to_copy_from_public	select \n  dp_site_name as site, \n  sop_instance_uid, \n  dicom_file_uri \nfrom general_image, trial_data_provenance\nwhere \n  general_image.trial_dp_pk_id = trial_data_provenance.trial_dp_pk_id and \n  trial_data_provenance.project = ? and\n  trial_data_provenance.dp_site_name = ?	{collection,site}	{site,sop_instance_uid,dicom_file_uri}	{meta,test,hello,query_tabs,bills_test}	public	Files to copy from Public (to Posda)
FilesInHierarchyBySeries	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
DupSopsOnlyAfterDate	select distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest >= ?\nexcept\nselect distinct sop_instance_uid from (\nselect\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?	{collection,break_date,collection_1,break_date_1}	{sop_instance_uid}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date only after cut date
CreateBackgroundReport	insert into background_subprocess_report(\n  background_subprocess_id,\n  file_id,\n  name\n) values (\n  ?, ?, ?\n)\nreturning background_subprocess_report_id\n	{background_subprocess_id,file_id,name}	\N	{NotInteractive,used_in_background_processing}	posda_queries	Create a new entry in background_subprocess_report table
DupSopsBeforeDateForHiding	select distinct file_id, latest from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?	{collection,break_date}	{file_id,latest}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
InsertIntoDicomEditCompareFixed	insert into dicom_edit_compare(\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  short_report_file_id,\n  long_report_file_id,\n  to_file_path\n) values ( ?, ?, ?, ?, ?, ?)	{subprocess_invocation_id,from_file_digest,to_file_digest,short_report_file_id,long_report_file_id,to_file_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda,public_posda_counts}	posda_files	Lock the file table in posda_files
DupSopsByCollection	select distinct sop_instance_uid, min(latest) as earliest, max(latest) as latest\nfrom (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo\ngroup by sop_instance_uid	{collection}	{sop_instance_uid,earliest,latest}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date
FindUnpopulatedPetsWithCount	select\n  file_id, root_path || '/' || rel_path as file_path\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)\nlimit ?	{n}	{file_id,file_path}	{populate_posda_files,bills_test}	posda_files	Get's all files which are PET's which haven't been imported into file_pt_image yet.<br>\n\nOk to run this interactively, but use small n
VisibilityChangeEventsBySeries	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere series_instance_uid = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{series_instance_uid}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
AddHocQuery1	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, dicom_file_type, modality,\n  count(distinct file_id) as num_files, count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest, max(import_time) as latest\nfrom\n  ctp_file natural join file_patient natural join dicom_file natural join file_series natural join\n  file_sop_common natural join\n  file_study join file_import using(file_id) join import_event using (import_event_id)\nwhere file_id in(\n  select distinct file_id from file_patient where patient_id = 'ER-1125'\n) and visibility is null \ngroup by collection, site, patient_id, study_instance_uid, series_instance_uid, dicom_file_type, modality	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files,num_sops,earliest,latest}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
GetFilePathAndModality	select\n  root_path || '/' || rel_path as path, modality\nfrom\n  file_location natural join file_storage_root join file_series using(file_id)\nwhere\n  file_id = ?	{file_id}	{path,modality}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
SelectPtInfoSummary	select \n  distinct pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam, \n  count(*) as num_files\nfrom file_pt_image \ngroup by \n  radiopharmaceutical,\n  total_dose,\n  half_life,\n  positron_fraction,\n  fov_shape,\n  fov_dim,\n  coll_type,\n  recon_diam	{}	{radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam,num_files}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
FindNumUnpopulatedPets	select\n  count(distinct file_id) as num_unimported_pets\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)	{}	{num_unimported_pets}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
GetPosdaDupSopCounts	select sop_instance_uid, num_files from (\nselect distinct sop_instance_uid, count(distinct file_id) as num_files from (\nselect\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name = ? \n  and visibility is null\n) as foo group by sop_instance_uid\n) as foo where num_files > 1	{collection}	{sop_instance_uid,num_files}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
VisibilityChangeEventsByCollection	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, series_instance_uid, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,series_instance_uid,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
StudiesWithMultiplePatientIds	select\n  distinct study_instance_uid,\n  patient_id\nfrom\n  file_study natural join file_patient natural join ctp_file                                                      \nwhere study_instance_uid in (                                                                                                                                                        \n  select distinct study_instance_uid from (                                                                                                                                                                                    \n     select * from (\n        select distinct study_instance_uid, count(*) from (\n          select distinct study_instance_uid, patient_id\n          from file_study natural join file_patient natural join ctp_file\n          where project_name = ? and visibility is null\n        ) as foo group by study_instance_uid\n      ) as foo where count > 1\n   ) as foo\n) and\nvisibility is null	{collection}	{study_instance_uid,patient_id}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
dicom_files_with_no_ctp_file	select distinct patient_id, dicom_file_type, modality, count(distinct file_id) as num_files\nfrom dicom_file d natural join file_patient natural join file_series\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) \ngroup by patient_id, dicom_file_type, modality	{}	{patient_id,dicom_file_type,modality,num_files}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
FilesInStudyForEdit	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_study\n  natural join file_sop_common\nwhere\n  study_instance_uid = ? and visibility is null\n	{study_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
DicomFileTypesNotProcessedAll	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d\nwhere\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
SelectPtInfoSummaryByCollection	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam, \n  count(*) as num_files\nfrom file_pt_image natural join file_patient natural join file_series natural join ctp_file \nwhere project_name = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  radiopharmaceutical,\n  total_dose,\n  half_life,\n  positron_fraction,\n  fov_shape,\n  fov_dim,\n  coll_type,\n  recon_diam\norder by patient_id	{collection}	{collection,site,patient_id,series_instance_uid,radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam,num_files}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
FindInconsistentStudyIgnoringStudyTimeIncludingPatientId	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join file_patient natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
AddHocQuery	select\n  distinct patient_id, study_instance_uid as study_uid, series_instance_uid as series_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_study natural join file_series natural join ctp_file\nwhere\n  patient_id in\n   ('HN-CHUM-050', 'HN-CHUM-052', 'HN-CHUM-054', 'HN-CHUM-056', 'HN-CHUM-030', 'HN-CHUM-032')\n  and visibility is null\ngroup by patient_id, study_uid, series_uid	{}	{patient_id,study_uid,series_uid,num_files}	{meta,test,hello,bills_test,bills_ad_hoc_scripts}	posda_files	Add a filter to a tab
VisibilityChangeEventsByCollectionByHour	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, series_instance_uid, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,series_instance_uid,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
GetPosdaSopsForCompare	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name = ? \n  and visibility is null	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
GetPublicSopsForCompare	select\n  i.patient_id,\n  i.study_instance_uid,\n  s.series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  s.modality,\n  i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and tdp.project = ?\n  and i.general_series_pk_id = s.general_series_pk_id	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_uri}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
SelectCtInfoSummaryByCollection	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot,\n  count(*) as num_files\nfrom file_ct_image natural join file_patient natural join file_series natural join ctp_file \nwhere project_name = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot\norder by patient_id	{collection}	{collection,site,patient_id,series_instance_uid,kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,table_feed_per_rot}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
GetDicomObjectTypeBySeries	select \n  distinct \n  dicom_file_type as dicom_object_type\nfrom dicom_file natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{dicom_object_type}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
GetCtInfoBySeries	select \n  distinct \n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot\nfrom file_ct_image natural join file_patient natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,table_feed_per_rot}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
VisibilityChangesByCollectionSite	select\n  distinct project_name as collection, \n  site_name as site,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and site_name = ?\ngroup by \n  collection, site, user_name, prior_visibility, new_visibility,\n  time, reason_for\norder by time, collection, site	{collection,site}	{collection,site,user_name,prior_visibility,new_visibility,time,reason_for,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
dicom_files_ids_with_no_ctp_file_like_pat	select \n  distinct patient_id,\n  dicom_file_type, \n  modality, \n  file_id,\n  root_path || '/' || rel_path as file_path\nfrom\n  dicom_file d natural join\n  file_patient natural join \n  file_series natural join\n  file_location natural join\n  file_storage_root\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) and patient_id like ?\n	{patient_id_pattern}	{patient_id,dicom_file_type,modality,file_id,file_path}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
InsertIntoPosdaPublicCompare	insert into posda_public_compare(\n  background_subprocess_id,\n  sop_instance_uid,\n  from_file_id,\n  short_report_file_id,\n  long_report_file_id,\n  to_file_path\n) values ( ?, ?, ?, ?, ?, ?)	{background_subprocess_id,sop_instance_uid,from_file_id,short_report_file_id,long_report_file_id,to_file_path}	{}	{NotInteractive,Backlog,Transaction,public_posda_counts}	posda_files	Lock the file table in posda_files
VisibilityChangesBySeries	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, series_instance_uid, count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and site_name = ? and\n  series_instance_uid = ?\ngroup by \n  collection, site, patient_id, user_name, prior_visibility, new_visibility,\n  time, reason_for, series_instance_uid\norder by time, collection, site, patient_id, series_instance_uid\n	{collection,site,series_instance_uid}	{collection,site,patient_id,user_name,prior_visibility,new_visibility,time,reason_for,series_instance_uid,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
background_subprocesses_by_date_op_name	select \n  background_subprocess_id as bkgrnd_id, subprocess_invocation_id as invoc_id,\n  operation_name, command_line, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n  and when_script_ended is not null\n  and when_script_started > ? and when_script_started < ? and operation_name = ?\norder by when_script_started desc	{invoking_user,from,to,operation_name}	{bkgrnd_id,invoc_id,operation_name,command_line,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
dicom_files_with_no_ctp_file_like_pat	select \n  distinct patient_id,\n  dicom_file_type, \n  modality, \n  count(distinct file_id) as num_files, \n  min(import_time) as earliest, \n  max(import_time) as latest \nfrom\n  dicom_file d natural join\n  file_patient natural join \n  file_series natural join\n  file_import natural join\n  import_event\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) and patient_id like ?\ngroup by patient_id, dicom_file_type, modality	{patient_id_pattern}	{patient_id,dicom_file_type,modality,num_files,earliest,latest}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
RoiInfoByFileId	select\n  distinct roi_id, for_uid,\n  max_x, max_y, max_z,\n  min_x, min_y, min_z,\n  roi_name, roi_description , roi_interpreted_type\nfrom\n  roi natural join file_structure_set\nwhere file_id = ?	{file_id}	{roi_id,for_uid,max_x,max_y,max_z,min_x,min_y,min_z,roi_name,roi_description,roi_interpreted_type}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
PublicDifferenceReportBySubprocessId	select\n  distinct short_report_file_id, long_report_file_id,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct from_file_id) as num_files\nfrom posda_public_compare\nwhere background_subprocess_id =?\ngroup by short_report_file_id, long_report_file_id order by short_report_file_id	{subprocess_invocation_id}	{short_report_file_id,long_report_file_id,num_sops,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetBackgroundButtonsByTag	select\n    background_button_id,\n    operation_name,\n    object_class,\n    button_text\nfrom background_buttons\nwhere tags && ?\n\n	{tags}	{background_button_id,operation_name,object_class,button_text}	{NotInteractive,used_in_process_popup}	posda_queries	
VisibilityChangeEventsByCollectionWithModality	select \n  distinct project_name as collection,\n  site_name as site,\n  modality,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, modality, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,modality,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
GetBackgroundButtons	select\n    background_button_id,\n    operation_name,\n    object_class,\n    button_text\nfrom background_buttons\n\n	{}	{background_button_id,operation_name,object_class,button_text}	{NotInteractive,used_in_process_popup}	posda_queries	N\no\nn\ne
AddHocQueryForHeadNeckPETCT	select\n  distinct patient_id, study_instance_uid as study_uid, series_instance_uid as series_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_study natural join file_series natural join ctp_file\nwhere\n  patient_id in\n   ('HN-CHUM-050', 'HN-CHUM-052', 'HN-CHUM-054', 'HN-CHUM-056', 'HN-CHUM-030', 'HN-CHUM-034')\n  and visibility is null\ngroup by patient_id, study_uid, series_uid	{}	{patient_id,study_uid,series_uid,num_files}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
ContourTypesByRoi	select\n  distinct geometric_type,\n  count(distinct roi_contour_id) as num_contours,\n  sum(number_of_points) as total_points\nfrom\n roi_contour\nwhere roi_id = ?\ngroup by geometric_type	{roi_id}	{geometric_type,num_contours,total_points}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
FilesByPatientForApplicationOfPrivateDisposition	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_patient\n  natural join file_sop_common\nwhere\n patient_id = ? and visibility is null\n	{patient_id}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,edit_files}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
GetVisualReviewStatusCountsById	select \n  distinct review_status, count(distinct series_instance_uid) as num_series\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ?\ngroup by review_status	{visual_review_instance_id}	{review_status,num_series}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
GetSsByCollectionSite	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n select distinct file_id from file_structure_set\n)\nand project_name = ? and site_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection,site}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSeriesByVisualReviewIdAndStatus	select \n  distinct series_instance_uid\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ? and review_status = ?	{visual_review_instance_id,review_status}	{series_instance_uid}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
VisibilityChangeEventsByCollectionByHourNoSeriesOrPatient	select \n  distinct project_name as collection,\n  site_name as site,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, \n  count (distinct patient_id) as num_patients,\n  count (distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,when_done,user_name,prior_visibility,new_visibility,reason_for,num_patients,num_series,num_files}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
CreateCtpFileRow	insert into ctp_file(\n  file_id, project_name, site_name, site_id, file_visibility, batch, study_year\n) values (\n  ?, ?, ?, ?, ?, ?, ?\n)	{file_id,project_name,site_name,site_id,file_visibility,batch,study_year}	{}	{meta,test,hello,query_tabs,bills_test}	posda_files	create ctp_file row
ShowAllHideEventsByCollectionSiteModality	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file natural join file_series\n  where project_name = ? and site_name = ? and\n  modality = ?\n)	{collection,site,modality}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
FromAndToFileIdWithVisibilityFromDigests	select \n(select file_id from file where digest = ?) as from_file_id,\n(select file_id from file where digest = ?) as to_file_id,\n(select visibility as from_file_visibility from ctp_file natural join file where digest = ?) as from_visibility,\n(select visibility as from_file_visibility from ctp_file natural join file where digest = ?) as to_visibility	{from_digest_1,to_digest_1,from_digest_2,to_digest_2}	{from_file_id,to_file_id,from_visibility,to_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
FromFileWithVisibilityBySopFromDicomEditCompare	select \n  sop_instance_uid,\n  file_id as from_file_id,\n  visibility as from_file_visibility\nfrom\n  ctp_file natural join file natural join file_sop_common,\n  dicom_edit_compare\nwhere\n  from_file_digest = file.digest and\n  subprocess_invocation_id = ?\norder by sop_instance_uid	{subprocess_invocation_id}	{sop_instance_uid,from_file_id,from_file_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
ShowAllVisibilityChangesBySeriesInstance	select\n  distinct\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for,\n  count (distinct file_id) as num_files\nfrom\n   file_visibility_change \nwhere file_id in (\n  select distinct file_id \n  from file_series\n  where series_instance_uid = ?\n)\ngroup by user_name, time_of_change,\n  prior_visibility, new_visibility, reason_for\norder by time_of_change	{series_instance_uid}	{user_name,time_of_change,prior_visibility,new_visibility,reason_for,num_files}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
ShowAllVisibilityChangesBySopInstance	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from file_sop_common\n  where sop_instance_uid = ?\n)\norder by time_of_change	{sop_instance_uid}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
ToFileWithVisibilityBySopFromDicomEditCompare	select \n  sop_instance_uid,\n  file_id as to_file_id,\n  visibility as to_file_visibility\nfrom\n  ctp_file natural join file natural join file_sop_common,\n  dicom_edit_compare\nwhere\n  to_file_digest = file.digest and\n  subprocess_invocation_id = ?\norder by sop_instance_uid	{subprocess_invocation_id}	{sop_instance_uid,to_file_id,to_file_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
VisibilityChangeEventsByCollectionByHourNoSeries	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
background_emails	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ? and name = 'Email'\norder by when_invoked desc	{invoking_user}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
GetCtpFileRow	select file_id from ctp_file where file_id = ?	{file_id}	{file_id}	{meta,test,hello,query_tabs,bills_test}	posda_files	See if ctp_file_row exists
background_reports	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ?\norder by when_invoked desc	{invoking_user}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
DistinctVisibleSopsAndFilesInSeriesWithPatAndStudy	select distinct\n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid, file_id\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\nwhere file_id in \n  (select\n    distinct file_id\n  from\n    file_series natural join file_sop_common natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null)\n	{series_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
FileType	select file_type\nfrom file\nwhere file_id = ?\n	{file_id}	{file_type}	{NotInteractive,used_in_background_processing}	posda_files	Get the file_type of a file, by file_id\n
ShowFilesHiddenByUserDateRange	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  reason_for as reason,\n  prior_visibility as before,\n  new_visibility as after,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(distinct file_id) as num_files\nfrom \n  file_visibility_change natural join\n  file_patient natural join\n  file_study natural join\n  file_series natural join \n  ctp_file\nwhere\n  user_name = ? and\n  time_of_change > ? and time_of_change < ?\ngroup by\n   collection, site, \n   patient_id, study_instance_uid,\n   series_instance_uid, reason, before, after\norder by\n  patient_id, study_instance_uid, series_instance_uid	{user,from,to}	{collection,site,patient_id,study_instance_uid,series_instance_uid,reason,before,after,num_files,earliest,latest}	{find_series,equivalence_classes,consistency,visual_review_results,old_hidden}	posda_files	Show Files Hidden By User Date Range
VisibilityChangeEventsByCollectionForHiddenFiles	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, \n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(*)\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and\n  visibility is not null\ngroup by collection, site, patient_id, user_name, time, reason_for\norder by time, collection, site, patient_id	{collection}	{collection,site,patient_id,user_name,time,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
NumFilesInSeries	select count(distinct file_id) as num_files from file_series natural join ctp_file where \nseries_instance_uid = ? and visibility is null	{series_instance_uid}	{num_files}	{bills_test}	posda_files	Get number of files in series
InsertFileCopyFromPublicRow	insert into file_copy_from_public(\n  copy_from_public_id, sop_instance_uid, replace_file_id, copy_file_path\n) values (\n  ?, ?, ?, ?\n)	{copy_from_public_id,sop_instance_uid,replace_file_id,copy_file_path}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
missing file_study	select distinct patient_id, dicom_file_type, series_instance_uid, modality, count(distinct file_id) as num_files,\n  min(import_time) as earliest, max(import_time) as latest\nfrom \nfile_patient natural join dicom_file natural join file_series\nnatural join file_import natural join import_event\nwhere file_id in (\nselect file_id from \nctp_file where project_name =? and site_name = ? and visibility is null and not exists (select file_id from file_study where file_study.file_id = ctp_file.file_id)) group by patient_id, dicom_file_type, series_instance_uid, modality	{collection,site}	{patient_id,dicom_file_type,series_instance_uid,modality,num_files,earliest,latest}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
GetModuleToPosdaTable	select * from dicom_module_to_posda_table	{}	{dicom_module_name,create_row_query,table_name}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
SimpleCountQuery	select\n  distinct\n    patient_id, dicom_file_type, modality,\n    study_instance_uid, series_instance_uid,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\nwhere\n  project_name = ?  and site_name = ? and visibility is null\ngroup by\n  patient_id, dicom_file_type, modality,\n  study_instance_uid, series_instance_uid\norder by\n  patient_id, study_instance_uid, series_instance_uid,\n  modality\n	{collection,site}	{patient_id,dicom_file_type,modality,study_instance_uid,series_instance_uid,num_sops,num_files}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
InsertFileStudy	insert into file_study(\n  file_id, study_instance_uid, study_date,\n  study_time, referring_phy_name, study_id,\n  accession_number, study_description, phys_of_record,\n  phys_reading, admitting_diag\n) values (\n  ?, ?, ?,\n  ?, ?, ?,\n  ?, ?, ?,\n  ?, ?\n)	{file_id,study_instance_uid,study_date,study_time,referring_phy_name,study_id,accession_number,study_description,phys_of_record,phys_reading,admitting_diag}	{}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
GetIdOfNewCopyFromPublicRow	select currval('copy_from_public_copy_from_public_id_seq') as id	{}	{id}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
GetStudyByFileId	select file_id from file_study where file_id = ?	{file_id}	{file_id}	{bills_test,posda_db_populate}	posda_files	Add a filter to a tab
GetModuleToTableArgs	select *\nfrom \n  dicom_tag_parm_column_table natural left join tag_preparation\nwhere posda_table_name = ?	{table_name}	{tag_cannonical_name,tag,posda_table_name,column_name,preparation_description}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
GetFromToDigestsEditCompare	select from_file_digest, to_file_digest from dicom_edit_compare where subprocess_invocation_id = ?	{subprocess_invocation_id}	{from_file_digest,to_file_digest}	{bills_test,posda_db_populate}	posda_files	Add a filter to a tab
DistinctSeriesByCollectionSite	select distinct series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_study natural join file_series natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetReportOnSeriesWithNoStudy	select \n  distinct project_name as collection,\n  site_name as site, patient_id, series_instance_uid, visibility, count(*) as num_files\nfrom ctp_file natural join file natural join file_patient natural join file_series  where digest in (\nselect digest from file where file_id in (\nselect file_id from file_series where not exists(select file_id from file_study where file_series.file_id = file_study.file_id))) group by project_name, site_name, patient_id, series_instance_uid,visibility;	{}	{collection,site,patient_id,series_instance_uid,visibility,num_files}	{bills_test,posda_db_populate}	posda_files	Add a filter to a tab
background_subprocesses	select \n  background_subprocess_id as id, \n  operation_name, command_executed, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n and when_script_ended is not null\norder by when_script_started desc	{invoking_user}	{id,operation_name,command_executed,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
GetQueryArgs	select args from queries where name = ?	{name}	{args}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
FilesInStudy	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_sop_common\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
get_file_to_fix_ctp	select\n  file_id, root_path || '/' || file_location.rel_path as file_path \nfrom\n  file_patient  natural join\n  file_import natural join\n  import_event join file_location using(file_id) join file_storage_root using (file_storage_root_id)\nwhere \n  import_time > ? and not exists\n  (select file_id from ctp_file where ctp_file.file_id = file_patient.file_id)\nlimit ?	{from,limit}	{file_id,file_path}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
GetFullCopyFromPublicInfo	select \n  copy_from_public_id as id, who, why, \n  num_file_rows_populated as num_files, \n  (\n    select count(*) as num_waiting \n    from file_copy_from_public fc \n    where fc.copy_from_public_id = copy_from_public.copy_from_public_id and \n       not exists\n       (\n         select file_id from ctp_file where ctp_file.file_id = fc.replace_file_id and visibility is not null\n       )\n  ),\n  (\n    select count(*) as num_copied\n    from file_copy_from_public fc\n    where fc.copy_from_public_id = copy_from_public.copy_from_public_id and\n    fc.inserted_file_id is not null\n  )\nfrom\n  copy_from_public \nwhere copy_from_public_id = ?	{copy_from_public_id}	{id,who,why,num_files,num_waiting,num_copied}	{bills_test,copy_from_public,public_posda_consistency}	posda_files	Add a filter to a tab
GetVisualReviewInstanceInfo	select \n  visual_review_reason\nfrom\n  visual_review_instance\nwhere\n  visual_review_instance_id = ?	{visual_review_instance_id}	{visual_review_reason}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
GetDciodvfyScanDesc	select \n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time,\n  end_time\nfrom \n  dciodvfy_scan_instance\nwhere dciodvfy_scan_instance_id = ?\n	{scan_id}	{type_of_unit,description_of_scan,number_units,scanned_so_far,start_time,end_time}	{tag_usage,dciodvfy}	posda_phi_simple	Get info about a dciodvfy scan
GetCopyFromPublicInfo	select\n  copy_from_public_id,\n  when_row_created,\n  who,\n  why, \n  num_file_rows_populated as num_files,\n  status_of_copy,\n  pid_of_running_process\nfrom\n  copy_from_public\n	{}	{copy_from_public_id,when_row_created,who,why,num_files,status_of_copy,pid_of_running_process}	{bills_test,copy_from_public,public_posda_consistency}	posda_files	Add a filter to a tab
GetSeriesListByDciodvyScanInstance	select distinct(unit_uid) as series_instance_uid from dciodvfy_unit_scan natural join dciodvfy_unit_scan_warning  where dciodvfy_scan_instance_id = ? union \nselect distinct(unit_uid) as series_instance_uid from dciodvfy_unit_scan natural join dciodvfy_unit_scan_error  where dciodvfy_scan_instance_id = ?\n	{dciodvfy_scan_instance_id,repeat_scan_instance_id}	{series_instance_uid}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
DispositionsVersusChanges	select \n  element_sig_pattern, tag_name, element_seen_id, private_disposition, when_changed, new_disposition\nfrom element_seen natural join element_disposition_changed \norder by element_sig_pattern, when_changed	{}	{element_sig_pattern,tag_name,element_seen_id,private_disposition,when_changed,new_disposition}	{tag_usage,used_in_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
SeriesInHierarchyBySeries	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
GetPublicInfoBySop	select \n  tdp.project, dp_site_name as site_name, dp_site_id as site_id,\n  patient_id, study_instance_uid, series_instance_uid\nfrom \n  general_image i, trial_data_provenance tdp \nwhere \n  tdp.trial_dp_pk_id = i.trial_dp_pk_id and sop_instance_uid = ?	{sop_instance_uid}	{project,site_name,site_id,patient_id,study_instance_uid,series_instance_uid}	{bills_test,comparing_posda_to_public}	public	Add a filter to a tab
GetNfilesToCopyOnly	select\n  sop_instance_uid,\n  copy_file_path \nfrom file_copy_from_public\nwhere copy_from_public_id =  ? and inserted_file_id is null \nlimit ?	{copy_from_public_id,count}	{sop_instance_uid,copy_file_path}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
SeriesVisualReviewResultsByCollectionSiteSummary	select \n  distinct\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and visibility is null\ngroup by\n  dicom_file_type,\n  modality,\n  review_status\n	{project_name,site_name}	{dicom_file_type,modality,review_status,num_series,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SubjectLoadDaysByCollection	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\n  and collection = ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval_type,from,to,collection}	{collection,site,subj,time,count,max_delay,min_delay}	{find_series,for_tracy,backlog_round_history}	posda_backlog	Get List of Series by Subject Name
GetHiddenFilesBySeriesAndVisualReviewId	select\n  file_id\nfrom ctp_file\nwhere visibility is not null and file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    visual_review_instance_id = ? and series_instance_uid = ?\n)	{visual_review_instance_id,series_instance_uid}	{file_id}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
GetVisibleFilesBySeriesAndVisualReviewId	select\n  file_id\nfrom ctp_file\nwhere visibility is null and file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    visual_review_instance_id = ? and series_instance_uid = ?\n)	{visual_review_instance_id,series_instance_uid}	{file_id}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
CtSeriesWithCtImageInfoByCollection	select\n  distinct series_instance_uid, count(distinct file_id) as num_files\nfrom file_series natural join file_ct_image natural join ctp_file\nwhere kvp is not null and visibility is null and project_name = ? group by series_instance_uid	{collection}	{series_instance_uid,num_files}	{populate_posda_files,bills_test,ct_image_consistency}	posda_files	Get CT Series with CT Image Info by collection\n\n
GetFileIdVisibilityByPatientId	select distinct file_id, visibility\nfrom file_patient natural left join ctp_file\nwhere patient_id = ?	{patient_id}	{file_id,visibility}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
CtImageDataConsistencyAcrossSeries	select \n  distinct kvp, scan_options, data_collection_diameter, reconstruction_diameter,\n  dist_source_to_detect, dist_source_to_pat,gantry_tilt, table_height,\n  rotation_dir, exposure_time, exposure, filter_type, generator_power, convolution_kernal,\n  count(distinct file_id) as num_files\nfrom file_ct_image where file_id in (\n  select file_id from file_series natural join ctp_file where series_instance_uid = ?\n)\ngroup by\n  kvp, scan_options, data_collection_diameter, reconstruction_diameter,\n  dist_source_to_detect, dist_source_to_pat,gantry_tilt, table_height,\n  rotation_dir, exposure_time, exposure, filter_type, generator_power, convolution_kernal\n	{series_instance_uid}	{kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,table_height,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,num_files}	{populate_posda_files,ct_image_consistency}	posda_files	Get CT Series with CT Image Info by collection\n\n
GetFilesNotImportedInDicomFileCompare	select\n  count(*)\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and edit_command_file_id = ?\n      except\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and edit_command_file_id = ?\n\n    ) as foo\n  )\n  and edit_command_file_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{count}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get Files hidden but replacement not imported
CreateDicomEditCompareDisposition	insert into dicom_edit_compare_disposition(\n  subprocess_invocation_id, start_creation_time, current_disposition, process_pid, dest_dir\n)values (\n  ?, now(), 'Starting Up', ?, ?\n)	{subprocess_invocation_id,process_pid,dest_dir}	{}	{adding_ctp,for_scripting}	posda_files	Create an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
SimplePhiReportAllPrivateOnlyMetaQuote	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, \n  '<' || value || '>' as q_value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,disp,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
SimplePhiReportAllRelevantPrivateOnlyWithMetaQuotes	select \n  distinct '<' || element_sig_pattern || '>'  as element,\n  vr, '<' || value || '>' as q_value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na', 'o', 'h')\ngroup by element_sig_pattern, vr, value, description, disp\norder by vr, element	{scan_id}	{element,vr,q_value,description,disp,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
WhatHasComeInRecentlyWithSubjectByCollectionLike	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\nand collection like ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to,collection_like}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
SimplePhiReportAllPublicOnlyMetaQuote	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, '<' || value || '>' as q_value, tag_name as description, 'k' as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and not is_private\ngroup by element_sig_pattern, vr, value, val_length, description\norder by vr, element, val_length	{scan_id}	{element,vr,disp,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
DistinctSeriesByCollectionSiteIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	intake	Get Series in A Collection, Site\n
patient_id_and_collection_by_like_collection	select distinct project_name as collection, patient_id from file_patient natural join ctp_file where project_name like ? and visibility is null	{like_collection}	{collection,patient_id}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
PhiSimpleScanStatus	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id\n	{}	{id,start_time,end_time,duration,description,to_scan,scanned,phi_status}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
PatientStudySeriesHierarchyByCollectionSiteExtMore	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count (distinct file_id) as num_files,\n  min(import_time) as first_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_study natural join\n  ctp_file natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient join\n  file_import using(file_id) join\n  import_event using(import_event_id)\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files,first_loaded,last_loaded}	{Hierarchy,phi_simple,simple_phi}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
FinalizeDicomEditCompareDisposition	update dicom_edit_compare_disposition set\n  end_creation_time = now(),\n  current_disposition = 'Comparisons Complete'\nwhere\n  subprocess_invocation_id = ?\n	{subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition to indicate its done.\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
SeriesForPhi	select \n  series_instance_uid \nfrom \n  series_scan_instance\nwhere series_scan_instance_id in (\n  select series_scan_instance_id from (\n    select * from element_value_occurance \n    where\n      phi_scan_instance_id = ? and\n      element_seen_id in (\n        select element_seen_id from element_seen\n        where element_sig_pattern = ?\n      ) and \n      value_seen_id in (\n        select value_seen_id from value_seen\n        where value = ?\n      )\n  ) as foo\n)	{scan_id,element_sig_pattern,value}	{series_instance_uid}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
PatientStudySeriesHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_study natural join\n  ctp_file natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{Hierarchy,phi_simple,simple_phi}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
SimplePhiReportAllMetaQuotes	select \n  distinct '<' || element_sig_pattern || '>' as element, vr, \n  '<' || value || '>' as q_value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ?\ngroup by element_sig_pattern, vr, value, description\norder by vr, element\n	{scan_id}	{element,vr,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
UpdateDicomEditCompareDisposition	update dicom_edit_compare_disposition set\n  number_edits_scheduled = ?,\n  number_compares_with_diffs = ?,\n  number_compares_without_diffs = ?,\n  current_disposition = 'Comparisons In Progress',\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
LastNPhiScans	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id desc\n  limit ?\n	{n}	{id,start_time,end_time,duration,description,to_scan,scanned}	{tag_usage,simple_phi,phi_status}	posda_phi_simple	Status of PHI scans\n
PatientReport	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ?\n  and visibility is null\ngroup by \n  collection, site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{collection,site,patient_id}	{collection,site,patient_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
SummaryOfToFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file f, dicom_edit_compare dec \n  where\n    f.digest = dec.to_file_digest and dec.subprocess_invocation_id = ?\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, \n  series_instance_uid, dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{subprocess_invocation_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
PatientReportByPatientOnly	select\n  distinct project_name as collection,\n  site_name as site,\n  site_id,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  patient_id = ?\n  and visibility is null\ngroup by \n  collection, site, site_id,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{patient_id}	{collection,site,patient_id,site_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
SeriesWithMultipleDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 2\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetContourImageLinksByFileId	select\n  distinct roi_id,\n  linked_sop_instance_uid as sop_instance_uid,\n  linked_sop_class_uid as sop_class_uid,\n  contour_type,\n  count(distinct contour_digest) as num_contours,\n  sum(num_points) as num_points\nfrom\n file_roi_image_linkage\nwhere file_id = ?\ngroup by roi_id, linked_sop_instance_uid, linked_sop_class_uid, contour_type	{file_id}	{roi_id,sop_instance_uid,sop_class_uid,contour_type,num_contours,num_points}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
InsertVisibilityChange	insert into file_visibility_change(\n  file_id, user_name, time_of_change,\n  prior_visibility, new_visibility, reason_for\n)values(\n  ?, ?, now(),\n  ?, ?, ?\n)\n	{file_id,user_name,prior_visibility,new_visibility,reason}	{}	{ImageEdit,NotInteractive}	posda_files	Insert Image Visibility Change\n\n
PosdaTotalsHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility = 'hidden'\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Get totals of files hidden in Posda\n
ListOfAvailableQueries	select\n  schema, name, description,\n  array_to_string(tags, ',') as tags\nfrom queries\norder by name	{}	{schema,name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
IntakeImagesByCollectionSiteSubj	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.dicom_file_uri as FilePath,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ? and\n  p.patient_id = ?\n	{collection,site,patient_id}	{PID,Modality,SopInstance,FilePath}	{SymLink,intake}	intake	List of all Files Images By Collection, Site\n
FilesAndLoadTimesInSeries	select\n  distinct sop_instance_uid, file_id, import_time\nfrom\n  file_sop_common natural join file_series\n  natural join file_import natural join import_event\nwhere\n  series_instance_uid = ?\norder by \n  sop_instance_uid, import_time, file_id\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
GetRoiCountsBySeriesInstanceUid	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from file_sop_common natural join file_series\n  where series_instance_uid = ?\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
IntakeImagesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,SopInstance,ImageType,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Files Images By Collection, Site\n
InsertFilePosda	insert into file(\n  digest, size, processing_priority, ready_to_process\n) values ( ?, ?, 1, 'false')	{digest,size}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
SeriesWithDistinguishedDigests	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  ctp_file natural join\n  file_patient natural\n  join file_series natural\n  join file_sop_common\nwhere file_id in(\n  select file_id \n  from\n    file_image\n    join image using (image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  where digest in (\n    select distinct pixel_digest as digest \n    from distinguished_pixel_digests\n  )\n) group by collection, site, patient_id, series_instance_uid	{}	{collection,site,patient_id,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
EquivalenceClassStatusSummary	select \n  distinct patient_id, study_instance_uid, series_instance_uid,\n  processing_status, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image \n  natural join file_study natural join file_series natural join file_patient\ngroup by \n  patient_id, study_instance_uid, series_instance_uid, processing_status\norder by \n  patient_id, study_instance_uid, series_instance_uid, processing_status	{}	{patient_id,study_instance_uid,series_instance_uid,processing_status,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
SubjectsWithDuplicateSopsWithConflictingGeometricInfo	select distinct patient_id, study_instance_uid, series_instance_uid, count(*)\nfrom\n  file_patient natural join file_sop_common natural join file_series natural join file_study\nwhere sop_instance_uid in (\n  select sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n    select \n      distinct sop_instance_uid, iop as image_orientation_patient,\n      ipp as image_position_patient,\n      pixel_spacing,\n      pixel_rows as i_rows,\n      pixel_columns as i_columns\n    from\n      file_sop_common join \n      file_patient using (file_id) join\n      file_image using (file_id) join \n      file_series using (file_id) join\n      file_study using (file_id) join\n      image using (image_id) join\n      file_image_geometry using (file_id) join\n      image_geometry using (image_geometry_id) \n    ) as foo \n    group by sop_instance_uid\n  ) as foo where count > 1\n) group by patient_id, study_instance_uid, series_instance_uid	{}	{patient_id,study_instance_uid,series_instance_uid,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs with conflicting Geometric Information by Patient Id, study, series\n
PatientsWithNoCtpLike	select\n  distinct patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\nwhere\n  not exists (select file_id from ctp_file c where sc.file_id = c.file_id) and patient_id like ?\ngroup by patient_id;	{patient_match}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
SimplePhiReportPrivateOnlyByScanVrScreenDeletedPT	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ? and\n  is_private and\n  private_disposition in ('k', 'oi', 'h', 'o')\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
DistinctSopsInCollectionByStorageClass	select distinct sop_instance_uid, rel_path\nfrom\n  file_sop_common natural join file_location natural join file_storage_root\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_location natural join file_storage_root\n  where\n    project_name = ? and visibility is null and storage_class = ?\n) and current\norder by sop_instance_uid\n	{collection,storage_class}	{sop_instance_uid,rel_path}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
CollectionSiteWithDicomFileTypesNotProcessed	select \n  distinct project_name as collection, site_name as site, dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by project_name, site_name, dicom_file_type	{}	{collection,site,dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Collection, Site, Dicom File Types which have unprocessed DICOM files\n
CountsByCollectionSiteSubjectDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,subject,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
WhatHasComeInRecently	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history,for_bill_counts}	posda_backlog	A query to tell you what has been recently received:<ul>\n  <li>interval = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'sec'</li>\n  <li>from = start date/time (midnight if time not included)</li>\n  <li>to = end date/time (midnight if time not included)</li>\n</ul>
GetSimpleValueSeenId	select currval('value_seen_value_seen_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get index of newly created value_seen
PatientsWithEditedFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common\nwhere file_id in (\n  select \n    distinct file_id \n  from \n    file f natural join dicom_edit_compare dec\n  where\n    f.digest = dec.to_file_digest and subprocess_invocation_id in (\n      select distinct subprocess_invocation_id\n      from dicom_edit_compare_disposition\n      where current_disposition like 'Import Complete%'\n    )\n)\ngroup by collection, site, patient_id\norder by collection, site, patient_id	{}	{collection,site,patient_id,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
GetValueForTagAllScans	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ?\norder by value	{tag}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
DupSopsByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, sop_instance_uid\n\n	{collection,site,from,to}	{collection,site,subj_id,sop_instance_uid,num_files}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SendEventsByReason	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
SimplePhiScanStatusInProcess	select\n  phi_scan_instance_id as id,\n  start_time,\n  now() - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned,\n  (((now() - start_time) / num_series_scanned) * (num_series -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series as float)) * 100.0 as percentage,\n  file_query\nfrom\n  phi_scan_instance\nwhere\n   num_series > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,duration,to_scan,scanned,percentage,projected_completion,file_query}	{tag_usage,simple_phi,phi_status}	posda_phi_simple	Status of PHI scans\n
SeriesConsistencyExtended	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  count(*)\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join image_geometry using (image_id)\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, dicom_file_type, modality, series_number, laterality,\n  series_date, image_type, iop, pixel_rows, pixel_columns,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,dicom_file_type,modality,laterality,series_number,series_date,image_type,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,iop,pixel_rows,pixel_columns}	{by_series,consistency}	posda_files	Check a Series for Consistency (including Image Type)\n
GlobalUnhiddenSOPDuplicatesSummary	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid, min(import_time) as first_upload, max(import_time) as\n  last_upload, count(distinct file_id) as num_dup_sops,\n  count(*) as num_uploads from (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\nnatural join file_sop_common natural join file_series natural join file_study\nnatural join ctp_file natural join file_patient natural join file_import\nnatural join import_event\ngroup by project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid\norder by project_name, site_name, patient_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,num_dup_sops,num_uploads,first_upload,last_upload}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
SeriesInHierarchyBySeriesWithFileTypeModality	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  dicom_file natural join \n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by collection, site, patient_id, \n  study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
GetCountFilesToImportFromEdit	select\n  count(*) as num_files\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and subprocess_invocation_id = ?\n      intersect\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and subprocess_invocation_id = ?\n    ) as foo\n  )\n  and subprocess_invocation_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetSsVolume	select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n	{sop_instance_uid}	{for_uid,study_instance_uid,series_instance_uid,sop_class_uid,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
AllPixelInfo	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from ctp_file\n  where visibility is null\n)\n	{}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
TagsNotInAnyFilter	select\n  distinct tag\nfrom(\n  select unnest(tags) as tag\n  from queries\n) as tag_q\nwhere tag not in (select tag\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\n) 	{}	{tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
DifferenceReportByEditId	select\n  distinct short_report_file_id, long_report_file_id, count(distinct to_file_path) as num_files\nfrom dicom_edit_compare\nwhere subprocess_invocation_id =?\ngroup by short_report_file_id, long_report_file_id order by short_report_file_id	{subprocess_invocation_id}	{short_report_file_id,long_report_file_id,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
DistinctSeriesByCollectionSiteModality	select distinct series_instance_uid, dicom_file_type, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? and site_name = ? and modality = ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,modality}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
background_emails_by_date	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ? and name = 'Email' and when_invoked > ? and when_invoked < ?\norder by when_invoked desc	{invoking_user,from,to}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FromDigestToDigestFromDicomEditCompare	select \n  from_file_digest, to_file_digest\nfrom\n  dicom_edit_compare\nwhere\n  subprocess_invocation_id = ?	{subprocess_invocation_id}	{from_file_digest,to_file_digest}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
TotalsByDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{from,to}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{AllCollections,DateRange,Kirk,Totals,count_queries,end_of_month}	posda_files	Get posda totals by date range\n\n**WARNING:**  This query can run for a **LONG** time if you give it a large date range.\nIt is intended for short date ranges (i.e. "What came in last night?" or "What came in last month?")\n
DistinctSeriesBySubject	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and project_name = ? \n  and site_name = ? and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,count}	{by_subject,find_series}	posda_files	Get Series in A Collection, Site, Subject\n
SeriesListByCollectionSiteModalityVisualReviewStatus	select \n  distinct\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and\n  review_status = ?\n  and modality = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\n	{project_name,site_name,review_status,modality}	{dicom_file_type,modality,review_status,num_series,num_files,series_instance_uid}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
ReviewSummaryForCollection	select \n  distinct project_name as collection,\n  site_name as site,\n  dicom_file_type,\n  modality,\n  coalesce(visibility, 'visable') as visiblity,\n  review_status,\n  count(distinct series_instance_uid) as num_series \nfrom\n  image_equivalence_class natural join file_series\n  natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? \ngroup by project_name, site, dicom_file_type, modality, visibility, review_status;	{collection}	{collection,site,dicom_file_type,modality,visibility,review_status,num_series}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
ListOfPrivateElementsWithNullDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ? and private_disposition is null\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetHiddenToFiles	select \n  f.file_id as file_id,\n  c.visibility as visibility \nfrom\n  dicom_edit_compare dec,\n  file f,\n  ctp_file c\nwhere\n  dec.to_file_digest = f.digest and\n  f.file_id = c.file_id and \n  c.visibility is not null and\n  dec.subprocess_invocation_id = ?	{subprocess_invocation_id}	{file_id,visibility}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert edit_event\nFor use in scripts\nNot really intended for interactive use\n
GetCopyInformation	select\n  status_of_copy,\n  pid_of_running_process\nfrom\n  copy_from_public\nwhere copy_from_public_id = ?	{copy_from_public_id}	{status_of_copy,pid_of_running_process}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
DistinctSeriesByCollectionModality	select distinct series_instance_uid, patient_id, dicom_file_type, modality, count(distinct file_id) as num_files\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  project_name = ? and modality = ?\n  and visibility is null\ngroup by series_instance_uid, patient_id, dicom_file_type, modality	{collection,modality}	{series_instance_uid,patient_id,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy,edit_files}	posda_files	Get Series in A Collection\n
FindPotentialDistinguishedPixelDigests	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  digest as pixel_digest,\n  pixel_rows,\n  pixel_columns,\n  bits_allocated,\n  count(*)\nfrom\n  ctp_file\n  natural join file_patient\n  natural join file_series\n  natural join file_image\n  natural join dicom_file\n  join image using (image_id)\n  join unique_pixel_data using(unique_pixel_data_id)\nwhere\n  file_id in \n  (select \n    distinct file_id \n  from\n    file_image \n  where\n    image_id in\n    (select\n       image_id from \n       (select\n         distinct image_id, count(distinct file_id) \n       from\n         file_image \n       group by image_id\n       ) as foo\n     where count > 10\n  )\n) and visibility is null \ngroup by collection, site, patient_id, series_instance_uid,\nmodality, dicom_file_type,\ndigest, pixel_rows, pixel_columns, bits_allocated\norder by digest, collection, site, patient_id\n\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,pixel_digest,pixel_rows,pixel_columns,bits_allocated,count}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesInSeriesForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a series\n
SeriesVisualReviewResultsByCollectionSiteVisible	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
HiddenCountsByCollectionSiteDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select distinct file_id \n    from file_import natural join import_event natural join ctp_file\n    where import_time > ? and import_time < ?\n    and project_name = ? and site_name = ? and visibility = 'hidden')\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
CreateSubprocessInvocationSpreadsheet	insert into subprocess_invocation(\n from_spreadsheet, from_button,\n spreadsheet_uploaded_id, command_line, invoking_user, when_invoked\n) values (\n  true, false, ?, ?, ?, now()\n)	{spreadsheet_uploaded_id,command_line,invoking_user}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_invocation table\n\nUsed when invoking a spreadsheet operation from a spreadsheet
AllSubjectsWithNoStatus	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere\n  patient_id in (\n    select \n      distinct patient_id\n    from\n      file_patient p\n    where\n       not exists (\n         select\n           patient_id\n         from\n            patient_import_status s\n         where\n            p.patient_id = s.patient_id\n       )\n  ) \n  and visibility is null\ngroup by patient_id, project_name, site_name\norder by project_name, site_name, patient_id\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	All Subjects With No Patient Import Status\n
PatientStudySeriesFileHierarchyByCollectionIncludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
RoundCountsByCollection2DateRange	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end - round_start as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and round_start > ? and round_end < ?\norder by round_id, collection	{collection,from,to}	{round_id,collection,num_dups,round_created,round_start,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
InsertAdverseFileEvent	insert into adverse_file_event(\n  file_id, event_description, when_occured\n) values (?, ?, now())\n	{file_id,event_description}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert adverse_file_event row\nFor use in scripts\nNot really intended for interactive use\n
VisibilityChangeEventsByReasonFor	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere reason_for = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{reason_for}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
GetCountSsVolumeByPatientId	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid \n         from file_sop_common natural join file_patient\n         where patient_id = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{patient_id}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
PatientReportDateRange	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and\n  import_time > ? and\n  import_time < ? and\n  visibility is null\ngroup by \n  collection, site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{collection,site,patient_id,start_time,end_time}	{collection,site,patient_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
PixelDataIdByFileIdWithOtherFileId	select\n  distinct f.file_id as file_id, image_id, unique_pixel_data_id, \n  l.file_id as other_file_id\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location l using(unique_pixel_data_id)\nwhere\n  f.file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id,other_file_id}	{by_file_id,duplicates,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
SimplePhiReportAllPublicOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and not is_private\ngroup by element_sig_pattern, vr, value, val_length, description\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
AllPixelInfoByPhotometricInterp	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and photometric_interpretation = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
DupSopCountsByCSS	select\n  distinct sop_instance_uid, min, max, count\nfrom (\n  select\n    distinct sop_instance_uid, min(file_id),\n    max(file_id),count(*)\n  from (\n    select\n      distinct sop_instance_uid, file_id\n    from\n      file_sop_common \n    where sop_instance_uid in (\n      select\n        distinct sop_instance_uid\n      from\n        file_sop_common natural join ctp_file\n        natural join file_patient\n      where\n        project_name = ? and site_name = ? \n        and patient_id = ? and visibility is null\n    )\n  ) as foo natural join ctp_file\n  where visibility is null\n  group by sop_instance_uid\n)as foo where count > 1\n	{collection,site,subject}	{sop_instance_uid,min,max,count}	{}	posda_files	Counts of DuplicateSops By Collection, Site, Subject\n
PrivateTagsToBeDeleted	select distinct element_sig_pattern as tag from element_seen where is_private and private_disposition = 'd' order by element_sig_pattern;\n\n	{}	{tag}	{AllCollections,queries,phi_maint}	posda_phi_simple	Private tags to be deleted
SeriesWithDupSops	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n	{}	{collection,site,subj_id,count,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
CreateSimpleElementValueOccurance	insert into element_value_occurance(\nelement_seen_id, value_seen_id, series_scan_instance_id, phi_scan_instance_id\n)values(?, ?, ?, ?)	{element_seen_id,value_seen_id,series_scan_instance_id,scan_instance_id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new scanned value instance
GetDciodvfyWarningDubious	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'DubiousValue'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_value = ?\n  and warning_reason = ?	{warning_tag,warning_desc,warning_value,warning_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
IntakePatientsByCollectionSite	select\n  distinct p.patient_id as PID, count(distinct i.image_pk_id) as num_images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by PID\n	{collection,site}	{PID,num_images}	{intake}	intake	List of all Files Images By Collection, Site\n
RoiWithForAndFileIdByCollectionSite	select\n  distinct for_uid, roi_num, roi_name, file_id\nfrom\n  roi natural join file_structure_set natural join ctp_file\nwhere \n  project_name = ? and site_name = ? and visibility is null\norder by file_id, for_uid	{collection,site}	{for_uid,roi_num,roi_name,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
CountsByCollectionSiteDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
SeriesNotScheduledForVisualReviewByCollectionSiteSummary	select \n  distinct\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file\nwhere\n  file_id in (\n    select file_id from file_series\n    where series_instance_uid in\n    (\n       select distinct series_instance_uid\n       from file_series fs natural join ctp_file\n       where\n         project_name = ? and\n         site_name = ? and visibility is null\n         and not exists (\n           select series_instance_uid\n           from image_equivalence_class ie\n           where ie.series_instance_uid = fs.series_instance_uid\n         )\n    )\n  )\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get Series which have no image_equivalence class by collection, site
ToExamineRecentFiles	select \n  file_id, project_name as collection, site_name as site,\n  patient_id, series_instance_uid, dicom_file_type, modality\nfrom\n  ctp_file natural join file_patient natural join dicom_file natural join file_series where file_id in \n  (\n     select file_id from \n     (  \n        select \n           distinct file_id, min(import_time) as import_time \n        from \n          file_import natural join import_event \n        where file_id in \n        (\n          select \n            distinct file_id \n          from \n             ctp_file natural join file_import natural join import_event\n             natural join file_patient \n           where patient_id =? and import_time > ?\n         ) group by file_id\n      ) as foo\n      where import_time > ?\n  )	{patient_id,import_time_1,import_time_2}	{file_id,collection,site,patient_id,series_instance_uid,dicom_file_type,modality}	{meta,test,hello,query_tabs,bills_test}	posda_files	Files for a specific patient which were first received after a specific time
FindUnpopulatedPets	select\n  file_id, root_path || '/' || rel_path as file_path\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)	{}	{file_id,file_path}	{populate_posda_files,bills_test}	posda_files	Get's all files which are PET's which haven't been imported into file_pt_image yet.\n\n<bold>Don't run interactively</bold>
AllPatientDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  project_name is null and site_name is null and visibility is null\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients}	posda_files	Get Series in A Collection\n
SimplePublicPhiReportSelectedVrWithMetaquotes	select \n  distinct '<' || element_sig_pattern || '>' as element, vr, '<' || value || '>' as q_value, tag_name as description, \n  ' ' as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  not is_private and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element, vr, q_value, tag_name, disp\norder by vr, element, q_value	{scan_id}	{element,vr,q_value,description,disp,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
UpdateCopyFromPublic	update copy_from_public\n  set when_file_rows_populated = now(),\n  num_file_rows_populated = ?,\n  status_of_copy = ?\nwhere\n  copy_from_public_id = ?	{num_file_rows_populated,status_of_copy,copy_id}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
InsertIntoPatientMappingBaselineBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  diagnosis_date,\n  baseline_date) values (\n  ?, ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with batch, diagnosis_date, and baseline_date
FilesByReviewStatusByCollectionSiteWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  image_equivalence_class_input_image\n  join ctp_file using(file_id)\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  image_equivalence_class_id in (\n    select\n      image_equivalence_class_id \n    from\n      image_equivalence_class \n      join file_series using(series_instance_uid)\n      join ctp_file using(file_id)\n    where \n      project_name = ? and site_name = ?\n      and review_status = ?\n)	{collection,site,status}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
PatientStudySopCountByCollectionSite	select \n  distinct patient_id, study_instance_uid, \n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_patient natural join \n  file_study\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, study_instance_uid\norder by patient_id	{collection,site}	{patient_id,study_instance_uid,num_sops}	{counts,for_bill_counts}	posda_files	For every patient in collection site, get a list of studies with a count of distinct SOPs in each study
TotalsLike	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n         where\n           project_name like ? and visibility is null\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{pattern}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get Posda totals for with collection matching pattern\n
PixelInfoBySopInstance	select\n  f.file_id, root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration, modality\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\n  natural join file_series \nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n    select distinct file_id\n    from file_sop_common where sop_instance_uid = ?\n  )\n	{sop_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for a particular image id\n
PatientDetailsWithBlankCtp	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere\n  project_name = 'UNKNOWN' and visibility is null\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
DicomFileSummaryByImportEvent	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id as patient,\n  study_instance_uid as study,\n  series_instance_uid as series,\n  dicom_file_type as file_type,\n  modality,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  dicom_file natural left join\n  ctp_file\nwhere file_id in (\n  select distinct file_id from import_event natural join file_import where import_event_id = ?\n)\ngroup by collection, site, patient, study, series, file_type, modality\norder by collection, site, patient, series, file_type	{import_event_id}	{collection,site,patient,study,series,file_type,modality,num_sops,num_files}	{adding_ctp,for_scripting}	posda_files	A summary of DICOM files in a particular upload
DistinctSeriesByPatient	select distinct series_instance_uid, patient_id, count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  file_series natural join file_patient natural join file_sop_common\n  natural left join ctp_file\nwhere\n  patient_id = ? and visibility is null\ngroup by series_instance_uid, patient_id\n\n	{patient_id}	{series_instance_uid,patient_id,num_files,num_sops}	{find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy,series_selection,ctp_details}	posda_files	Get Series in for a patient\n
GetDupContourCounts	select \n  distinct file_id, count(*) as num_dup_contours\nfrom\n  file_roi_image_linkage \nwhere \n  contour_digest in (\n  select contour_digest\n  from (\n    select \n      distinct contour_digest, count(*)\n    from\n      file_roi_image_linkage group by contour_digest\n  ) as foo\n  where count > 1\n) group by file_id order by num_dup_contours desc	{}	{file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
VisiblePatientsWithCtp	select\n  distinct project_name as collection, site_name as site, patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\n  natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, site, patient_id	{}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,series_selection,ctp_patients,select_for_phi}	posda_files	Get List of visible patients with CTP data
GetPublicTagNameAndVrBySignature	select\n  name,\n  vr\nfrom dicom_element\nwhere tag = ?\n	{tag}	{name,vr}	{DispositionReport,NotInteractive,used_in_reconcile_tag_names}	dicom_dd	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
PixelTypesWithSlopeCT	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\n  natural join file_slope_intercept natural join slope_intercept\nwhere\n  modality = 'CT'\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\norder by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,modality,slope,intercept,count}	{}	posda_files	Get distinct pixel types\n
SummaryOfFromFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file f, dicom_edit_compare dec \n  where\n    f.digest = dec.from_file_digest and dec.subprocess_invocation_id = ?\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, series_instance_uid, \n  dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{subprocess_invocation_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
background_subprocesses_by_date	select \n  background_subprocess_id as bkgrnd_id, subprocess_invocation_id as invoc_id,\n  operation_name, command_line, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n  and when_script_ended is not null\n  and when_script_started > ? and when_script_started < ?\norder by when_script_started desc	{invoking_user,from,to}	{bkgrnd_id,invoc_id,operation_name,command_line,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
DuplicatePixelDataByProject	select image_id, file_id\nfrom file_image where image_id in (\n  select image_id\n  from (\n    select distinct image_id, count(*)\n    from (\n      select distinct image_id, file_id \n      from file_image\n      where file_id in (\n        select\n          distinct file_id \n        from ctp_file\n        where project_name = ? and visibility is null\n      )\n    ) as foo\n    group by image_id\n  ) as foo\n  where count > 1\n)\norder by image_id;\n	{collection}	{image_id,file_id}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data\n
GetListCollectionsWithNoDefinedCounts	select distinct collection\nfrom submitter s\nwhere collection not in (\n  select collection from collection_count_per_round c\n  where s.collection = c.collection\n)\n	{}	{collection}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get a list of all collections in backlog with no defined counts
GetUnreadInboxCount	select count(*) as count\nfrom user_inbox_content \nnatural join user_inbox \nwhere date_dismissed is null\n  and user_name = ?\n	{user_name}	{count}	{}	posda_queries	Get a count of unread messages from the user's inbox.
GetInboxItem	select\n\tcurrent_status,\n\tstatuts_note,\n\tdate_entered,\n\tdate_dismissed,\n\tfile_id\nfrom user_inbox_content\nnatural join background_subprocess_report\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{current_status,status_note,date_entered,date_dismissed,file_id}	{}	posda_queries	Get the details of a single Inbox item.
VisibilityChangeEventsByCollectionDateRangeForHiddenFilesWithSeries	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, series_instance_uid, count(*)\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and\n  visibility is not null and\n  time_of_change > ? and time_of_change < ?\ngroup by \n  collection, site, patient_id, user_name, prior_visibility, new_visibility,\n  time, reason_for, series_instance_uid\norder by time, collection, site, patient_id, series_instance_uid	{collection,from,to}	{collection,site,patient_id,user_name,prior_visibility,new_visibility,time,series_instance_uid,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
GetBackgroundReportFilename	select root_path || '/' || rel_path as filename\nfrom file\nnatural join file_location\nnatural join file_storage_root\nwhere file_id = ?\n	{file_id}	{filename}	{}	posda_files	Get the filename of a background report, by file_id
FilePathCountAndLoadTimesBySopInstance	select\n  distinct file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common\nwhere sop_instance_uid = ?\ngroup by file_id, path;	{sop_instance_uid}	{file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups}	posda_files	Get file path from id
RoundStatsWithCollectionForDateRange	select\n  distinct collection, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, time order by time desc, collection	{interval,from,to}	{collection,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
SeriesEquipmentByValueSignature	select\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\norder by value, element_signature, vr\n	{scan_id,value,tag_signature}	{series_instance_uid,value,vr,element_signature,equipment_signature}	{tag_usage}	posda_phi	List of series, values, vr seen in scan with equipment signature\n
DuplicatePixelDataThatMatters	select image_id, count from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1;\n	{collection}	{image_id,count}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
AllValuesByElementSig	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
InsertIntoPatientMappingIntBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift) values (\n  ?, ?, ?, ?, ?, ?, interval ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with batch and interval
VisibleColSiteWithCtp	select\n  distinct project_name as collection, site_name as site,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_series\n  natural join file_import natural join import_event\n  natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, site	{}	{collection,site,num_series,num_files}	{adding_ctp,find_patients,series_selection,ctp_col_site,select_for_phi}	posda_files	Get List of visible patients with CTP data
SeriesWithDupSopsByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site,from,to}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
AAA_import_test_query1	select '2492183' as file_id\nunion\nselect '4372774' as file_id\n	{}	{file_id}	{AllCollections,DateRange,Kirk,Totals,count_queries,end_of_month}	posda_files	Get posda totals by date range\n\n**WARNING:**  This query can run for a **LONG** time if you give it a large date range.\nIt is intended for short date ranges (i.e. "What came in last night?" or "What came in last month?")\n(Ignore this line, it is a test!)\n
SeriesVisualReviewResultsByCollectionSiteStatusNotGoodExtended	select\n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  series_modality as modality,\n  review_status,\n  num_files\nfrom (\nselect \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality as series_modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status != 'Good'\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\n) as foo\n  join file_series using (series_instance_uid)\n  join file_study using (file_id) \n  join file_patient using(file_id)\n  join ctp_file using(file_id)\nwhere\n  visibility is null\norder by patient_id, study_instance_uid, series_instance_uid\n	{project_name,site_name}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetAllInboxItems	select\n  user_inbox_content_id,\n  background_subprocess_report_id,\n  current_status,\n  date_entered\nfrom user_inbox_content \nnatural join user_inbox\nwhere user_name = ?\norder by date_entered desc\n	{user_name}	{user_inbox_content_id,background_subprocess_report_id,current_status,date_entered}	{}	posda_queries	Get a list of all messages from the user's inbox.
IntakeCountsOld	select\n        p.patient_id as PID,\n        i.image_type as ImageType,\n        s.modality as Modality,\n        count(i.sop_instance_uid) as Images,\n        t.study_date as StudyDate,\n        t.study_desc as StudyDescription,\n        s.series_desc as SeriesDescription,\n        s.series_number as SeriesNumber,\n        t.study_instance_uid as StudyInstanceUID,\n        s.series_instance_uid as SeriesInstanceUID,\n        q.manufacturer as Mfr,\n        q.manufacturer_model_name as Model,\n        q.software_versions,\n        c.reconstruction_diameter as ReconstructionDiameter,\n        c.kvp as KVP,\n        i.slice_thickness as SliceThickness\n     from\n        general_image i,\n        general_series s,\n        study t,\n        patient p,\n        trial_data_provenance tdp,\n        general_equipment q,\n        ct_image c\n     where\n        i.general_series_pk_id = s.general_series_pk_id and\n        s.study_pk_id = t.study_pk_id and\n        s.general_equipment_pk_id = q.general_equipment_pk_id and\n        t.patient_pk_id = p.patient_pk_id and\n        p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n        tdp.project = ? and\n        tdp.dp_site_name = ? and\n        c.image_pk_id = i.image_pk_id\n    group by p.patient_id, i.image_type, s.series_instance_uid, t.study_instance_uid\n	{collection,site}	{PID,Modality,Images,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,ImageType,ReconstructionDiameter,KVP,SliceThickness}	{intake}	intake	List of all Files Images By Collection, Site\n
WhichSeriesInCollectionSiteAreNotVisuallyReviewed	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n   series_instance_uid,\n  dicom_file_type,\n  modality,\n  'Not submitted for review' as review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series ser natural join\n  file_patient natural join  \n  ctp_file\nwhere\n  project_name = ? and\n  site_name = ?\n  and visibility is null\n  and not exists (\n    select * from image_equivalence_class iec\n    where iec.series_instance_uid = ser.series_instance_uid\n  )\ngroup by\n  collection, site, patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{collection,site}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
DismissInboxItem	\nupdate user_inbox_content\nset date_dismissed = now()\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{}	{}	posda_queries	Set the date_dismissed value on an Inbox item
SeriesSentToIntakeByDate	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,series_instance_uid,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Series Sent To Intake By Date\n
UploadCountsBetweenDatesByCollection	select distinct \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid,\n  count(*)\nfrom\n  ctp_file natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere file_id in (\n  select file_id\n  from\n    file_import natural join import_event\n    natural join ctp_file\n  where\n    import_time > ? and import_time < ? \n    and project_name = ?\n)\ngroup by\n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\n 	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{receive_reports}	posda_files	Counts of uploads received between dates for a collection\nOrganized by Subject, Study, Series, count of files_uploaded\n
DuplicateSOPInstanceUIDsGlobalWithHidden	select distinct collection, site, patient_id, count(*)\nfrom (\nselect \n  distinct collection, site, patient_id, sop_instance_uid, count(*)\n  as dups\nfrom (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\ngroup by collection, site, patient_id, sop_instance_uid\n) as foo where dups > 1\ngroup by collection, site, patient_id\norder by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{receive_reports}	posda_files	Return a report of duplicate SOP Instance UIDs ignoring visibility\n
SummaryOfToFilesForPatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file_patient natural left join ctp_file\n  where\n    patient_id  = ? and visibility is null\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, \n  series_instance_uid, dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{patient_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
PatientStudySeriesEquivalenceClassNoByProcessingStatus	select \n  distinct patient_id, study_instance_uid, series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image natural join\n  file_study natural join file_series natural join file_patient\nwhere\n  processing_status = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number\norder by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number	{processing_status}	{patient_id,study_instance_uid,series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
WindowLevelByPixelType	select \n  distinct window_width, window_center, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_win_lev natural join window_level\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by window_width, window_center\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{window_width,window_center,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
FindInconsistentSeriesByCollectionSite	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and site_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
GetUnreadInboxItems	select\n  user_inbox_content_id,\n  background_subprocess_report_id,\n  current_status,\n  date_entered\nfrom user_inbox_content \nnatural join user_inbox \nwhere date_dismissed is null\n  and user_name = ?\n	{user_name}	{user_inbox_content_id,background_subprocess_report_id,current_status,date_entered}	{}	posda_queries	Get a list of unread messages from the user's inbox.
SsWithClosedContoursWithNoLinkage	select \n  distinct project_name as collection,\n  site_name as site, patient_id, series_instance_uid, file_id\nfrom ctp_file natural join file_patient natural join file_series \nwhere project_name = ? and visibility is null\n  and file_id in (\n  select distinct file_id from file_structure_set where structure_set_id in (\n    select distinct structure_set_id from roi where roi_id in (\n      select distinct roi_id from roi_contour where roi_contour_id in (\n        select distinct roi_id from roi r where exists (\n          select * from roi_contour c where r.roi_id = c.roi_id and geometric_type = 'CLOSED_PLANAR') \n          and roi_id in (     \n            select distinct roi_id from roi r where not exists (\n              select * from file_roi_image_linkage l where l.roi_id = r.roi_id\n            )\n         )\n       )\n     )\n   )\n)	{collection}	{collection,site,patient_id,file_id,series_instance_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
PatientDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  patient_id = ?\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{patient_id}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details,ctp_details}	posda_files	Get Series in A Collection\n
GetDupsFromSimilarDupContourCounts	select distinct roi_id, count(*) from file_roi_image_linkage where\ncontour_digest in (select contour_digest from (select\n  distinct contour_digest, count(*) from\n(select\n  distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_class_uid,\n  file_id,\n  contour_digest\nfrom\n   ctp_file\n   natural join file_patient\n   natural join file_series\n   natural join file_sop_common\n  natural join file_roi_image_linkage\nwhere file_id in (\n  select distinct file_id from (\n    select \n      distinct file_id, count(*) as num_dup_contours\n    from\n      file_roi_image_linkage \n    where \n      contour_digest in (\n      select contour_digest\n     from (\n        select \n          distinct contour_digest, count(*)\n        from\n          file_roi_image_linkage group by contour_digest\n     ) as foo\n      where count > 1\n    ) group by file_id order by num_dup_contours desc\n  ) as foo\n  where num_dup_contours = ?\n)\n) as foo\ngroup by contour_digest)\nas foo where count > 1)\ngroup by roi_id order by count desc\n	{num_dup_contours}	{roi_id,count}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSimpleValuesByEleVr	select\n  distinct value\nfrom\n  element_seen\n  join element_value_occurance using(element_seen_id)\n  join value_seen using(value_seen_id)\nwhere element_sig_pattern = ? and vr = ?\n	{tag,vr}	{value}	{tag_values}	posda_phi_simple	Find Values for a given tag, vr in posda_phi_simple\n
DicomEditCompareDispositionStatus	select \n  subprocess_invocation_id as id, \n  current_disposition as status,\n  date_trunc('minute', start_creation_time) as started_at,\n  date_trunc('second', last_updated - start_creation_time) as run_time,\n  date_trunc('second', now() - last_updated) as since_update, \n  process_pid as pid,\n  number_edits_scheduled as total_edits,\n  number_edits_scheduled - (number_compares_with_diffs + number_compares_without_diffs) as remaining\nfrom\ndicom_edit_compare_disposition	{}	{id,status,started_at,run_time,since_update,pid,total_edits,remaining}	{adding_ctp,for_scripting}	posda_files	Status of entries in dicom_edit_comparison
HideFileWithNoCtp	insert into ctp_file(file_id, project_name, trial_name, site_name, visibility)\nvalues(?, 'UNKNOWN', 'UNKNOWN', 'UNKNOWN', 'hidden')	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file which currently has no ctp_file row\n\nInsert a ctp_file row with:\nproject_name = 'UNKNOWN'\nsite_name = 'UNKNOWN'\nvisibility = 'hidden'\n
DistinctSeriesByCollectionSiteBatch	select distinct series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_study natural join file_series natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and batch = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,batch}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
PhiScanStatusInProcess	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned,\n  (((now() - scan_started) / num_series_scanned) * (num_series_to_scan -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series_to_scan as float)) * 100.0 as percentage\nfrom\n  scan_event\nwhere\n   num_series_to_scan > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned,percentage,projected_completion}	{tag_usage,phi_review,scan_status}	posda_phi	Status of PHI scans\n
DupSopsByCollectionDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ?  and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, sop_instance_uid\n\n	{collection,from,to}	{collection,site,subj_id,sop_instance_uid,num_files}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
InsertIntoCollectionCodes	insert into collection_codes(collection_name, collection_code)\nvalues (?, ?)	{collection_name,collection_code}	{}	{adding_ctp,mapping_tables,for_scripting}	posda_files	Make an entry into the collection_codes table
TotalsByDateRangeAndCollection	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? and project_name = ?\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time,project_name}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{DateRange,Kirk,Totals,end_of_month}	posda_files	Get posda totals by date range\n
DuplicatesInDifferentSeriesByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetEditStatus	select\n  subprocess_invocation_id as id,\n  start_creation_time, end_creation_time - start_creation_time as duration,\n  number_edits_scheduled as to_edit,\n  number_compares_with_diffs as changed,\n  number_compares_without_diffs as not_changed,\n  current_disposition as disposition\nfrom\n  dicom_edit_compare_disposition\norder by start_creation_time desc	{}	{id,start_creation_time,duration,to_edit,changed,not_changed,disposition}	{adding_ctp,find_patients,series_selection,check_edits}	posda_files	Get List of visible patients with CTP data
PopulateFilePtImageRow	insert into file_pt_image(\n  file_id,\n  pti_trigger_time,\n  pti_frame_time,\n  pti_intervals_acquired,\n  pti_intervals_rejected,\n  pti_reconstruction_diameter,\n  pti_gantry_detector_tilt,\n  pti_table_height,\n  pti_fov_shape,\n  pti_fov_dimensions,\n  pti_collimator_type,\n  pti_convoution_kernal,\n  pti_actual_frame_duration,\n  pti_energy_range_lower_limit,\n  pti_energy_range_upper_limit,\n  pti_radiopharmaceutical,\n  pti_radiopharmaceutical_volume,\n  pti_radiopharmaceutical_start_time,\n  pti_radiopharmaceutical_stop_time,\n  pti_radionuclide_total_dose,\n  pti_radionuclide_half_life,\n  pti_radionuclide_positron_fraction,\n  pti_number_of_slices,\n  pti_number_of_time_slices,\n  pti_type_of_detector_motion,\n  pti_image_id,\n  pti_series_type,\n  pti_units,\n  pti_counts_source,\n  pti_reprojection_method,\n  pti_randoms_correction_method,\n  pti_attenuation_correction_method,\n  pti_decay_correction,\n  pti_reconstruction_method,\n  pti_detector_lines_of_response_used,\n  pti_scatter_correction_method,\n  pti_axial_mash,\n  pti_transverse_mash,\n  pti_coincidence_window_width,\n  pti_secondary_counts_type,\n  pti_frame_reference_time,\n  pti_primary_counts_accumulated,\n  pti_secondary_counts_accumulated,\n  pti_slice_sensitivity_factor,\n  pti_decay_factor,\n  pti_dose_calibration_factor,\n  pti_scatter_fraction_factor,\n  pti_dead_time_factor,\n  pti_image_index\n) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?\n)	{file_id,pti_trigger_time,pti_frame_time,pti_intervals_acquired,pti_intervals_rejected,pti_reconstruction_diameter,pti_gantry_detector_tilt,pti_table_height,pti_fov_shape,pti_fov_dimensions,pti_collimator_type,pti_convoution_kernal,pti_actual_frame_duration,pti_energy_range_lower_limit,pti_energy_range_upper_limit,pti_radiopharmaceutical,pti_radiopharmaceutical_volume,pti_radiopharmaceutical_start_time,pti_radiopharmaceutical_stop_time,pti_radionuclide_total_dose,pti_radionuclide_half_life,pti_radionuclide_positron_fraction,pti_number_of_slices,pti_number_of_time_slices,pti_type_of_detector_motion,pti_image_id,pti_series_type,pti_units,pti_counts_source,pti_reprojection_method,pti_randoms_correction_method,pti_attenuation_correction_method,pti_decay_correction,pti_reconstruction_method,pti_detector_lines_of_response_used,pti_scatter_correction_method,pti_axial_mash,pti_transverse_mash,pti_coincidence_window_width,pti_secondary_counts_type,pti_frame_reference_time,pti_primary_counts_accumulated,pti_secondary_counts_accumulated,pti_slice_sensitivity_factor,pti_decay_factor,pti_dose_calibration_factor,pti_scatter_fraction_factor,pti_dead_time_factor,pti_image_index}	{}	{populate_posda_files,bills_test}	posda_files	Get Series in A Collection\n
PosdaTotals	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility is null\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Produce total counts for all collections currently in Posda\n
GetGeometricInfo	select \n  distinct sop_instance_uid, iop as image_orientation_patient,\n  ipp as image_position_patient,\n  pixel_spacing,\n  pixel_rows as i_rows,\n  pixel_columns as i_columns\nfrom\n  file_sop_common join \n  file_patient using (file_id) join\n  file_image using (file_id) join \n  file_series using (file_id) join\n  file_study using (file_id) join\n  image using (image_id) join\n  file_image_geometry using (file_id) join\n  image_geometry using (image_geometry_id) \nwhere \n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	posda_files	Get Geometric Information by Sop Instance UID from posda
SubjectsWithDupSopsWithStudySeries	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, study_instance_uid, series_instance_uid\n      from\n        file_sop_common natural join file_series natural join file_study\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with conflicting study or series
GetNumPixDups	select distinct num_pix_dups, count(*) as num_pix_digs\nfrom (\nselect\n  distinct pixel_digest, count(*) as num_pix_dups\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest) as foo\ngroup by num_pix_dups\norder by num_pix_digs desc	{}	{num_pix_dups,num_pix_digs}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
GetDupContourCountsExtendedByCollection	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  file_id,\n  num_dup_contours\nfrom (\n  select \n    distinct file_id, count(*) as num_dup_contours\n  from\n    file_roi_image_linkage \n  where \n    contour_digest in (\n    select contour_digest\n    from (\n      select \n        distinct contour_digest, count(*)\n      from\n        file_roi_image_linkage group by contour_digest\n    ) as foo\n    where count > 1\n  ) group by file_id \n) foo join ctp_file using (file_id) join file_patient using(file_id)\nwhere project_name = ? and visibility is null\norder by num_dup_contours desc	{collection}	{collection,site,patient_id,file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetInfoForDupFilesByCollection	select\n  file_id, image_id, patient_id, study_instance_uid, series_instance_uid,\n   sop_instance_uid, modality\nfrom\n  file_patient natural join file_series natural join file_study\n  natural join file_sop_common natural join file_image\nwhere file_id in (\n  select file_id\n  from (\n    select image_id, file_id\n    from file_image\n    where image_id in (\n      select image_id\n      from (\n        select distinct image_id, count(*)\n        from (\n          select distinct image_id, file_id\n          from file_image\n          where file_id in (\n            select\n              distinct file_id\n              from ctp_file\n              where project_name = ? and visibility is null\n          )\n        ) as foo\n        group by image_id\n      ) as foo \n      where count > 1\n    )\n  ) as foo\n);\n	{collection}	{file_id,image_id,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality}	{}	posda_files	Get information related to duplicate files by collection\n
SeriesVisualReviewResultsByLikeCollectionSiteSummary	select \n  distinct\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name like  ? and\n  visibility is null\ngroup by\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\n	{project_name}	{dicom_file_type,modality,review_status,processing_status,num_series,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
ComplexDuplicatePixelDataNew	select distinct project_name as collection,\nsite_name as site,\npatient_id as patient,\nseries_instance_uid, count(distinct file_id) as num_files\nfrom\nctp_file natural join file_patient\nnatural join file_series where file_id in (\nselect file_id from \nfile_image join image using(image_id) \njoin unique_pixel_data using (unique_pixel_data_id)\nwhere digest in (\nselect distinct pixel_digest as digest from (\nselect\n  distinct pixel_digest, count(*) as num_pix_dups\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest) as foo\nwhere num_pix_dups = ?))\ngroup by collection, site, patient, series_instance_uid\norder by num_files desc	{num_pix_dups}	{collection,site,patient,series_instance_uid,num_files}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
InsertIntoPatientMappingIntNoBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  date_shift) values (\n  ?, ?, ?, ?, ?, interval ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with no batch and interval
PatientDetailsWithNoCtp	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n  patient_id = ?\n  and not exists (select file_id from ctp_file c where c.file_id = f.file_id)\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{patient_id}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
GetSeriesWithSignatureIntake	select\n  distinct  s.series_instance_uid,\n  concat(\n    COALESCE(e.manufacturer, ''), \n    '_',\n    COALESCE(e.manufacturer_model_name, ''),\n     '_',\n    COALESCE(e.software_versions, '') \n  ) as signature\nfrom\n  general_series s, general_equipment e\nwhere\n  s.general_equipment_pk_id = e.general_equipment_pk_id and\n  s.general_series_pk_id in (\n    select\n      distinct i.general_series_pk_id\n    from\n      general_image i, trial_data_provenance tdp\n    where\n      i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n      tdp.project = ? and tdp.dp_site_name = ?\n  )	{collection,site}	{series_instance_uid,signature}	{signature}	intake	Get a list of Series with Signatures by Collection Intake\n
GetSopListByCollectionSite	select \n  distinct project_name as collection, site_name as site,\n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid\nfrom\n  ctp_file natural join file_patient natural join\n  file_study natural join file_series natural join file_sop_common\nwhere\n  project_name = ? and site_name = ? and visibility is null;	{collection,site}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{bills_test,comparing_posda_to_public}	posda_files	Get a full list of sops with collection, site, patient, study_instance_uid and series_instance_uid\nby collection, site\n\n<bold>This may generate a large number of rows</bold>
InsertIntoPatientMappingBaselineNoBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  diagnosis_date,\n  baseline_date) values (\n  ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,diagnosis_date,baseline_date}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with no batch and diagnosis_date, and baseline_date
FindInconsistentSeriesWithSubjectAndStudy	select distinct patient_id, study_instance_uid, series_instance_uid\nfrom file_patient natural join file_study natural join file_series\nwhere series_instance_uid in (\nselect series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n)	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{consistency,find_series,for_bill_series_consistency}	posda_files	Find Inconsistent Series\n
GetExistenceClassModalityUniquenessOfReferencedFile	select\n  distinct file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  dicom_file_type as sop_class,\n  modality,\n  sop_class_uid,\n  series_instance_uid\nfrom\n  file_sop_common natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient natural join\n  ctp_file \nwhere\n  sop_instance_uid = ? and visibility is null	{sop_instance_uid}	{file_id,collection,site,patient_id,sop_class,modality,sop_class_uid,series_instance_uid}	{LinkageChecks,used_in_dose_linkage_check,used_in_plan_linkage_check}	posda_files	Get Information related to uniqueness, modality, sop_class of a file reference by Sop Instance
GetPatientMapping	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  diagnosis_date,\n  baseline_date,\n  date_shift,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom\n  patient_mapping\n  	{}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
FindInconsistentSeriesExtended	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    image_type, count(*)\n  from\n    file_series natural join ctp_file\n    left join file_image using(file_id)\n    left join image using(image_id)\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, image_type,\n    modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series Extended to include image type\n
CountsByCollectionSiteExcludingSeriesByDescription	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null and\n  series_description not like ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,series_description_exclusion_pattern}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
CountsByCollectionSiteDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
SeriesSendEventsByReason	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{series_instance_uid,send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
GetPatientMappingExperimental	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  '<' || diagnosis_date || '>' as diagnosis_date,\n  '<' || baseline_date || '>' as baseline_date,\n  '<' || date_trunc('year', diagnosis_date) || '>' as year_of_diagnosis,\n  baseline_date - diagnosis_date as computed_shift\nfrom\n  patient_mapping\n  	{}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,year_of_diagnosis,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
CountsByCollectionSiteSubject	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join dicom_file using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality,\n  study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  dicom_file_type, modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,patient_id}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site, Subject\n
PosdaTotalsWithDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
CountsByCollectionDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetCollectionCodes	select\n collection_name, collection_code\nfrom\n  collection_codes\n  	{}	{collection_name,collection_code}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
DifferentDupSopsReceivedBetweenDatesByCollection	select * from (\nselect\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n) as foo where num_sops != num_files\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
CountsByCollection	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection\n
ColSiteDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  project_name, site_name, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{collection,site}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,ctp_details}	posda_files	Get Series in A Collection\n
PotentialDuplicateSopSeriesByCollectionSite	select distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \ncount(distinct sop_instance_uid)\nfrom\n(select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,count}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
PixelTypesWithSOP	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type,\n  count(*)\nfrom\n  image natural join file_image natural join file_series natural join dicom_file\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,dicom_file_type,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
AllPatientDetailsWithNoCtp	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n not exists (select file_id from ctp_file c where c.file_id = f.file_id)\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
SopsDupsInDifferentSeriesByLikeCollection	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name like ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SeriesWithMultiplePatientIds	select\n  distinct series_instance_uid,\n  patient_id\nfrom\n  file_series natural join file_patient natural join ctp_file                                                      \nwhere series_instance_uid in (                                                                                                                                                        \n  select distinct series_instance_uid from (                                                                                                                                                                                    \n     select * from (\n        select distinct series_instance_uid, count(*) from (\n          select distinct series_instance_uid, patient_id\n          from file_series natural join file_patient natural join ctp_file\n          where project_name = ? and visibility is null\n        ) as foo group by series_instance_uid\n      ) as foo where count > 1\n   ) as foo\n) and\nvisibility is null	{collection}	{series_instance_uid,patient_id}	{by_study,consistency,series_consistency}	posda_files	Find Inconsistent Studies\n
InsertIntoSiteCodes	insert into site_codes(site_name, site_code)\nvalues (?, ?)	{site_name,site_code}	{}	{adding_ctp,mapping_tables,for_scripting}	posda_files	Make an entry into the site_codes table
\.


--
-- Data for Name: query_tabs; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.query_tabs (query_tab_name, query_tab_description, defines_dropdown, sort_order, defines_search_engine) FROM stdin;
count_check	for checking counts	t	10	f
curation	queries used in curation	t	20	f
scripting	queries used in scripts	t	50	f
db_admin	queries used for db_maintenance	t	30	f
legacy	compatable with old interface	t	90	f
bills_test_queries	Bills testing ground	t	100	f
Consistency	Consistency Checks	t	50	f
DicomValidation	DICOM validation (dciodvfy)	t	40	f
Finalize	Finalize, download, etc	t	60	f
PHI	used for PHI scans etc	t	30	f
Phi	Phi scanning and review operations	t	30	f
UploadedData	Operations on uploaded data	t	10	f
VisualReview	Visual review related operations	t	20	f
initial_upload	used in initial uploads of tar files	t	10	f
\.


--
-- Data for Name: query_tabs_query_tag_filter; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.query_tabs_query_tag_filter (query_tab_name, filter_name, sort_order) FROM stdin;
count_check	view_posda_backlog	1
count_check	downloads_by_date	2
count_check	counts_patient_status	3
curation	duplicate_sop_evaluation	1
curation	duplicate_sop_resolution	2
curation	linkage_check	3
curation	consistency_check	4
scripting	used_in	1
curation	phi_review	5
curation	dicom_batch_file_editing	6
curation	send_data_via_dicom	6
db_admin	db_stats	10
curation	visual_review_scheduling	7
scripting	for_popups	2
db_admin	db_config	20
curation	dciodvfy	8
bills_test_queries	under_development	1
legacy	.Unlimited	1
legacy	.Show No Tags	1
legacy	universal	3
bills_test_queries	old_queries	10
bills_test_queries	linkage	3
scripting	for_public_posda_compare	3
bills_test_queries	posda_db_populate	4
bills_test_queries	copy_from_public	5
bills_test_queries	comparing_public_to_posda	6
db_admin	postgres_stats	30
bills_test_queries	for_ct_evaluation	50
bills_test_queries	subprocess	60
bills_test_queries	non_dicom_editing	70
bills_test_queries	database_fixup	80
UploadedData	with_ctp_anonymization	10
UploadedData	without_ctp_anonymization	20
bills_test_queries	bills_ad_hoc_scripts	90
VisualReview	select_for_visual_review	20
VisualReview	visual_review_status	30
VisualReview	visual_review_reports	40
bills_test_queries	activities	100
\.


--
-- Data for Name: query_tag_filter; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.query_tag_filter (filter_name, tags_enabled) FROM stdin;
.Show No Tags	{}
.Unlimited	{}
for_popups	{universal,used_in_process_popup}
view_posda_backlog	{backlog_analysis_reporting_tools,backlog_round_history,backlog_status,universal}
review_roles	{universal,roles}
visual_review_tracking_processing	{visual_review_results,universal}
send_data_via_dicom	{universal,search_series,send_series,send_directory}
manage_posda_backlog	{universal,backlog_status,backlog}
downloads_by_date	{universal}
db_config	{query_tags,query_tabs,popups}
counts_patient_status	{universal,count_queries,patient_status,adding_ctp}
dciodvfy	{dciodvfy,universal}
duplicate_sop_evaluation	{universal,dup_sops,sops_different_series,series_report}
dicom_batch_file_editing	{hash_unhashed,hide_files,apply_disposition,universal,edit_files,show_hidden}
monthly_report_queries	{universal,end_of_month}
for_ct_evaluation	{ct_image_consistency}
linkage_check	{universal,plan_linkages,dose_linkages,struct_linkages,dose_linkages}
used_in	{universal,used_in_simple_phi,used_in_file_import_into_posda,used_in_import_edited_files,used_in_reconcile_tag_names,used_processing_structure_set_linkages,used_in_phi_maint,used_in_background_processing,used_in_dciodvfy,used_in_file_migration,used_in_linkage_check}
visual_review_scheduling	{universal,visual_review,visual_review_new_workflow}
for_public_posda_compare	{public_posda_counts}
linkage	{used_in_dose_linkage_check,used_in_plan_linkage_check,used_in_structure_linkage_check,old_linkage_checks,used_in_struct_linkage_check}
subprocess	{subprocess}
consistency_check	{series_consistency,study_consistency,universal,public_posda_consistency}
old_queries	{for_bill,for_bill_counts,for_bill_study_consistency,for_bill_series_consistency,old_visibility}
posda_db_populate	{posda_db_populate}
copy_from_public	{copy_from_public}
comparing_public_to_posda	{comparing_posda_to_public}
db_stats	{q_stats,q_stats_by_date,q_list,queries,query_tags,universal,schema}
phi_review	{universal,phi_schedule,simple_phi,phi_maint,meta_q_queries,scan_status}
duplicate_sop_resolution	{universal,dup_sops,hide_dup_sops,distinguished_digest}
with_ctp_anonymization	{ctp_patients,ctp_col_site,ctp_details,check_edits}
without_ctp_anonymization	{no_ctp_patients,no_ctp_details,patient_mapping,insert_pat_mapping}
phi_status	{phi_status}
select_for_phi	{select_for_phi}
series_for_phi	{series_selection}
phi_reports	{phi_reports}
find_patients	{find_patients,mapping_tables,for_scripting}
download_results	{patient_queries}
under_development	{universal,hide_events,bills_test,for_tracy,radcomp,non_dicom_phi,non_dicom_phi_status,non_dicom_edit}
non_dicom_editing	{non_dicom_edit,non_dicom_phi,non_dicom_phi_status,non_dicom_import,non_dicom_reject,radcomp}
database_fixup	{reimport_queries}
bills_ad_hoc_scripts	{bills_ad_hoc_scripts}
postgres_stats	{database_size,table_size,postgres_query_stats}
activities	{activities}
\.


--
-- Data for Name: role; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.role (role_name) FROM stdin;
legacy_bbennett
legacy_ksmith01
legacy_priorf
legacy_rddobbins
legacy_smberryman
legacy_tracyn
workflow_1
curator
\.


--
-- Data for Name: role_tabs; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.role_tabs (role_name, query_tab_name, sort_order) FROM stdin;
legacy_bbennett	UploadedData	10
legacy_bbennett	bills_test_queries	20
legacy_bbennett	count_check	30
legacy_bbennett	curation	40
legacy_bbennett	db_admin	50
legacy_bbennett	legacy	60
legacy_bbennett	scripting	70
legacy_ksmith01	bills_test_queries	10
legacy_ksmith01	count_check	20
legacy_ksmith01	curation	30
legacy_ksmith01	db_admin	40
legacy_ksmith01	legacy	50
legacy_ksmith01	scripting	60
legacy_priorf	count_check	10
legacy_priorf	curation	20
legacy_priorf	legacy	30
legacy_priorf	scripting	40
legacy_rddobbins	count_check	10
legacy_rddobbins	curation	20
legacy_rddobbins	db_admin	30
legacy_rddobbins	legacy	40
legacy_rddobbins	scripting	50
legacy_smberryman	curation	10
legacy_smberryman	legacy	20
legacy_tracyn	bills_test_queries	10
legacy_tracyn	count_check	20
legacy_tracyn	curation	30
legacy_tracyn	legacy	40
legacy_tracyn	scripting	50
curator	UploadedData	10
curator	VisualReview	20
curator	Phi	30
curator	Finalize	30
\.


--
-- Data for Name: spreadsheet_operation; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.spreadsheet_operation (operation_name, command_line, operation_type, input_line_format, tags) FROM stdin;
CompareDuplicateSops	CompareDupSopList.pl	legacy	<sop_instance_uid>	{dup_sops}
ScanPhi	PhiScan.pl <type> "<description>"	legacy	<series_instance_uid>, <signature>	{phi_review}
LinkDirectory	MakeLinkedDirectory.pl <target_dir>	legacy	<path>, <sop_instance_uid>	{send_series}
AddInitialStatus	PopulatePatStat.pl	legacy	<patient_id>, <status>	{patient_status}
ChangePatientStatus	UpdatePatStat.pl <who> "<why>"	legacy	<patient_id>, <old_status>, <new_status>	{patient_status}
SendSeriesToDestination	SendSetOfSeriesToDestination.pl <host> <port> <called> <calling> <user> "<reason>"	legacy	<series_instance_uid>	{send_series}
SeriesConsistency	CheckSeriesConsistency.pl <series_instance_uid>	legacy	\N	\N
StudyConsistency	CheckStudyConsistency.pl <study_instance_uid>	legacy	\N	\N
PatConsistency	CheckPatConsistency.pl "<collection>" <patient_id>	legacy	\N	\N
OnlyIn	OnlyIn.pl Posda Intake	legacy	<SeriesInPosda>, <SeriesInIntake>	\N
TestCommand	TestCommand.pl <host> <port> <called> <calling> <series_instance_uid>	legacy	\N	\N
PipeCommand1	PipeCommand1.pl <var1> <var2> 1 2 3	legacy	<vals1>,<vals2>,<vals3>	\N
SymLinkToIntake	SymLinkToIntake.pl /cache/bbennett/Symlinks	legacy	<PID>, <Modality>, <SopInstance>, <FilePath>	\N
UpdateKnowlegeBase	UpdateKnowledgeBase.pl <who> "<why>"	legacy	<Tag>^<VR>^<Disposition>^<NameChain>	\N
LinkFileHierarchy	LinkFileHierarchy.pl <Destination>	legacy	<patient_id>  <study_instance_uid> <series_instance_uid>	\N
CreatePublicDispositionTable	CreatePublicDispositionTable.pl <sop_class_uid> "<Description>" <who>	legacy	<Tag>^<VR>^<Disposition>^<NameChain>	\N
UpdateCollectionPrio	UpdateBacklogPriorities.pl	legacy	<collection>&<priority>	{backlog_status}
ApplyPublicPrivateDisposition	CsvApplyPublicAndPrivateDisposition.pl <dest_dir> <uid_root> <offset> <low_date> <high_date> <sop_class_uid> "<name>"	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	\N
ApplyPrivateDispositionIntake	CsvApplyPrivateDispositionIntake.pl <dest_dir> <uid_root> <offset> <low_date> <high_date>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	\N
ExtractZ	ExtractZ.pl	legacy	<file_id>&<unique_pixel_data_id>&<ipp>	\N
AddPublicHierarchy	AddHierarchyToSpreadsheetByPublicSop.pl <new_root>	legacy	<file>&<Element>&<OldValue>&<NewValue>	\N
ApplyHnsccEdits	ApplyHnsccEdits.pl	legacy	<new_file>&<element>&<new_value>	\N
CompareIntakeFilesToPublicFiles	CompareIntakeFilesToPublicFiles.pl <report_file> <notify>	legacy	<sop_instance_uid> <file_in_intake> <file_in_public>	{compare_collection_site}
CompareDuplicateSopFirstInSeries	CompareDupSopSeriesList.pl	legacy	<series_instance_uid>	{dup_sops}
BackgroundCompareDupSops	BackgroundCompareDupSopList.pl <file_name> "<notify>"	legacy	<sop_instance_uid>&<file_id>&<path>&<first_loaded>	{dup_sops}
BackgroundCompareDuplicateSopFirstInSeries	BackgroundCompareDupSopSeriesList.pl <file_name> "<notify>"	legacy	<series_instance_uid>	{dup_sops}
TdrAndPhiReports	PrepareTdrAndPhiReport.pl	legacy	<id>&<TdrReportFile>&<PhiReportFile>&<notify>	{phi_review}
EquivalenceClasses	BatchCreateSeriesEquivalenceClasses.pl <notify>	legacy	<series_instance_uid>	{visual_review}
BackgroundCompareSopsInMultipleSeries	BackgroundCompareSopsInMultipleSeries.pl <file_name> "<notify>"	legacy	<series_instance_uid>&<sop_instance_uid>&<file_id>&<file_path>	{sops_different_series}
BulkHashStructUids	BulkHashStructUids.pl <dir> <uid_root> <notify>	legacy	<sop_instance_uid>	{hash_unhashed}
BulkHashDoseLinks	BulkHashDoseLinks.pl <dir> <uid_root> <notify>	legacy	<sop_instance_uid>	{hash_unhashed}
ScanDirPhi	PhiDirScan.pl <dir> "<description>"	legacy		{phi_review}
UpdatePrivateDispositions	UpdatePrivateDisposition.pl <who> "<why>"	legacy	<element_signature>&<vr>&<disposition>	{phi_maint}
SimplePhiScan	PhiSimpleScan.pl "<description>" <file_query_name> <notify>	legacy	<series_instance_uid>	{simple_phi}
BackgroundDciodvfySeries	BackgroundDciodvfySeries.pl <?bkgrnd_id?> "<description>" <type> <notify>	background_process	<series_instance_uid>	{dciodvfy}
UpdateSimplePrivateDisposition	UpdateSimplePrivateDisposition.pl <who> "<why>"	legacy	<id>&<disp>	{phi_maint}
HideSeriesWithStatus	HideBatchSeriesWithStatus.pl <who> "<why>"	legacy	<series_instance_uid>	{hide_files,hide_dup_sops}
HideEarlyDupSopsInSeries	HideBatchEarlySopDupsInSeries.pl <who> "<why>"	legacy	<series_instance_uid>	{hide_files,hide_dup_sops}
BackgroundPhiScan	PhiBackgroundScan.pl <?bkgrnd_id?> "<description>" <file_query_name> <notify>	background_process	<series_instance_uid>	{background,simple_phi}
BackgroundCompareFromTo	BackgroundCompareFromToFiles.pl <?bkgrnd_id?> <notify>	background_process	<sop_instance_uid>&<from_file>&<to_file>	{dup_sops,edit_files}
ApplyPrivateDisposition	CsvApplyPrivateDisposition.pl <dest_dir> <uid_root> <offset> <low_date> <high_date>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	{send_series,apply_disposition}
MakeSelectedTagValueReport	MakeSelectedTagValueReport.pl /cache/UserData/DbIf/PreparedReports/<report_file_name> <notify>	legacy	<element_signature>&<vr>&<disposition>&<name_chain>&<num_phi_values>&<num_simple_phi_values>	{phi_maint}
MakeEditProposal	MakeEditProposal.pl <?bkgrnd_id?> <scan_id> <notify>	background_process	<element>&<vr>&<value>&<description>	{simple_phi}
BatchEditBySop	BatchEditDicomFile.pl <?bkgrnd_id?> /nas/public/posda/edited/<rel_dest_root> <who> "<edit_description>" <notify>	background_process	<command>&<arg1>&<arg2>&<arg3>&<arg4>	{edit_files}
FindSeriesInScanWithPhi	FindSeriesInScanWithPhi.pl <scan_id> "/nas/public/posda/cache/UserData/DbIf/PreparedReports/<report_name>" <notify>	legacy	<element>&<vr>&<value>&<description>	{simple_phi}
HideFilesWithStatus	HideFilesWithStatus.pl <who> "<why>"	legacy	<file_id>&<old_visibility>	{hide_files,hide_dup_sops}
UnHideFilesWithStatus	UnHideFilesWithStatus.pl <who> "<why>"	legacy	<file_id>&<old_visibility>	{hide_files,hide_dup_sops}
SplitPdxPilot	GeneratePdxEdits.pl <?bkgrnd_id?> <rel_dest_root> <notify>	background_process	<patient_id>&<new_patient_id>&<new_study_desc>&<new_series_desc>	{bills_test}
CheckCounts1	CompareCounts1.pl <?bkgrnd_id?> "<collection>" <uid_root> "<site>" "<notify>"	background_process	<id>&<study_instance_uid>&<series_instance_uid>&<num_files>	{bills_test}
BackgroundDoseLinkageCheck	BackgroundDoseLinkageCheck.pl <?bkgrnd_id?> <notify_email>	background_process	<file_id>&<collection>&<site>&<patient_id>&<series_instance_uid>	{background}
DciodvfySeriesReport	BackgroundDciodvfySeriesReport.pl <?bkgrnd_id?> "<description>" <scan_id> /cache/UserData/DbIf/PreparedReports/<report_file_name> <notify>	background_process	<series_instance_uid>	{dciodvfy}
CopyBySeriesToScratch	CopyBySeriesToScratch.pl <to_dir> <notify>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	{send_series,apply_disposition}
BackgroundPlanLinkageCheck	BackgroundPlanLinkageCheck.pl <?bkgrnd_id?> <notify_email>	background_process	<file_id>&<collection>&<site>&<patient_id>&<series_instance_uid>	{background}
CompareSpreadsheetToPosda	compare_spreadsheet_to_posda.py <?bkgrnd_id?> "<collection>" "<site>" "<notify>"	background_process	<filename>,<collection>,<site>,<patient>,<series>,<sop>,<md5sum>,<size>	{background}
SendPublicSeriesToDestination	SendPublicSetOfSeriesToDestination.pl <host> <port> <called> <calling>	legacy	<series_instance_uid>	{send_series}
CompareSpreadsheetToIntake	compare_spreadsheet_to_intake.py <?bkgrnd_id?> "<collection>" "<site>" "<notify>"	background_process	<filename>,<collection>,<site>,<patient>,<series>,<sop>,<md5sum>,<size>	{background}
BatchEditBySop2	BatchEditDicomFile2.pl <?bkgrnd_id?> /cache/UserData/DbIf/PreparedReports/<report_file> /nas/public/posda/edited/<rel_dest_root> <who> "<edit_description>" <notify>	background_process	<command>&<arg1>&<arg2>&<arg3>&<arg4>	{edit_files}
BackgroundStructLinkageCheck	BackgroundStructLinkageCheck.pl <?bkgrnd_id?> <notify_email>	background_process	<file_id>&<collection>&<site>&<patient_id>&<series_instance_uid>	{background}
BackgroundApplyPrivateDispositions	BackgroundApplyPrivateDispositions.pl <?bkgrnd_id?> <to_dir> <uid_root> <offset> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>	{edit,send_series}
SumPatients	SumPatients.pl <?bkgrnd_id?> "/cache/UserData/DbIf/PreparedReports/<report_file>" <notify>	background_process	<id>&<study>&<series>&<num_files>	{bills_test}
TestNewDicomCompare	TestNewDicomCompare.pl <?bkgrnd_id?> <edit_file_id> <notify>	background_process	<sop_instance_uid>&<from_file>&<to_file>	{bills_test}
CheckCounts	CompareCounts.pl <?bkgrnd_id?> "<collection>" "<site>" <notify>	background_process	<id>&<study>&<series>&<num_files>	{bills_test}
ImportEditedFiles	ImportEditedFiles.pl <?bkgrnd_id?> <report_file_id> "/cache/UserData/DbIf/PreparedReports/<import_report>" "<edit_comment>" <notify>	background_process	<sop_instance_uid>&<from_digest>&<to_file>&<to_digest>&<status>	{edit_files}
CheckCounts2	CompareCounts2.pl  <?bkgrnd_id?> "<collection>" <uid_root> "<site>" "<notify>"	background_process	<id>&<study_instance_uid>&<series_instance_uid>&<num_files>	{bills_test}
BackgroundEditBySop	BackgroundEditDicomFile.pl  <?bkgrnd_id?> /nas/public/posda/edited/<rel_dest_root> <who> "<edit_description>" <notify>	background_process	 <command>&<arg1>&<arg2>&<arg3>&<arg4>	{edit_files}
FixAcrinFiles	CsvFixAcrin.pl <?bkgrnd_id?> <to_dir> <uid_root> <low_date> <high_date> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>&<offset_pat_id>&<offset>	{bills_test}
CheckPublicMissingFilesInSeriesByCollection	CheckPublicMissingFilesInSeriesByCollection.pl <?bkgrnd_id?> "<collection>" <notify>	background_process	\N	{bills_test}
AnnotateCountsSpreadsheet	AnnotateCountsSpreadsheet.pl <?bkgrnd_id?> "<notify>"	background_process	<PID>|<ImageType>|<Modality>|<Images>|<StudyDate>|<StudyDescription>|<SeriesDescription>|<SeriesNumber>|<StudyInstanceUID>|<SeriesInstanceUID>|<Mfr>|<Model>|<software_versions>	{bills_test}
ImportFromDicomFileEdit	ImportEditedFilesFromDicomEditCompare.pl <?bkgrnd_id?> <sub_invoc_id> <files_per_round> <max_queue_size> <notify>	background_process	\N	{edit_files}
MakePatHierachy	GetHierarchyFromSeries.pl <?bkgrnd_id?> <notify>	background_process	<series_instance_uid>	{bills_test}
CopyCollectionToStaging	CopyCollectionToStaging.pl <?bkgrnd_id?> <collection> "/nas/public/posda/scratch/staging/<rel_dir>" <notify>	background_process	\N	{bills_test}
CheckStructLinkagesByCollectionSite	CheckStructLinkages.pl <?bkgrnd_id?> <collection> <site> <notify>	background_process	\N	{struct_linkages}
CheckPosdaPublicConsistency	PublicPosdaCompare.pl <?bkgrnd_id?> <collection>  <notify>	background_process	\N	{public_posda_consistency}
NewFixAcrinFiles	CsvNewFixAcrin.pl <?bkgrnd_id?> <to_dir> <uid_root> <low_date> <high_date> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>&<sop_instance_uid>&<file_id>&<offset_pat_id>&<offset>	{bills_test}
BackgroundPrivateDispositions	BackgroundPrivateDispositions.pl <?bkgrnd_id?> <to_dir> <uid_root> <offset> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>	{edit,send_series}
BackOutEdit	BackOutFromDicomEditCompare.pl <?bkgrnd_id?> <sub_invoc_id> <user> <notify>	background_process	\N	{edit_files}
PrepareAcrinEdits	PrepareAcrinEdits.pl <?bkgrnd_id?> <notify>	background_process	<ele_pattern>&<value>&<series_instance_uid>	{bills_test}
PhiPublicScan	PhiPublicScan.pl <?bkgrnd_id?> <collection> <site> <notify>	background_process	\N	{simple_phi}
QuickCheckPosdaPublicConsistency	QuickPublicPosdaCompare.pl <?bkgrnd_id?> "<collection>"  <notify>	background_process	\N	{public_posda_consistency}
NewerFixAcrinFiles	CsvNewerFixAcrin.pl <?bkgrnd_id?> <to_dir> <uid_root> <low_date> <high_date> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>&<offset_pat_id>&<offset>	{bills_test}
CountFilesInSeries	TotalFilesForSelectedSeries.pl <?bkgrnd_id?> <notify>	background_process	<series_instance_uid>	{bills_test}
FixCtpFileRow	FixCtpFileRow.pl <?bkgrnd_id?> <notify>	background_process	<file_id>&<file_path>	{bills_test}
BackgroundDoProposedEdits	BackgroundDoProposedEdits.pl <?bkgrnd_id?> /nas/public/posda/edited/<rel_dest_root> "<description>" <notify>	background_process	<unmapped_id>&<mapped_id>&<series_instance_uid>&<num_files>&<operations>&<tag>&<val1>&<val2>	{edit_files}
SetUpPublicToPosdaCopy	SetUpPublicToPosdaCopy.pl <?bkgrnd_id?> <collection> <notify> "<why_done>"	background_process	\N	{pubic_posda_consistency}
StartPublicToPosdaCopy	BackgroundPublicToPosdaCopy.pl <?bkgrnd_id?> <copy_id> "<why>" <notify>	background_process	\N	{pubic_posda_consistency}
MakeHierarcyBySeries	GetSeriesHierarchyBySeries.pl <?bkgrnd_id?> <notify>	background_process	<series_instance_uid>	{bills_test}
UnHideSeriesWithStatus	UnhideBatchSeriesWithStatus.pl <who> "<why>"	legacy	<series_instance_uid>	{hide_files}
DciodvfyReport	BackgroundDciodvfyReport.pl <?bkgrnd_id?> <scan_id> <notify>	background_process	\N	{dciodvfy}
StartFixPublicToPosdaCopy	BackgroundFixPublicToPosdaCopy.pl <?bkgrnd_id?> <copy_id> "<why>", <notify>	background_process	\N	{public_posda_consistency}
LookForDupSopsInPublicByCollectionSite	LookForPublicDupSops.pl <?bkgrnd_id?> "<collection>" "<site>" <notify>	background_process	\N	{comparing_posda_to_public}
BuildUidMap	BuildUidMap.pl <?bkgrnd_id?> <notify>	background_process	<unmapped_uid>	{bills_test}
BackgroundLinkSeriesToStaging	BackgroundLinkSeriesToStaging.pl <?bkgrnd_id?> /nas/public/posda/scratch/staging/<to_rel_dir> <notify>	background_process	<patient_id>&<study_instance_uid>&<series_instance_uid>	{send_series}
AnonymizerToEditor	AnonymizerToEditor.pl <?bkgrnd_id?> <notify>	background_process	<operation_scope>&<operation>&<tag>&<value1>&<value2>&<patient_id>&<study_instance_uid>&<series_instance_uid>&<unmapped_uid>&<mapped_uid>	{bills_test}
DeletePvtExceptCtp	DeletePrivateFromCollection.pl <?bkgrnd_id?> <collection> /nas/public/posda/scratch/converted/<rel_to_dir> <notify>	background_process	\N	{bills_test}
HidePatientWithStatus	HideBatchPatientWithStatus.pl <who> "<why>"	legacy	<patient_id>	{hide_files,hide_dup_sops}
MakeRtReport	MakeRtReport.pl <?bkgrnd_id?> <notify>	background_process	<patient_id>&<study_instance_uid>&<series_instance_uid>&<modality>&<num_files>	{bills_test}
MakeHierarchyBySeries	GetSeriesHierarchyBySeriesWithFileTypeAndModality.pl <?bkgrnd_id?> <notify>	background_process	<series_jnstance_uid>	{bills_test}
BackgroundOnlyEditDicomSeries	BackgroundOnlyEditDicomSeries.pl <?bkgrnd_id?> "/nas/public/posda/scratch/staging/<rel_dest_root>" "<desciption>" <notify>	background_process	<unmapped_uid>&<mapped_uid>&<series_instance_uid>&<operation>&<tag>&<val1>&<val2>	{bills_test}
BackgroundCopySeriesToStaging	BackgroundCopySeriesToStaging.pl <?bkgrnd_id?> /nas/public/posda/scratch/staging/<to_rel_dir> <notify>	background_process	<patient_id>&<study_instance_uid>&<series_instance_uid>	{send_series}
CheckCollectionAgainstPatientId	CheckCollectionAgainstPatientId.pl <?bkgrnd_id?> <notify>	background_process	<collection>&<patient_id>	{bills_test}
BackgroundLinkPublicSeries	BackgroundLinkPublicSeries.pl <?bkgrnd_id?> /nas/public/posda/scratch/staging/<to_rel_dir> <notify>	background_process	<patient_id>&<study_instance_uid>&<series_instance_uid>	{send_series}
BackgroundEdit	BackgroundEditor.pl <?bkgrnd_id?> "<description>" <notify>	background_process	<series_instance_uid>&<op>&<tag>&<val1>&<val2>	{edit}
CheckRtReferenceChain	CheckRtReferenceChain.pl <?bkgrnd_id?> <collection> <site> <notify>	background_process	\N	{struct_linkages}
MakeRtReport1	MakeRtReport1.pl <?bkgrnd_id?> <notify>	background_process	<collection>&<site>&<patient_id>&<study_uid>&<series_uid>&<file_type>&<modality>&<num_files>	{bills_test}
FirstPassPhiScanAndReport	FirstPassPhiScanAndReport.pl <?bkgrnd_id?> <collection> <site> "<batch_no>" <notify>	background_process	\N	{bills_test}
FirstPassPhiByCollection	FirstPassPhiByCollection.pl <?bkgrnd_id?> <collection> <notify>	background_process	\N	{bills_test}
FullPhiById	FullPhiById.pl <?bkgrnd_id?> <scan_id> <notify> <max_rows>\n	background_process	\N	{bills_test}
BackgroundCreateEquivalenceClasses	BackgroundCreateSeriesEquivalenceClasses.pl <?bkgrnd_id?> "<why>" <notify>	background_process	<series_instance_uid>	{visual_review}
ProcessVisualReview	ProcessVisualReview.pl <?bkgrnd_id?> <scan_id> <notify>	background_process	\N	{visual_review_new_workflow}
ProposeEdits	NewProposeEdits.pl <?bkgrnd_id?> <scan_id> <notify>	background_process	<element>&<vr>&<q_value>&<num_series>&<p_op>&<q_arg1>&<q_arg2>	{simple_phi}
RepealEdits	RepealEdits.pl <?bkgrnd_id?> <subprocess_invoc_id> <notify>	background_process	\N	{find_patients}
RejectEdits	RejectEdits.pl <?bkgrnd_id?> <subprocess_invoc_id> <notify>	background_process	\N	{find_patients}
ImportEdits	ImportEdits.pl <?bkgrnd_id?> <subprocess_invoc_id> <notify>	background_process	\N	{find_patients}
VisualReview	ScheduleVisualReview.pl <?bkgrnd_id?> <why> <notify>	background_process	<series_instance_uid>	{visual_review}
PhiScan	NewPhiScan.pl <?bkgrnd_id?> "<description>" <notify>	background_process	<series_instance_uid>	{new_phi}
InitialAnonymizerCommands	ProduceInitialAnonymizerCommands.pl <?bkgrnd_id?> <notify>	background_process	<series_instance_uid>&<patient_id>&<patient_name>	{initial_anonymization}
InsertPatientMapping	ProcessCollectionSiteWorksheet.pl <?bkgrnd_id?>	background_process	<site_code>&<collection_code>&<site_id>&<site_name>&<collection_name>	{mapping_tables}
LinkSeries	BackgroundLinkSeries.pl <?bkgrnd_id?> <notify>	background_process	<patient_id>&<study_instance_uid>&<series_instance_uid>	{patient_queries}
ProcessRADCOMPUpload	CategorizeRadcompFiles.pl <?bkgrnd_id?> <collection> <site> <notify>	background_process	<import_event_id>	{radcomp}
RadcompSubmissionConverter	RadcompSubmissionConverter.pl <?bkgrnd_id?> <notify>	background_process	<file_id>	{radcomp}
XlsConverter	XlsConverter.pl <?bkgrnd_id?> <notify>	background_process	<file_id>	{radcomp}
XlsxConverter	XlsxConverter.pl <?bkgrnd_id?> <notify>	background_process	<file_id>	{radcomp}
NonDicomPhiScan	NonDicomPhiScan.pl <?bkgrnd_id?> <collection> <site> <notify>	background_process	\N	{non_dicom_phi}
ProposeCsvEdits	ProposeCsvEdits.pl <?bkgrnd_id?> <scan_id> "<description>" <notify>	background_process	<type>&<path>&<q_value>&<num_files>&<p_op>&<q_arg1>&<q_arg2>&<q_arg3>	{non_dicom_edit}
ProposeJsonEdits	ProposeJsonEdits.pl <?bkgrnd_id?> <scan_id> "<description>" <notify>	background_process	<type>&<path>&<q_value>&<num_files>&<p_op>&<q_arg1>&<q_arg2>&<q_arg3>	{non_dicom_edit}
BackgroundCsvEdit	BackgroundCsvEditor.pl <?bkgrnd_id?> "<description>" <notify>	background_process	<file_id>&<op>&<path>&<val1>&<val2>&<val3>	{edit,non_dicom_edit}
BackgroundJsonEdit	BackgroundJsonEditor.pl <?bkgrnd_id?> "<description>" <notify>	background_process	<file_id>&<op>&<path>&<val1>&<val2>&<val3>	{edit,non_dicom_edit}
ImportPatientMapping	ImportPatientMapping.pl <?bkgrnd_id?>	background_process	<from_patient_id>&<to_patient_id>&<to_patient_name>&<collection_name>&<site_name>&<batch_number>&<date_shift>&<diagnosis_date>&<baseline_date>&<uid_root>	{bills_test,mapping_tables}
ImportNonDicomEdits	ImportNonDicomEditedFiles.pl <?bkgrnd_id?> <subprocess_invoc_id> <notify>	background_process	\N	{non_dicom_edit}
GenerateYearOfDiagnosisEdits	GenerateEditsForYearsOfDiagnosis.pl <?bkgrnd_id?> <notify>	background_process	<patient_id>&<year>	{bills_ad_hoc_scripts}
RadcompPrivateDisp	BackgroundPrivateDispositionsByPatShift.pl <?bkgrnd_id?> <to_dir> <uid_root> <notify>	background_process	<patient_id>&<study_uid>&<series_uid>&<offset>	{bills_test}
MakeHierarchyByPat	GetHierarchyFromPatientId.pl <?bkgrnd_id?> <notify>	background_process	<patient_id>	{bills_test}
ProposeAdHocMelanomaEdits	ProposeAdHocMelanomaEdits.pl <?bkgrnd_id?> <shift> <old_uid_root> <new_uid_root> <notify>	background_process	<patient_id>&<series_uid>&<study_date>&<num_files>&<pat_id_for_diag_date>&<diag_date>	{bills_test,bills_ad_hoc_scripts}
\.


--
-- Data for Name: tag_preparation; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.tag_preparation (tag_cannonical_name, preparation_description) FROM stdin;
StudyDate	Date
StudyTime	Timetag
PhysicianOfRecord	MultiText
PhysicianReadingStudy	MultiText
AdmittingDiagnosesDescription	MultiText
\.


--
-- Name: background_buttons_background_button_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.background_buttons_background_button_id_seq', 24, true);


--
-- Name: chained_query_chained_query_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.chained_query_chained_query_id_seq', 6, true);


--
-- Name: popup_buttons_popup_button_id_seq1; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.popup_buttons_popup_button_id_seq1', 54, true);


--
-- PostgreSQL database dump complete
--

