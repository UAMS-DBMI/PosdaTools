--
-- PostgreSQL database dump
--

-- Dumped from database version 8.4.20
-- Dumped by pg_dump version 9.6.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;
SET row_security = off;

SET search_path = db_version, pg_catalog;

--
-- Data for Name: version; Type: TABLE DATA; Schema: db_version; Owner: quasar
--

COPY version (version) FROM stdin;
3
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: popup_buttons; Type: TABLE DATA; Schema: public; Owner: quasar
--

COPY popup_buttons (popup_button_id, name, object_class, btn_col, is_full_table, btn_name) FROM stdin;
\.


--
-- Name: popup_buttons_popup_button_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quasar
--

SELECT pg_catalog.setval('popup_buttons_popup_button_id_seq', 1, false);


--
-- Data for Name: queries; Type: TABLE DATA; Schema: public; Owner: posda
--

COPY queries (name, query, args, columns, tags, schema, description) FROM stdin;
ActiveQueriesOld	select\n  datname as db_name, procpid as pid,\n  usesysid as user_id, usename as user,\n  waiting, now() - xact_start as since_xact_start,\n  now() - query_start as since_query_start,\n  now() - backend_start as since_back_end_start,\n  current_query\nfrom\n  pg_stat_activity\nwhere\n  datname = ?\n	{db_name}	{db_name,pid,user_id,user,waiting,since_xact_start,since_query_start,since_back_end_start,current_query}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 8.4.20 (Current Linux)\n
AllHiddenSubjects	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere patient_id in (\n    select distinct patient_id \n    from file_patient\n  except \n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n) group by patient_id, project_name, site_name\norder by project_name, site_name, patient_id;\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects}	posda_files	Find All Subjects which have only hidden files\n
AllPixelInfo	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from ctp_file\n  where visibility is null\n)\n	{}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByBitDepth	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and bits_allocated = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByModality	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_series \n  where visibility is null and modality = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByPhotometricInterp	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and photometric_interpretation = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
AllSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
DistinctSeriesBySubjectIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,intake}	intake	Get Series in A Collection, Site, Subject\n
AllSubjectsWithNoStatus	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere\n  patient_id in (\n    select \n      distinct patient_id\n    from\n      file_patient p\n    where\n       not exists (\n         select\n           patient_id\n         from\n            patient_import_status s\n         where\n            p.patient_id = s.patient_id\n       )\n  ) \n  and visibility is null\ngroup by patient_id, project_name, site_name\norder by project_name, site_name, patient_id\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	All Subjects With No Patient Import Status\n
AllValuesByElementSig	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
AllVisibleSubjects	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
AllVisibleSubjectsByCollection	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      project_name = ? and\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{collection}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
AllVrsByElementSig	select distinct vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by element_signature, vr, equipment_signature\norder by element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
AverageSecondsPerFile	select avg(seconds_per_file) from (\n  select (send_ended - send_started)/number_of_files as seconds_per_file \n  from dicom_send_event where send_ended is not null and number_of_files > 0\n  and send_started > ? and send_ended < ?\n) as foo\n	{from_date,to_date}	{avg}	{send_to_intake}	posda_files	Average Time to send a file between times\n
ComplexDuplicatePixelData	select \n  distinct project_name, site_name, patient_id, series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_patient natural join file_series \nwhere \n  file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count = ?\n    )\n    and visibility is null\n  ) \ngroup by project_name, site_name, patient_id, series_instance_uid\norder by count desc;\n	{count}	{project_name,site_name,patient_id,series_instance_uid,count}	{pix_data_dups}	posda_files	Find series with duplicate pixel count of <n>\n
CountsByCollection	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection\n
GetInsertedSendId	select currval('dicom_send_event_dicom_send_event_id_seq') as id\n	{}	{id}	{NotInteractive,SeriesSendEvent}	posda_files	Get dicom_send_event_id after creation\nFor use in scripts.\nNot meant for interactive use\n
CountsByCollectionSite	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
CountsByCollectionSiteSubject	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join dicom_file using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality,\n  study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  dicom_file_type, modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,patient_id}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site, Subject\n
CreateFileSend	insert into dicom_file_send(\n  dicom_send_event_id, file_path, status, file_id_sent\n) values (\n  ?, ?, ?, ?\n)\n	{id,path,status,file_id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Add a file send row\nFor use in scripts.\nNot meant for interactive use\n
DatabaseSize	SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20;\n	{}	{Name,Owner,Size}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 9.4.5 (Current Mac)\n
DatesOfUploadByCollectionSite	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event\n  natural join ctp_file\nwhere project_name = ? and site_name = ? \n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
DatesOfUploadByCollectionSiteVisible	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event natural join file_sop_common\n  natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
DiskSpaceByCollection	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  where project_name = ?\n  )\ngroup by project_name\n	{collection}	{collection,total_bytes}	{by_collection,posda_files,storage_used}	posda_files	Get disk space used by collection\n
DiskSpaceByCollectionSummary	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
DistinctSeriesBySubject	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and project_name = ? \n  and site_name = ? and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,count}	{by_subject,find_series}	posda_files	Get Series in A Collection, Site, Subject\n
GetPatientStatus	select\n  patient_import_status as status\nfrom\n  patient_import_status\nwhere\n  patient_id = ?\n	{patient_id}	{status}	{NotInteractive,PatientStatus,Update}	posda_files	Get Patient Status
DistinctSopsInCollection	select distinct sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file\n  where\n    project_name = ? and visibility is null\n)\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionByStorageClass	select distinct sop_instance_uid, rel_path\nfrom\n  file_sop_common natural join file_location natural join file_storage_root\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_location natural join file_storage_root\n  where\n    project_name = ? and visibility is null and storage_class = ?\n) and current\norder by sop_instance_uid\n	{collection,storage_class}	{sop_instance_uid,rel_path}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionIntake	select\n  distinct i.sop_instance_uid\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInSeries	select distinct sop_instance_uid, count(*)\nfrom file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{by_series_instance_uid,duplicates,posda_files,sops}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
DistinctUnhiddenFilesInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
DistinctValuesByTagWithFileCount	select distinct element_signature, value, count(*) as num_files\nfrom (\nselect\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n) as foo\ngroup by element_signature, value\n	{tag}	{element_signature,value,num_files}	{tag_usage}	posda_phi	Distinct values for a tag with file count\n
DupSopCountsByCSS	select\n  distinct sop_instance_uid, min, max, count\nfrom (\n  select\n    distinct sop_instance_uid, min(file_id),\n    max(file_id),count(*)\n  from (\n    select\n      distinct sop_instance_uid, file_id\n    from\n      file_sop_common \n    where sop_instance_uid in (\n      select\n        distinct sop_instance_uid\n      from\n        file_sop_common natural join ctp_file\n        natural join file_patient\n      where\n        project_name = ? and site_name = ? \n        and patient_id = ? and visibility is null\n    )\n  ) as foo natural join ctp_file\n  where visibility is null\n  group by sop_instance_uid\n)as foo where count > 1\n	{collection,site,subject}	{sop_instance_uid,min,max,count}	{}	posda_files	Counts of DuplicateSops By Collection, Site, Subject\n
DupSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
DupSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
GetPrivateTagFeaturesBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr,\n  pt_consensus_disposition as disposition\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr,disposition}	{DispositionReport,NotInteractive}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
CreateRound	insert into round(\n  round_created\n) values (\n  now()\n)\n	{}	{}	{NotInteractive,Backlog}	posda_backlog	Create a row in round table to record files_imported in this round
InsertFileLocation	insert into file_location(\n  file_id, file_storage_root_id, rel_path\n) values ( ?, ?, ?)	{file_id,file_storage_root_id,rel_path}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Lock the file table in posda_files
DuplicateDownloadsByCollection	select distinct patient_id, series_instance_uid, count(*)\nfrom file_series natural join file_patient\nwhere file_id in (\n  select file_id from (\n    select\n      distinct file_id, count(*)\n    from file_import\n    where file_id in (\n      select\n        distinct file_id\n      from \n        file_patient natural join ctp_file\n      where\n        project_name = ? \n        and site_name = ? and visibility is null\n    )\n    group by file_id\n  ) as foo\n  where count > 1\n)\ngroup by patient_id, series_instance_uid\norder by patient_id\n	{project_name,site_name}	{series_instance_uid,count}	{by_collection,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
DuplicateDownloadsBySubject	select count(*) from (\n  select\n    distinct file_id, count(*)\n  from file_import\n  where file_id in (\n    select\n      distinct file_id\n    from \n      file_patient natural join ctp_file\n    where\n      patient_id = ? and project_name = ? \n      and site_name = ? and visibility is null\n  )\n  group by file_id\n) as foo\nwhere count > 1\n	{subject_id,project_name,site_name}	{count}	{by_subject,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
DuplicatePixelDataByProject	select image_id, file_id\nfrom file_image where image_id in (\n  select image_id\n  from (\n    select distinct image_id, count(*)\n    from (\n      select distinct image_id, file_id \n      from file_image\n      where file_id in (\n        select\n          distinct file_id \n        from ctp_file\n        where project_name = ? and visibility is null\n      )\n    ) as foo\n    group by image_id\n  ) as foo\n  where count > 1\n)\norder by image_id;\n	{collection}	{image_id,file_id}	{}	posda_files	Return a list of files with duplicate pixel data\n
DuplicatePixelDataThatMatters	select image_id, count from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1;\n	{collection}	{image_id,count}	{}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
DuplicateSOPInstanceUIDs	select\n  sop_instance_uid, min(file_id) as first,\n  max(file_id) as last, count(*)\nfrom file_sop_common\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n      where project_name = ? and site_name = ? and patient_id = ?\n    ) as foo natural join ctp_file\n    where visibility is null\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by sop_instance_uid;\n	{collection,site,subject}	{sop_instance_uid,first,last,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
DuplicateSOPInstanceUIDsByCollectionWithoutHidden1	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo natural join ctp_file\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{receive_reports}	posda_files	Return a count of visible duplicate SOP Instance UIDs\n
DuplicateSOPInstanceUIDsGlobalWithHidden	select distinct collection, site, patient_id, count(*)\nfrom (\nselect \n  distinct collection, site, patient_id, sop_instance_uid, count(*)\n  as dups\nfrom (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\ngroup by collection, site, patient_id, sop_instance_uid\n) as foo where dups > 1\ngroup by collection, site, patient_id\norder by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{receive_reports}	posda_files	Return a report of duplicate SOP Instance UIDs ignoring visibility\n
StartTransactionPosda	begin\n	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Start a transaction in Posda files
DuplicateSOPInstanceUIDsGlobalWithoutHidden	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
DuplicateSopsInSeries	select\n  sop_instance_uid, import_time, file_id\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series\nwhere\n  series_instance_uid = ?\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\norder by sop_instance_uid, import_time\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
ElementScanIdByScanValueTag	select \n  distinct scan_element_id\nfrom\n  scan_element natural join element_signature\n  natural join series_scan natural join seen_value\n  natural join scan_event\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n	{scan_id,value,tag}	{scan_element_id}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
ElementsWithMultipleVRs	select element_signature, count from (\n  select element_signature, count(*)\n  from (\n    select\n      distinct element_signature, vr\n    from\n      scan_event natural join series_scan\n      natural join scan_element natural join element_signature\n      natural join equipment_signature\n    where\n      scan_event_id = ?\n  ) as foo\n  group by element_signature\n) as foo\nwhere count > 1\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	List of Elements with multiple VRs seen\n
EquipmentByPrivateTag	select distinct equipment_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere element_signature = ?\norder by equipment_signature;\n	{scan_id,element_signature}	{equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
EquipmentByValueSignature	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,value,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of equipment, values seen in scan by VR with count\n
FilesAndLoadTimesInSeries	select\n  distinct sop_instance_uid, file_id, import_time\nfrom\n  file_sop_common natural join file_series\n  natural join file_import natural join import_event\nwhere\n  series_instance_uid = ?\norder by \n  sop_instance_uid, import_time, file_id\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
StartRound	update round\n  set round_start = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
FilesByScanWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file, value\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesByTagWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n	{tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesInCollectionSiteForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{by_collection_site,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
WhereSopSitsPrivate	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	private	Get Collection, Patient, Study Hierarchy in which SOP resides\n
FilesInSeriesForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a series\n
FilesWithIndicesByElementScanId	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, sequence_level,\n  item_number\nfrom\n  series_scan natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_element_id = ?\n	{scan_element_id}	{series_instance_uid,file,element_signature,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FindInconsistentSeries	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
FindInconsistentSeriesExtended	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    image_type, count(*)\n  from\n    file_series natural join ctp_file\n    left join file_image using(file_id)\n    left join image using(image_id)\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, image_type,\n    modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series Extended to include image type\n
FindInconsistentStudy	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Inconsistent Studies\n
InsertFilePosda	insert into file(\n  digest, size, processing_priority, ready_to_process\n) values ( ?, ?, 1, 'false')	{digest,size}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Lock the file table in posda_files
FirstFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	First files uploaded by series\n
GetInfoForDupFilesByCollection	select\n  file_id, image_id, patient_id, study_instance_uid, series_instance_uid,\n   sop_instance_uid, modality\nfrom\n  file_patient natural join file_series natural join file_study\n  natural join file_sop_common natural join file_image\nwhere file_id in (\n  select file_id\n  from (\n    select image_id, file_id\n    from file_image\n    where image_id in (\n      select image_id\n      from (\n        select distinct image_id, count(*)\n        from (\n          select distinct image_id, file_id\n          from file_image\n          where file_id in (\n            select\n              distinct file_id\n              from ctp_file\n              where project_name = ? and visibility is null\n          )\n        ) as foo\n        group by image_id\n      ) as foo \n      where count > 1\n    )\n  ) as foo\n);\n	{collection}	{file_id,image_id,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality}	{}	posda_files	Get information related to duplicate files by collection\n
FirstFileInSeriesIntake	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,intake,UsedInPhiSeriesScan}	intake	First files in series in Intake\n
MarkFileAsInPosda	update request\nset\n  file_in_posda = true,\n  time_entered = now(),\n  posda_file_id = ?\nwhere\n  request_id = ?\n\n	{posda_file_id,request_id}	{}	{NotInteractive,Backlog}	posda_backlog	Update a request status to indicate file in Posda
EndTransactionPosda	commit\n	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	End a transaction in Posda files
GetPublicTagDispositionBySignature	select\n  disposition\nfrom public_tag_disposition\nwhere tag_name = ?\n	{signature}	{disposition}	{DispositionReport,NotInteractive}	posda_public_tag	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
GetSeriesSignature	select distinct\n  dicom_file_type, modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ?\ngroup by dicom_file_type, signature\n	{collection}	{dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series Signatures by Collection\n
GetSeriesWithSignature	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series with Signatures by Collection\n
GetSlopeIntercept	select\n  slope, intercept, si_units\nfrom\n  file_slope_intercept natural join slope_intercept\nwhere\n  file_id = ?\n	{file_id}	{slope,intercept,si_units}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
InsertVisibilityChange	insert into file_visibility_change(\n  file_id, user_name, time_of_change,\n  prior_visibility, new_visibility, reason_for\n)values(\n  ?, ?, now(),\n  ?, ?, ?\n)\n	{file_id,user_name,prior_visibility,new_visibility,reason}	{}	{ImageEdit,NotInteractive}	posda_files	Insert Image Visibility Change\n\n
GetWinLev	select\n  window_width, window_center, win_lev_desc, wl_index\nfrom\n  file_win_lev natural join window_level\nwhere\n  file_id = ?\norder by wl_index desc;\n	{file_id}	{window_width,window_center,win_lev_desc,wl_index}	{by_file_id,posda_files,window_level}	posda_files	Get a Window, Level(s) for a particular file \n
GlobalUnhiddenSOPDuplicatesSummary	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid, min(import_time) as first_upload, max(import_time) as\n  last_upload, count(distinct file_id) as num_dup_sops,\n  count(*) as num_uploads from (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\nnatural join file_sop_common natural join file_series natural join file_study\nnatural join ctp_file natural join file_patient natural join file_import\nnatural join import_event\ngroup by project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid\norder by project_name, site_name, patient_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,num_dup_sops,num_uploads,first_upload,last_upload}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
HideEarlyFilesCSP	update ctp_file set visibility = 'hidden' where file_id in (\n  select min as file_id\n  from (\n    select\n      distinct sop_instance_uid, min, max, count\n    from (\n      select\n        distinct sop_instance_uid, min(file_id),\n        max(file_id),count(*)\n      from (\n        select\n          distinct sop_instance_uid, file_id\n        from\n          file_sop_common \n        where sop_instance_uid in (\n          select\n            distinct sop_instance_uid\n          from\n            file_sop_common natural join ctp_file\n            natural join file_patient\n          where\n            project_name = ? and site_name = ? \n            and patient_id = ? and visibility is null\n        )\n      ) as foo natural join ctp_file\n      where visibility is null\n      group by sop_instance_uid\n    )as foo where count > 1\n  ) as foo\n);\n	{collection,site,subject}	\N	{}	posda_files	Hide earliest submission of a file:\n  Note:    uses sequencing of file_id to determine earliest\n           file, not import_time\n
HideSeriesNotLikeWithModality	update ctp_file set visibility = 'hidden'\nwhere file_id in (\n  select\n    file_id\n  from\n    file_series\n  where\n    series_instance_uid in (\n      select\n         distinct series_instance_uid\n      from (\n        select\n         distinct\n           file_id, series_instance_uid, series_description\n        from\n           ctp_file natural join file_series\n        where\n           modality = ? and project_name = ? and site_name = ?and \n           series_description not like ?\n      ) as foo\n    )\n  )\n	{modality,collection,site,description_not_matching}	\N	{Update,posda_files}	posda_files	Hide series not matching pattern by modality\n
ImageIdByFileId	select\n  distinct file_id, image_id\nfrom\n  file_image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id}	{by_file_id,image_id,posda_files}	posda_files	Get image_id for file_id \n
InsertInitialPatientStatus	insert into patient_import_status(\n  patient_id, patient_import_status\n) values (?, ?)\n	{patient_id,status}	\N	{Insert,NotInteractive,PatientStatus}	posda_files	Insert Initial Patient Status\nFor use in scripts\nNot really intended for interactive use\n
StudiesInCollectionSite	select\n  distinct study_instance_uid\nfrom\n  file_study natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{project_name,site_name}	{study_instance_uid}	{find_studies}	posda_files	Get Studies in A Collection, Site\n
InsertSendEvent	insert into dicom_send_event(\n  destination_host, destination_port,\n  called_ae, calling_ae,\n  send_started, invoking_user,\n  reason_for_send, number_of_files,\n  is_series_send, series_to_send\n)values(\n  ?, ?,\n  ?, ?,\n  now(), ?,\n  ?, ?,\n  true, ?\n)\n	{host,port,called,calling,who,why,num_files,series}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Create a DICOM Series Send Event\nFor use in scripts.\nNot meant for interactive use\n
IntakeFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{intake}	intake	List of all Series By Collection, Site on Intake\n
IntakeImagesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,SopInstance,ImageType,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Files Images By Collection, Site\n
IntakeImagesByCollectionSiteSubj	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.dicom_file_uri as FilePath,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ? and\n  p.patient_id = ?\n	{collection,site,patient_id}	{PID,Modality,SopInstance,FilePath}	{SymLink,intake}	intake	List of all Files Images By Collection, Site\n
IntakeSeriesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Series By Collection, Site on Intake\n
IntakeSeriesWithSignatureByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as series_instance_uid,\n  concat(q.manufacturer, ":", q.manufacturer_model_name, ":",\n  q.software_versions) as signature\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{series_instance_uid,Modality,signature}	{intake}	intake	List of all Series By Collection, Site on Intake\n
LastFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, max(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	Last files uploaded by series\n
NewSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
NewSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
AbortRound	update round\n  set round_aborted = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
NumEquipSigsForPrivateTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
NumEquipSigsForTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
PatientStatusChangeByCollection	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where project_name = ? and visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{collection}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
PatientStatusChangeByPatient	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id = ?\norder by when\n	{patient_id}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Patient Id\n
PatientStatusCounts	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, status\norder by collection, status\n	{}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
PatientStatusCountsByCollection	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere project_name = ? and visibility is null\ngroup by collection, status\n	{collection}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
PhiScanStatus	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned\nfrom \n  scan_event\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned}	{tag_usage}	posda_phi	Status of PHI scans\n
PhiScanStatusInProcess	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned,\n  (((now() - scan_started) / num_series_scanned) * (num_series_to_scan -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series_to_scan as float)) * 100.0 as percentage\nfrom\n  scan_event\nwhere\n   num_series_to_scan > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned,percentage,projected_completion}	{tag_usage}	posda_phi	Status of PHI scans\n
PixDupsByCollecton	select \n  distinct series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_series \nwhere \n  project_name = ? and visibility is null\n  and file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) \ngroup by series_instance_uid\norder by count desc;\n	{collection}	{series_instance_uid,count}	{pix_data_dups}	posda_files	Counts of duplicate pixel data in series by Collection\n
PixelDataIdByFileId	select\n  distinct file_id, image_id, unique_pixel_data_id\nfrom\n  file_image natural join image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id}	{by_file_id,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
PixelDataIdByFileIdWithOtherFileId	select\n  distinct f.file_id as file_id, image_id, unique_pixel_data_id, \n  l.file_id as other_file_id\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location l using(unique_pixel_data_id)\nwhere\n  f.file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id,other_file_id}	{by_file_id,duplicates,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
InsertEditEvent	insert into dicom_edit_event(\n  from_dicom_file, to_dicom_file, \n  edit_desc_file, when_done,\n  performing_user\n) values (\n  ?, ?,\n  ?, now(),\n  ?\n)\n\n	{from_file_id,to_file_id,edit_file_id,user}	{}	{ImageEdit,NotInteractive}	posda_files	Record Dicom Edits
GetRoundId	select  currval('round_round_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog}	posda_backlog	Get posda file id of created round row
PixelInfoByFileId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  f.file_id = ? and pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoByImageId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  image natural join unique_pixel_data natural join pixel_location\n  natural join file_location natural join file_storage_root\nwhere image_id = ?\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoBySeries	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from file_series natural join ctp_file\n  where series_instance_uid = ? and visibility is null\n)\n	{series_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for all files in a series\n
PixelInfoBySopInstance	select\n  f.file_id, root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration, modality\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\n  natural join file_series \nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n    select distinct file_id\n    from file_sop_common where sop_instance_uid = ?\n  )\n	{sop_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for a particular image id\n
RoundCountsByCollection	select \n  round_id, num_requests\nfrom round natural join round_counts\nwhere collection = ?	{collection}	{round_id,num_requests}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
PixelTypesWithGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get distinct pixel types with geometry\n
PixelTypesWithGeoRGB	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\nwhere\n  photometric_interpretation = 'RGB'\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
PixelTypesWithNoGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration\nfrom\n  image i where image_id not in (\n    select image_id from image_geometry g where g.image_id = i.image_id\n  )\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get pixel types with no geometry\n
PixelTypesWithSlopeCT	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\n  natural join file_slope_intercept natural join slope_intercept\nwhere\n  modality = 'CT'\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\norder by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,modality,slope,intercept,count}	{}	posda_files	Get distinct pixel types\n
GetVisibilityByFileId	select\n  file_id, visibility\nfrom\n   ctp_file\nwhere\n   file_id = ?\n	{file_id}	{file_id,visibility}	{ImageEdit,NotInteractive}	posda_files	Get Visibility for a file by file_id\n
HideFile	update\n  ctp_file\nset\n  visibility = 'hidden'\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
GetEditList	select * from dicom_edit_event	{}	{dicom_edit_event_id,from_dicom_file,to_dicom_file,edit_desc_file,when_done,performing_user}	{ImageEdit}	posda_files	Get list of dicom_edit_event
PosdaImagesByCollectionSite	select distinct\n  patient_id as "PID",\n  modality as "Modality",\n  sop_instance_uid as "SopInstance",\n  study_date as "StudyDate",\n  study_description as "StudyDescription",\n  series_description as "SeriesDescription",\n  study_instance_uid as "StudyInstanceUID",\n  series_instance_uid as "SeriesInstanceUID",\n  manufacturer as "Mfr",\n  manuf_model_name as "Model",\n  software_versions\nfrom\n  file_patient natural join file_series natural join\n  file_sop_common natural join file_study natural join\n  file_equipment natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n	{collection,site}	{PID,Modality,SopInstance,StudyDate,StudyDescription,SeriesDescription,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
PosdaTotals	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility is null\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Produce total counts for all collections currently in Posda\n
PosdaTotalsHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility = 'hidden'\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Get totals of files hidden in Posda\n
PosdaTotalsWithDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
PosdaTotalsWithDateRangeWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
PosdaTotalsWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get total posda files including hidden\n
PrivateTagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
PrivateTagsByEquipment	select distinct element_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere equipment_signature = ?\norder by element_signature;\n	{scan_id,equipment_signature}	{element_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
RecordPatientStatusChange	insert into patient_import_status_change(\n  patient_id, when_pat_stat_changed,\n  pat_stat_change_who, pat_stat_change_why,\n  old_pat_status, new_pat_status\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?\n)\n	{patient_id,who,why,old_status,new_status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Record a change to Patient Import Status\nFor use in scripts\nNot really intended for interactive use\n
SendEventSummary	select\n  reason_for_send, num_events, files_sent, earliest_send,\n  finished, finished - earliest_send as duration\nfrom (\n  select\n    distinct reason_for_send, count(*) as num_events, sum(number_of_files) as files_sent,\n    min(send_started) as earliest_send, max(send_ended) as finished\n  from dicom_send_event\n  group by reason_for_send\n  order by earliest_send\n) as foo\n	{}	{reason_for_send,num_events,files_sent,earliest_send,finished,duration}	{send_to_intake}	posda_files	Summary of SendEvents by Reason\n
SendEventsByReason	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
SentToIntakeByDate	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Files Sent To Intake By Date\n
SeriesByLikeDescriptionAndCollection	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and series_description like ?\n	{collection,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection matching Series Description\n
SeriesCollectionSite	select distinct\n  series_instance_uid\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{series_instance_uid}	{find_series}	posda_files	Get a list of Series by Collection, Site\n
SeriesConsistency	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments,\n  count(*)\nfrom\n  file_series natural join ctp_file\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,modality,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{by_series,consistency}	posda_files	Check a Series for Consistency\n
SeriesEquipmentByValueSignature	select\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\norder by value, element_signature, vr\n	{scan_id,value,tag_signature}	{series_instance_uid,value,vr,element_signature,equipment_signature}	{tag_usage}	posda_phi	List of series, values, vr seen in scan with equipment signature\n
SeriesLike	select\n   distinct collection, site, pat_id,\n   series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     project_name as collection, site_name as site,\n     file_id, series_instance_uid, patient_id as pat_id,\n     series_description\n  from\n     ctp_file natural join file_series natural join file_patient\n  where\n     project_name = ? and site_name = ? and \n     series_description like ?\n) as foo\ngroup by collection, site, pat_id, series_instance_uid, series_description\norder by collection, site, pat_id\n	{collection,site,description_matching}	{collection,site,pat_id,series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern\n
SeriesNickname	select\n  project_name, site_name, subj_id, series_nickname\nfrom\n  series_nickname\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{project_name,site_name,subj_id,series_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular series uid\n
SeriesNotLikeWithModality	select\n   distinct series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     file_id, series_instance_uid, series_description\n  from\n     ctp_file natural join file_series\n  where\n     modality = ? and project_name = ? and site_name = ? and \n     series_description not like ? and visibility is null\n) as foo\ngroup by series_instance_uid, series_description\n	{modality,collection,site,description_not_matching}	{series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern by modality\n
SeriesSentToIntakeByDate	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,series_instance_uid,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Series Sent To Intake By Date\n
SeriesWithDuplicatePixelDataThatMatters	select distinct series_instance_uid\nfrom file_series natural join file_image\nwhere image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n)\n	{collection}	{series_instance_uid}	{}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
SeriesWithRGB	select\n  distinct series_instance_uid\nfrom\n  image natural join file_image\n  natural join file_series\n  natural join ctp_file\nwhere\n  photometric_interpretation = 'RGB'\n  and visibility is null\n	{}	{series_instance_uid}	{find_series,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
SopNickname	select\n  project_name, site_name, subj_id, sop_nickname, modality,\n  has_modality_conflict\nfrom\n  sop_nickname\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{project_name,site_name,subj_id,sop_nickname,modality,has_modality_conflict}	{}	posda_nicknames	Get a nickname, etc for a particular SOP Instance  uid\n
GetPublicHierarchyBySopInstance	select\n  i.patient_id, s.study_instance_uid, s.series_instance_uid, modality, sop_instance_uid\nfrom \n  general_image i, general_series s where sop_instance_uid = ? and\n  s.general_series_pk_id = i.general_series_pk_id	{sop_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,modality,sop_instance_uid}	{Hierarchy}	public	Get Patient, Study, Series, Modality, Sop Instance by sop_instance from public database
GetPlansAndSSReferences	select sop_instance_uid as plan_referencing,\nss_referenced_from_plan as ss_referenced\nfrom plan natural join file_plan join file_sop_common using(file_id)	{}	{plan_referencing,ss_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan and ss sops where plan references ss\n\n
InsertRoundCounts	insert into round_counts(\n  round_id, collection,\n  num_requests, priority\n) values (\n  ?, ?,\n  ?, ?\n)\n	{round_id,collection,num_requests,priority}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_counts
StudyConsistency	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency}	posda_files	Check a Study for Consistency\n
StudyNickname	select\n  project_name, site_name, subj_id, study_nickname\nfrom\n  study_nickname\nwhere\n  study_instance_uid = ?\n	{study_instance_uid}	{project_name,site_name,subj_id,study_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular study uid\n
SubjectCountByCollectionSite	select\n  distinct\n    patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id \norder by\n  patient_id\n	{collection,site}	{patient_id,count}	{counts}	posda_files	Counts query by Collection, Site\n
SubjectsWithDupSops	select\n  distinct collection, site, subj_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{}	{collection,site,subj_id,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SubjectsWithDupSopsByCollection	select\n  distinct collection, site, subj_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection}	{collection,site,subj_id,count}	{}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SubjectsWithModalityByCollectionSite	select\n  distinct patient_id, count(*) as num_files\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere\n  modality = ? and project_name = ? and site_name = ?\ngroup by patient_id\norder by patient_id\n	{modality,project_name,site_name}	{patient_id,num_files}	{FindSubjects}	posda_files	Find All Subjects with given modality in Collection, Site\n
SubjectsWithModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, count(*) as num_files\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?\ngroup by patient_id, modality\n	{modality,project_name,site_name}	{patient_id,modality,num_files}	{FindSubjects,SymLink,intake}	intake	Find All Subjects with given modality in Collection, Site\n
TagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which tags\n
TestThisOne	select\n  patient_id, patient_import_status,\n  count(distinct file_id) as total_files,\n  min(import_time) min_time, max(import_time) as max_time,\n  count(distinct study_instance_uid) as num_studies,\n  count(distinct series_instance_uid) as num_series\nfrom\n  ctp_file natural join file natural join\n  file_import natural join import_event natural join\n  file_study natural join file_series natural join file_patient\n  natural join patient_import_status\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, patient_import_status\n	{project_name,site_name,PatientStatus}	{patient_id,patient_import_status,total_files,min_time,max_time,num_studies,num_series}	{}	posda_files	
TotalDiskSpace	select\n  sum(size) as total_bytes\nfrom\n  file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\n	{}	{total_bytes}	{all,posda_files,storage_used}	posda_files	Get total disk space used\n
ValuesWithVrTagAndCountLimited	select distinct vr, value, element_signature, num_files from (\n  select\n    distinct vr, value, element_signature, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and\n    vr not in (\n      'AE', 'AT', 'DS', 'FL', 'FD', 'IS', 'OD', 'OF', 'OL', 'OW',\n      'SL', 'SQ', 'SS', 'TM', 'UL', 'US'\n    )\n  group by value, element_signature, vr\n) as foo\norder by vr, value\n	{scan_id}	{vr,value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
VrsSeen	select distinct vr, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ?\n) as foo\ngroup by vr\norder by vr\n	{scan_id}	{vr,count}	{tag_usage}	posda_phi	List of VR's seen in scan (with count)\n
AddProcessCount	update round\n  set process_count = ?\nwhere\n  round_id = ?\n	{process_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set Process Count in round
TotalsByDateRangeAndCollection	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? and project_name = ?\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time,project_name}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{DateRange,Kirk,Totals}	posda_files	Get posda totals by date range\n
TotalsLike	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n         where\n           project_name like ? and visibility is null\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{pattern}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get Posda totals for with collection matching pattern\n
UnHideFilesCSP	update ctp_file set visibility = null where file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_patient\n  where\n    project_name = ? and site_name = ?\n    and visibility = 'hidden' and patient_id = ?\n);\n	{collection,site,subject}	\N	{}	posda_files	UnHide all files hidden by Collection, Site, Subject\n
GetReferencedButUnknownSsSops	select\n  sop_instance_uid, \n  ss_referenced_from_plan as ss_sop_instance_uid \nfrom \n  plan p natural join file_plan join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    p.ss_referenced_from_plan  = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,ss_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
UpdatePatientImportStatus	update patient_import_status set \n  patient_import_status = ?\nwhere patient_id = ?\n	{patient_id,status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Update Patient Status\nFor use in scripts\nNot really intended for interactive use\n
UpdateSendEvent	update dicom_send_event\n  set send_ended = now()\nwhere dicom_send_event_id = ?\n	{id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Update dicom_send_event_id after creation and completion of send\nFor use in scripts.\nNot meant for interactive use\n
ValuesByVr	select distinct value, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n) as foo\ngroup by value\norder by value\n	{scan_id,vr}	{value,count}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetGeometricInfoPublic	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	public	Get Geometric Information by Sop Instance UID from public
WhereSeriesSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
GetAllFilesAndDigests	select \n  received_file_path, file_digest\nfrom \n  request\n\n	{}	{received_file_path,digest}	{NotInteractive,Backlog}	posda_backlog	Get all files with digests in backlog
SeriesSendEventsByReason	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{series_instance_uid,send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
GetScanEventById	select * from scan_event where scan_event_id = ?\n	{scan_id}	{scan_event_id,scan_started,scan_ended,scan_status,scan_description,num_series_to_scan,num_series_scanned}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
FilesByModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, s.series_instance_uid, sop_instance_uid, dicom_file_uri\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,dicom_file_uri}	{FindSubjects,intake,FindFiles}	intake	Find All Files with given modality in Collection, Site on Intake\n
DiskSpaceByCollectionSiteSummary	select\n  distinct project_name as collection, site_name as site, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name, site_name\norder by total_bytes\n	{}	{collection,site,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections, sites\n
GetElementSignatureId	select currval('element_signature_element_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan,ElementDisposition}	posda_phi	Get current value of ElementSignatureId Sequence\n
GetScanEventId	select currval('series_scan_series_scan_id_seq') as id	{}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetEquipmentSignature	select * from equipment_signature where equipment_signature = ?\n	{equipment_signature}	{equipment_signature_id,equipment_signature}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Equipment Signature Id
CreateEquipmentSignature	insert into equipment_signature(equipment_signature)values(?)\n	{equipment_signature}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Equipment Signature Id
CreateSeenValue	insert into seen_value(value)values(?)	{value}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Seen Value
GetEquipmentSignatureId	select currval('equipment_signature_equipment_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of EquipmentSignatureId Sequence\n
GetSeenValue	select * from seen_value where value = ?\n	{value}	{seen_value_id,value}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Seen Value Id
GetSeenValueId	select currval('seen_value_seen_value_id_seq') as id	{}	{id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of seen_value_id sequence
CreateElementSignature	insert into element_signature(element_signature, vr, is_private) values(?, ?, ?)\n	{element_signature,vr,is_private}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Element Signature Id
GetElementSignature	select * from element_signature\n  where element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,is_private,vr}	{UsedInPhiSeriesScan,NotInteractive,ElementDisposition}	posda_phi	Get Element Signature By Signature (pattern) and VR
CreateTableSequenceIndex	insert into sequence_index(\n  scan_element_id, sequence_level, item_number\n) values (?, ?, ?)\n	{scan_element_id,sequence_level,item_number}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Table Sequence Id
UpdateSeriesScan	update series_scan\n  set series_scan_status = ?\nwhere series_scan_id = ?	{series_scan_status,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scan to set status\n
InsertIntoSeriesScan	insert into series_scan(\n  scan_event_id, equipment_signature_id, series_instance_uid,\n  series_scan_status, series_scanned_file\n) values (\n  ?, ?, ?, 'In Process', ?)	{scan_id,equipment_signature_id,series_instance_uid,series_scanned_file}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
CreateScanElement	insert into scan_element(\n  element_signature_id, seen_value_id, series_scan_id\n)values(\n  ?, ?, ?)\n	{element_signature_id,seen_value_id,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
GetScanElementId	select currval('scan_element_scan_element_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of ScanElementId Sequence\n
CreateScanEvent	insert into scan_event(\n  scan_started, scan_status, scan_description,\n  num_series_to_scan, num_series_scanned\n) values (\n  now(), 'In Process', ?,\n  ?, 0\n)\n\n	{description,num_series_to_scan}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
GetScanEventEventId	select currval('scan_event_scan_event_id_seq') as id\n	{}	{num_series_scanned,id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of scan_event_id
UpdateSeriesScanned	update scan_event\nset num_series_scanned = ?\nwhere scan_event_id = ?	{num_series_scanned,scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scanned in scan event\n
GetSeriesWithSignatureIntake	select\n  distinct  s.series_instance_uid,\n  concat(\n    COALESCE(e.manufacturer, ''), \n    '_',\n    COALESCE(e.manufacturer_model_name, ''),\n     '_',\n    COALESCE(e.software_versions, '') \n  ) as signature\nfrom\n  general_series s, general_equipment e\nwhere\n  s.general_equipment_pk_id = e.general_equipment_pk_id and\n  s.general_series_pk_id in (\n    select\n      distinct i.general_series_pk_id\n    from\n      general_image i, trial_data_provenance tdp\n    where\n      i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n      tdp.project = ? and tdp.dp_site_name = ?\n  )	{collection,site}	{series_instance_uid,signature}	{signature}	intake	Get a list of Series with Signatures by Collection Intake\n
FirstFileInSeriesPosda	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo)\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan}	posda_files	First files in series in Posda\n
UpdateSeriesFinished	update scan_event \nset scan_status = 'finished',\n  scan_ended = now()\nwhere scan_event_id = ?	{scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update status to finished in scan event\n
UpdateElementDisposition	update element_signature set \n  private_disposition = ?,\n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{private_disposition,name_chain,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
PrivateTagCountReport	select \n  distinct element_signature, vr, count(*) as times_seen,\n  count(distinct value) as num_distinct_values \nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr\norder by element_signature, vr, times_seen, num_distinct_values;\n	{}	{element_signature,vr,times_seen,num_distinct_values}	{postgres_status,PrivateTagKb}	posda_phi	Get List of all Private Tags ever scanned with occurance and distinct value counts
PrivateTagCountValueList	select \n  distinct element_signature, vr, value, private_disposition as disposition, count(*) as num_files\nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr, value, private_disposition\norder by element_signature, vr, value	{}	{vr,value,element_signature,num_files,disposition}	{postgres_status,PrivateTagKb,NotInteractive}	posda_phi	Get List of Private Tags with All Values\n
RecordElementDispositionChange	insert into element_signature_change(\n  element_signature_id, when_sig_changed,\n  who_changed_sig, why_sig_changed,\n  old_disposition, new_disposition,\n  old_name_chain, new_name_chain\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?,\n  ?, ?\n)\n	{element_signature_id,who_changed_sig,why_sig_changed,old_disposition,new_disposition,old_name_chain,new_name_chain}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Record a change to Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
GetElementDispositionVR	select\n  element_signature_id, element_signature, vr, private_disposition as disposition, name_chain\nfrom\n  element_signature\nwhere\n  element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
ListOfPrivateElementsWithDispositions	select\n  element_signature, vr , private_disposition as disposition, element_signature_id, name_chain\nfrom\n  element_signature\nwhere\n  is_private\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
ValuesWithVrTagAndCount	select\n    distinct vr, value, element_signature, private_disposition, count(*)  as num_files\nfrom\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\nwhere\n    scan_event_id = ?\ngroup by value, element_signature, vr, private_disposition\n	{scan_id}	{vr,value,element_signature,private_disposition,num_files}	{tag_usage,PrivateTagKb}	posda_phi	List of values seen in scan by VR (with count of elements)\n
UpdateCountsDb	insert into totals_by_collection_site(\n  count_report_id,\n  collection_name, site_name,\n  num_subjects, num_studies, num_series, num_sops\n) values (\n  currval('count_report_count_report_id_seq'),\n  ?, ?,\n  ?, ?, ?, ?\n)\n	{project_name,site_name,num_subjects,num_studies,num_series,num_files}	\N	{intake,posda_counts}	posda_counts	
DistinctSeriesByCollectionLikePatient	select distinct patient_id, series_instance_uid, modality, count(*)\nfrom (\nselect distinct patient_id, series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct patient_id, series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common natural join file_patient\n   natural join ctp_file\nwhere\n  project_name = ? and patient_id like ?\n  and visibility is null)\nas foo\ngroup by patient_id, series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by patient_id, series_instance_uid, modality\n	{project_name,patient_id_like}	{patient_id,series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
ListOfPrivateElementsValues	select\n  distinct value\nfrom\n  scan_element natural join seen_value\nwhere\n  element_signature_id = ?\norder by value\n	{element_signature_id}	{value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
DifferentDupSopsReceivedBetweenDatesByCollection	select * from (\nselect\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n) as foo where num_sops != num_files\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
GetRoiList	select \n   roi_id, roi_num ,roi_name\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{roi_id,roi_num,roi_name}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
GetPixelPaddingInfoByCollection	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join ctp_file natural join\n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT' and project_name = ? and visibility is null\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{collection}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
FirstFileInSeriesPublic	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan,public}	public	First files in series in Public\n
GetPixelPaddingInfo	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join \n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT'\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
ListOfPublicElementsWithDispositionsBySopClassName	select\n  element_signature, vr , disposition, name_chain\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ?\norder by element_signature\n	{sop_class_uid,name}	{element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Public Disposition of element by sig and VR for SOP Class and name
DistinctSeriesByCollectionPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,public}	public	Get Series in A Collection\n
UpdateCollectionBacklogPrio	update\n  collection_count_per_round\nset\n  file_count = ?\nwhere\n  collection = ?\n\n	{priority,collection}	{}	{NotInteractive,Backlog}	posda_backlog	Update the priority of a collection in a backlog 
ListOfPublicDispositionTables	select\n  distinct sop_class_uid, name, count(*)\nfrom\n  public_disposition\ngroup by\n  sop_class_uid, name\norder by\n  sop_class_uid, name	{}	{sop_class_uid,name,count}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Disposition Tables
GetElementByPublicDisposition	select\n  element_signature, disposition\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ? and\n  not is_private and disposition = ?\n	{sop_class_uid,name,disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Elements By Disposition, Sop Class, and name
DistinctSeriesByCollectionIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake}	intake	Get Series in A Collection\n
GetCurrentPosdaFileId	select  currval('file_file_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog}	posda_files	Get posda file id of created file row
UploadCountsBetweenDatesByCollection	select distinct \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid,\n  count(*)\nfrom\n  ctp_file natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere file_id in (\n  select file_id\n  from\n    file_import natural join import_event\n    natural join ctp_file\n  where\n    import_time > ? and import_time < ? \n    and project_name = ?\n)\ngroup by\n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\n 	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{receive_reports}	posda_files	Counts of uploads received between dates for a collection\nOrganized by Subject, Study, Series, count of files_uploaded\n
DistinctFilesByTagAndValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ? and value = ?\norder by series_instance_uid, file\n	{tag,value}	{series_instance_uid,file,element_signature}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
GetValueForTagAllScans	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ?\norder by value	{tag}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
FilesByModalityByCollectionSite	select\n  distinct patient_id, modality, series_instance_uid, sop_instance_uid, root_path || '/' || rel_path as path\nfrom\n  file_patient natural join file_series natural join file_sop_common natural join ctp_file\n  natural join file_location natural join file_storage_root\nwhere\n  modality = ? and\n  project_name = ? and \n  site_name = ? and\n  visibility is null	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,path}	{FindSubjects,intake,FindFiles}	posda_files	Find All Files with given modality in Collection, Site
GetElementByPrivateDisposition	select\n  element_signature, private_disposition as disposition\nfrom\n  element_signature\nwhere\n  is_private and private_disposition = ?\n	{private_disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Private Elements By Disposition
SubjectsWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
ValuesByVrWithTagAndCount	select distinct value, element_signature, private_disposition, num_files from (\n  select\n    distinct value, element_signature, private_disposition, vr, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n  group by value, element_signature, vr\n) as foo\norder by value\n	{scan_id,vr}	{value,element_signature,private_disposition,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
SeriesByNotLikeDescriptionAndCollectionSite	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere \n  project_name = ? and site_name = ? and \n  visibility is null and\n  series_description not like ?\n	{collection,site,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection, Site not matching Series Description\n
RelinquishControlPosdaImport	update import_control\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null	{}	{}	{NotInteractive,PosdaImport}	posda_files	relese control of posda_import
DistinctSeriesBySubjectPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,public}	public	Get Series in A Collection, Site, Subject\n
GetGeometricInfoIntake	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	intake	Get Geometric Information by Sop Instance UID from intake
PixelTypesWithRowsColumns	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_rows,pixel_columns,number_of_frames,pixel_representation,planar_configuration,modality,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
FindInconsistentSeriesByCollectionSite	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and site_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
PixelTypes	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
GetCountSsVolume	select count(distinct sop_instance_uid) as num_links from \n(select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n) as foo;	{sop_instance_uid}	{num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
SlopeInterceptByPixelType	select \n  distinct slope, intercept, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_slope_intercept natural join slope_intercept\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by slope, intercept\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{slope,intercept,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
GetRoiCounts	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\ngroup by sop_instance_uid\norder by count desc\n	{}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
WhereSopSitsPublic	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	public	Get Collection, Patient, Study Hierarchy in which SOP resides\n
SeriesWithDupSops	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n	{}	{collection,site,subj_id,count,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FindStudiesWithMatchingDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description = ?\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection,description}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
FindFilesInStudyWithDescriptionByStudyUID	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency}	posda_files	Find SopInstanceUID and Description for All Files In Study\n
WindowLevelByPixelType	select \n  distinct window_width, window_center, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_win_lev natural join window_level\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by window_width, window_center\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{window_width,window_center,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
FindStudiesWithNullDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
LockFilePosda	LOCK file in ACCESS EXCLUSIVE mode	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Lock the file table in posda_files
PatientStudySeriesHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
PatientStudySeriesFileHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
ListOfPrivateElementsWithDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ?\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
ListOfPrivateElementsWithNullDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ? and private_disposition is null\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
AllPublicSignaturesByScanId	select distinct element_signature as public_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\nwhere\n  scan_event_id = ? \n  and not is_private\norder by public_signature	{scan_id}	{public_signature}	{tag_usage}	posda_phi	List of non-private Element Signatures seen by Scan
GetSeriesFileCountsByPatientId	select\n  series_instance_uid, modality, dicom_file_type, count(distinct sop_instance_uid) as num_sops\nfrom\n  file_series natural join file_patient natural join \n  dicom_file natural join file_sop_common\nwhere\n  patient_id = ?\ngroup by series_instance_uid, modality, dicom_file_type\n	{patient_id}	{series_instance_uid,modality,dicom_file_type,num_sops}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Counts in file_series by patient_id\n\n
DistinctSeriesByCollectionExceptModality	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join ctp_file\nwhere\n  project_name = ? and modality != ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{project_name,modality}	{series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection with modality other than specified\n
SeriesConsistencyExtended	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  count(*)\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join image_geometry using (image_id)\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, dicom_file_type, modality, series_number, laterality,\n  series_date, image_type, iop, pixel_rows, pixel_columns,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,dicom_file_type,modality,laterality,series_number,series_date,image_type,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,iop,pixel_rows,pixel_columns}	{by_series,consistency}	posda_files	Check a Series for Consistency (including Image Type)\n
PrivateTagValuesWithVrTagAndCountWhereDispositionIsNull	select\n  distinct vr , value, element_signature, private_disposition, count(*) as num_files\nfrom\n  element_signature natural left join scan_element natural left join series_scan natural left join seen_value\nwhere\n  is_private and private_disposition is null\ngroup by\n  vr, value, element_signature, private_disposition\n	{}	{vr,value,element_signature,private_disposition,count}	{DispositionReport,NotInteractive}	posda_phi	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
ListOfPrivateElementsWithNullDispositions	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and private_disposition is null\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetSeriesWithSignatureByCollectionSite	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection,site}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series with Signatures by Collection\n
DicomFileTypesNotProcessed	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
DistinctSeriesByDicomFileType	select \n  distinct series_instance_uid, dicom_file_type, count(distinct file_id)\nfrom\n  file_series natural join dicom_file natural join ctp_file\nwhere\n  dicom_file_type = ? and\n  visibility is null  \ngroup by series_instance_uid, dicom_file_type	{dicom_file_type}	{series_instance_uid,dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Distinct Series By Dicom File Type\n
DicomFileTypesNotProcessedAll	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d\nwhere\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
FilesInSeriesForApplicationOfPrivateDispositionIntake	select\n  i.dicom_file_uri as path, i.sop_instance_uid, s.modality\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.series_instance_uid = ?	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,intake}	intake	Get path, sop_instance_uid, and modality for all files in a series\n
MakePosdaFileReadyToProcess	update file\n  set ready_to_process = true\nwhere file_id = ?	{file_id}	{}	{NotInteractive,Backlog}	posda_files	Lock the file table in posda_files
AddWaitCount	update round\n  set wait_count = ?\nwhere\n  round_id = ?\n	{wait_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set wait_count in round
IntakeCountsOld	select\n        p.patient_id as PID,\n        i.image_type as ImageType,\n        s.modality as Modality,\n        count(i.sop_instance_uid) as Images,\n        t.study_date as StudyDate,\n        t.study_desc as StudyDescription,\n        s.series_desc as SeriesDescription,\n        s.series_number as SeriesNumber,\n        t.study_instance_uid as StudyInstanceUID,\n        s.series_instance_uid as SeriesInstanceUID,\n        q.manufacturer as Mfr,\n        q.manufacturer_model_name as Model,\n        q.software_versions,\n        c.reconstruction_diameter as ReconstructionDiameter,\n        c.kvp as KVP,\n        i.slice_thickness as SliceThickness\n     from\n        general_image i,\n        general_series s,\n        study t,\n        patient p,\n        trial_data_provenance tdp,\n        general_equipment q,\n        ct_image c\n     where\n        i.general_series_pk_id = s.general_series_pk_id and\n        s.study_pk_id = t.study_pk_id and\n        s.general_equipment_pk_id = q.general_equipment_pk_id and\n        t.patient_pk_id = p.patient_pk_id and\n        p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n        tdp.project = ? and\n        tdp.dp_site_name = ? and\n        c.image_pk_id = i.image_pk_id\n    group by p.patient_id, i.image_type, s.series_instance_uid, t.study_instance_uid\n	{collection,site}	{PID,Modality,Images,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,ImageType,ReconstructionDiameter,KVP,SliceThickness}	{intake}	intake	List of all Files Images By Collection, Site\n
FilesInSeriesForApplyingPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, sop_instance_uid, \n  modality\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_sop_common natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{SeriesSendEvent,by_series,find_files,ApplyDisposition}	posda_files	Get Sop Instance UID, file_path, modality for all files in a series
FilesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid\nfrom\n  file_location natural join file_storage_root natural join file_patient\n  natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\n  \nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{by_collection_site,find_files}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
FilesInSeriesForApplicationOfPrivateDisposition	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_sop_common\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
DicomFileTypes	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file natural join ctp_file\nwhere\n  visibility is null  \ngroup by dicom_file_type\norder by count desc	{}	{dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Dicom File Types with count of files in Posda\n
SeriesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct \n  patient_id, study_instance_uid, series_instance_uid\nfrom\n  file_patient natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\nwhere\n  collection = ? and site = ? and visibility is null\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{by_collection_site,find_files}	posda_files	Get a patient, study, series hierarchy by collection, site
PatientStudySeriesHierarchyByCollectionNotMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
PatientStudySeriesFileHierarchyByCollectionExcludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
CollectionSiteWithDicomFileTypesNotProcessed	select \n  distinct project_name as collection, site_name as site, dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by project_name, site_name, dicom_file_type	{}	{collection,site,dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Collection, Site, Dicom File Types which have unprocessed DICOM files\n
CloseRound	update round\n  set round_end = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
ForConstructingSeriesEquivalenceClasses	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  file_id\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join image_geometry using (image_id)\nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{series_instance_uid,modality,series_number,laterality,series_date,dicom_file_type,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_desc,performed_procedure_step_comments,image_type,iop,pixel_rows,pixel_columns,file_id}	{consistency,find_series,equivalence_classes}	posda_files	For building series equivalence classes
CreateEquivalenceClass	insert into image_equivalence_class(\n  series_instance_uid, equivalence_class_number,\n  processing_status\n) values (\n  ?, ?, 'Preparing'\n)\n	{series_instance_uid,equivalence_class_number}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
GetEquivalenceClassId	select currval('image_equivalence_class_image_equivalence_class_id_seq') as id	{}	{id}	{NotInteractive,equivalence_classes}	posda_files	Get current value of EquivalenceClassId Sequence\n
CreateEquivalenceInputClass	insert into image_equivalence_class_input_image(\n  image_equivalence_class_id,  file_id\n) values (\n  ?, ?\n)\n	{image_equivlence_class_id,file_id}	{}	{consistency,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
UpdateEquivalenceClassProcessingStatus	update image_equivalence_class\nset processing_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
UpdateEquivalenceClassReviewStatus	update image_equivalence_class\nset review_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
RollbackPosda	rollback	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Abort a transaction in Posda files
SeriesFileByCollectionWithNoEquivalenceClass	select distinct\n  series_instance_uid\nfrom\n  file_series s\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\n  and not exists (\n    select \n      series_instance_uid\n   from\n      image_equivalence_class e\n   where\n      e.series_instance_uid = s.series_instance_uid\n )	{collection}	{series_instance_uid}	{equivalence_classes}	posda_files	Construct list of series in a collection where no image_equivalence_class exists
PublicSeriesByCollection	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? \n	{collection}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{public}	intake	List of all Series By Collection, Site on Public\n
InsertPublicDisposition	insert into public_disposition(\n  element_signature_id, sop_class_uid, name, disposition\n) values (\n  ?, ?, ?, ?\n)\n\n	{element_signature_id,sop_class_uid,name,disposition}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Insert a public disposition
ClearPublicDispositions	delete from public_disposition where\n  sop_class_uid = ? and name = ?\n\n	{sop_class_uid,name}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Clear all public dispositions for a give sop_class and name
ListOfRepeatingPrivateElementsFromDD	select\n  ptrg_signature_masked as tag,\n  ptrg_base_grp as base_grp,\n  ptrg_grp_mask as id_mask,\n  ptrg_grp_ext_mask as ext_mask,\n  ptrg_grp_ext_shift as ext_shift,\n  ptrg_consensus_vr as vr,\n  ptrg_consensus_vm as vm,\n  ptrg_consensus_name as name \nfrom ptrg	{}	{tag,base_grp,id_mask,ext_mask,ext_shift,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Repeating Private Tags from DD
PatientStatusChange	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
CountsByCollectionSiteExcludingSeriesByDescription	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null and\n  series_description not like ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,series_description_exclusion_pattern}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
InsertFileImport	insert into file_import(\n  import_event_id, file_id,  file_name\n) values (\n  currval('import_event_import_event_id_seq'),?, ?\n)\n	{file_id,file_name}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
SeriesWithMoreThanNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count > ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
GetValueForTagBySeries	select\n  distinct series_instance_uid, element_signature as tag, value\nfrom\n  series_scan natural join scan_element natural join seen_value natural join element_signature\nwhere\n  series_instance_uid = ? and element_signature = ?	{series_instance_uid,tag}	{series_instance_uid,tag,value}	{tag_values}	posda_phi	Find Distinct value for a given tag for a particular scanned series\n
GetValueForTag	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ? and scan_event_id = ?\n	{tag,scan_id}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
PatientStudySeriesFileHierarchyByCollectionIncludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
SeriesEquivalenceClassNoByProcessingStatus	select \n  distinct series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image\nwhere\n  processing_status = ?\ngroup by series_instance_uid, equivalence_class_number\norder by series_instance_uid, equivalence_class_number	{processing_status}	{series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
SeriesWithExactlyNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count = ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with exactly n equivalence classes
StudyHierarchyByStudyUID	select distinct\n  study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct sop_instance_uid) as number_of_sops\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_sop_common\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_description,\n  series_instance_uid, series_description	{study_instance_uid}	{study_instance_uid,study_description,series_instance_uid,series_description,number_of_sops}	{by_study,Hierarchy}	posda_files	Show List of Study Descriptions, Series UID, Series Descriptions, and Count of SOPS for a given Study Instance UID
PatientStudySeriesEquivalenceClassNoByProcessingStatus	select \n  distinct patient_id, study_instance_uid, series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image natural join\n  file_study natural join file_series natural join file_patient\nwhere\n  processing_status = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number\norder by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number	{processing_status}	{patient_id,study_instance_uid,series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
FilesByScanValueTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
InsertCollectionCountPerRound	insert into collection_count_per_round(\n  collection, file_count\n) values (\n  ?, ?\n)\n	{collection,num_files}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into collection count per round
FindInconsistentSeriesWithSubjectAndStudy	select distinct patient_id, study_instance_uid, series_instance_uid\nfrom file_patient natural join file_study natural join file_series\nwhere series_instance_uid in (\nselect series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n)	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
ListOfValuesByElementInScan	select element_signature, value                  \nfrom element_signature natural join scan_element natural join seen_value natural join series_scan natural join scan_event where element_signature = ? and scan_event_id = ?;	{element_signature,scan_id}	{element_signature,value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
PatientStudySeriesFileHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  modality\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,modality}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
GetBacklogControl	select\n  status, processor_pid,\n  idle_poll_interval,\n  last_service, pending_change_request,\n  source_pending_change_request,\n  request_time, num_files_per_round,\n  target_queue_size,\n  (now() - request_time) as time_pending\nfrom control_status\n	{}	{status,processor_pid,idle_poll_interval,last_service,pending_change_request,source_pending_change_request,request_time,num_files_per_round,target_queue_size,time_pending}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get control status from backlog database
GetPosdaFileStorageRoots	select\n file_storage_root_id as id, root_path as root, current, storage_class\nfrom\n  file_storage_root\n	{}	{id,root,current,storage_class}	{NotInteractive,Backlog}	posda_files	Get Posda File Storage Roots
GoInServicePosdaImport	update import_control\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,PosdaImport}	posda_files	Claim control of posda_import
GoInService	update control_status\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,Backlog}	posda_backlog	Claim control of posda_backlog
RelinquishBacklogControl	update control_status\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null,\n  source_pending_change_request = null,\n  request_time = null	{}	{}	{NotInteractive,Backlog}	posda_backlog	relese control of posda_backlog
GetListCollectionsWithNoDefinedCounts	select distinct collection\nfrom submitter s\nwhere collection not in (\n  select collection from collection_count_per_round c\n  where s.collection = c.collection\n)\n	{}	{collection}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get a list of all collections in backlog with no defined counts
RequestShutdown	update control_status\n  set pending_change_request = 'shutdown',\n  source_pending_change_request = 'DbIf',\n  request_time = now()	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	request a shutdown of Backlog processing
IntakePatientStudySeriesHierarchyByCollectionSite	select\n  p.patient_id as patient_id,\n  t.study_instance_uid as study_instance_uid,\n  s.series_instance_uid as series_instance_uid\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  s.study_pk_id = t.study_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{intake,Hierarchy}	intake	Patient, study, series hierarchy by Collection, Site on Intake\n
MakeBacklogReadyForProcessing	update control_status\n  set status = 'waiting to go inservice'\n	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Mark Backlog as ready for Processor
ListOfPrivateElementsFromDD	select\n  pt_signature as tag,\n  pt_consensus_vr as vr,\n  pt_consensus_vm as vm,\n  pt_consensus_name as name\nfrom\n  pt	{}	{tag,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Private Tags from DD
FilesInSeriesWithPositionPixelDig	select\n  distinct file_id, image_id, unique_pixel_data_id, ipp, instance_number\nfrom\n  file_series natural join file_image natural join ctp_file natural join file_sop_common\n  natural join image natural join image_geometry\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,image_id,unique_pixel_data_id,ipp,instance_number}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get file info from series for comparison of dup_series
GetGeometricInfo	select \n  distinct sop_instance_uid, iop as image_orientation_patient,\n  ipp as image_position_patient,\n  pixel_spacing,\n  pixel_rows as i_rows,\n  pixel_columns as i_columns\nfrom\n  file_sop_common join \n  file_patient using (file_id) join\n  file_image using (file_id) join \n  file_series using (file_id) join\n  file_study using (file_id) join\n  image using (image_id) join\n  file_image_geometry using (file_id) join\n  image_geometry using (image_geometry_id) \nwhere \n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	posda_files	Get Geometric Information by Sop Instance UID from posda
GetRoiCountsBySeriesInstanceUid	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from file_sop_common natural join file_series\n  where series_instance_uid = ?\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
InsertImportEvent	  insert into import_event(\n    import_type, import_time\n  ) values (\n    'Processing Backlog', ?\n  )	{time_tag}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
DupSopsWithConflictingPixels	select distinct sop_instance_uid, count\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1	{}	{sop_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
GetCountSsVolumeBySeriesUid	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid from file_sop_common natural join file_series\n         where series_instance_uid = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
SeriesWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient natural join \n  file_study natural join file_series \nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id, study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
GetNRequestsForCollection	select \n  distinct request_id, collection, received_file_path, file_digest, time_received, size\nfrom \n  request natural join submitter\nwhere\n  collection = ? and not file_in_posda \norder by time_received \nlimit ?\n	{collection,num_rows}	{request_id,collection,received_file_path,file_digest,time_received,size}	{NotInteractive,Backlog}	posda_backlog	Get N Requests for a Given Collection
RoundSummary1	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null \ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
RoundInfoLastCompleteRound	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id in (\n  select max(round_id) as round_id from round where round_end is not null\n)\norder by round_id, collection	{}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
DatesOfUpload	select \n  distinct project_name as collection, site_name as site,\n  date_trunc as date, count(*) as num_uploads from (\n   select \n    project_name,\n    site_name,\n    date_trunc('day', import_time),\n    file_id\n  from file_import natural join import_event\n    natural join ctp_file \n) as foo\ngroup by project_name, site_name, date\norder by date, project_name, site_name	{}	{collection,site,date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
SubjectsWithDupSopsWithStudySeries	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, study_instance_uid, series_instance_uid\n      from\n        file_sop_common natural join file_series natural join file_study\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with conflicting study or series
RoundSummary1VeryRecent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '1:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
RoundSummary2	select\n  round_id,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count\nfrom\n  round\norder by round_id	{}	{round_id,round_created,round_start,round_end,round_aborted,wait_count,process_count}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
GetContoursFromRoiId	select\n  roi_contour_id, contour_num, geometric_type, \n  number_of_points, sop_class as linked_image_sop_class,\n  sop_instance as linked_image_sop_instance, \n  frame_number as linked_image_frame_number\nfrom\n  roi_contour natural left join contour_image\nwhere roi_id = ?	{roi_id}	{roi_contour_id,contour_num,geometric_type,number_of_points,linked_image_sop_class,linked_image_sop_instance,linked_image_frame_number}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
GetReferencedButUnknownPlanSops	select\n  sop_instance_uid, \n  rt_dose_referenced_plan_uid as plan_sop_instance_uid \nfrom \n  rt_dose d natural join file_dose join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,plan_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of doses which reference unknown SOPs\n\n
GetCountSsVolumeByPatientId	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid \n         from file_sop_common natural join file_patient\n         where patient_id = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{patient_id}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
RoundInfoById	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id = ?\norder by round_id, collection	{round_id}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of round by id
GetDosesReferencingBadPlans	select\n  sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select \n    file_id\n  from\n    rt_dose d natural join file_dose  \n  where\n    not exists (\n      select\n        sop_instance_uid \n      from\n        file_sop_common fsc \n      where d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n  )\n)	{}	{sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
InsertRoundCollection	insert into round_collection(\n  round_id, collection,\n  num_entered, num_failed,\n  num_dups\n) values (\n  ?, ?,\n  ?, ?,\n  ?\n)\n	{round_id,collection,num_entered,num_failed,num_dups}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_collection
GetContourData	select\n  contour_data\nfrom\n  roi_contour\nwhere roi_contour_id = ?	{roi_contour_id}	{contour_data}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Contour Data by roi_contour_id\n
GetDosesAndPlanReferences	select\n  sop_instance_uid as dose_referencing,\n  rt_dose_referenced_plan_uid as plan_referenced\nfrom\n  rt_dose natural join file_dose join file_sop_common using (file_id)	{}	{dose_referencing,plan_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of dose and plan sops where dose references plan\n
GetPosdaFilesImportControl	select\n  status,\n  processor_pid,\n  idle_seconds,\n  pending_change_request,\n  files_per_round\nfrom\n  import_control	{}	{status,processor_pid,idle_seconds,pending_change_request,files_per_round}	{NotInteractive,PosdaImport}	posda_files	Get import control status from posda_files database
RoundCountsByCollection2	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ?\norder by round_id, collection	{collection}	{round_id,collection,num_dups,round_created,round_start,round_end,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
GetListCollectionPrios	select collection, file_count\nfrom collection_count_per_round\norder by collection\n\n	{}	{collection,file_count}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get a list of all collections in backlog with defined counts
GetPosdaQueueSize	select\n count(*) as num_files\nfrom\n  file NATURAL JOIN file_location NATURAL JOIN file_storage_root\nwhere\n  is_dicom_file is null and\n  ready_to_process and\n  processing_priority is not null\n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_files	Get size of queue  in Posda
GetPosdaFileIdByDigest	select\n file_id\nfrom\n  file\nwhere\n  digest = ?\n\n	{digest}	{file_id}	{NotInteractive,Backlog}	posda_files	Get posda file id of file by file_digest
SubjectsWithDuplicateSopsWithConflictingGeometricInfo	select distinct patient_id, study_instance_uid, series_instance_uid, count(*)\nfrom\n  file_patient natural join file_sop_common natural join file_series natural join file_study\nwhere sop_instance_uid in (\n  select sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n    select \n      distinct sop_instance_uid, iop as image_orientation_patient,\n      ipp as image_position_patient,\n      pixel_spacing,\n      pixel_rows as i_rows,\n      pixel_columns as i_columns\n    from\n      file_sop_common join \n      file_patient using (file_id) join\n      file_image using (file_id) join \n      file_series using (file_id) join\n      file_study using (file_id) join\n      image using (image_id) join\n      file_image_geometry using (file_id) join\n      image_geometry using (image_geometry_id) \n    ) as foo \n    group by sop_instance_uid\n  ) as foo where count > 1\n) group by patient_id, study_instance_uid, series_instance_uid	{}	{patient_id,study_instance_uid,series_instance_uid,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs with conflicting Geometric Information by Patient Id, study, series\n
AllValuesByElementSigIdAndScanId	select\n  distinct value\nfrom\n  seen_value natural join scan_element\nwhere\n  element_signature_id = ? and series_scan_id in (\n  select\n    series_scan_id \n  from \n    series_scan\n  where \n    scan_event_id = ?\n  )\norder by value\n	{element_signature_id,scan_id}	{value}	{tag_usage}	posda_phi	List of values seen in scan with specified tag\n
DistinctSeriesByCollectionSiteIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site}	intake	Get Series in A Collection, Site\n
PatientStudySeriesHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_study natural join\n  ctp_file natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
ReviewEditsBySite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
ReviewEditsByCollectionSite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  project_name = ? and site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{collection,site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for collection, site
AAA Broken Query	select  1 as number	{}	{number}	{NotInteractive,Backlog}	posda_files	a broken query for testing errors
ListOfCollectionsAndSites	select \n    distinct project_name, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
SeriesVisualReviewResultsByCollectionSite	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DiskSpaceByCollectionSummaryWithDups	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file natural join file_import\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
ReviewEditsBySiteCollectionLike	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ? and project_name like ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site,CollectionLike}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
RoundCountsByCollection2Recent	select\n  round_id, collection,\n  round_created,\n  round_start - round_created as q_time,  \n  round_end - round_created as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and (now() - round_end) < '1:00'\norder by round_id, collection	{collection}	{round_id,collection,round_created,q_time,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
PatientStudySeriesFileHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(*)\nfrom\n  file_study natural join\n  dicom_file natural join\n  ctp_file natural join\n  file_series natural join \n  file_patient natural join\n  file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\ngroup by\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,count}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
PixelTypesWithSOP	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type,\n  count(*)\nfrom\n  image natural join file_image natural join file_series natural join dicom_file\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,dicom_file_type,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
GetListStructureSets	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\norder by project_name, site_name, patient_id	{}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
GetListStructureSetsByCollectionSite	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\n  and project_name = ? and site_name = ?\norder by project_name, site_name, patient_id	{collection,site}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
tags_by_role	select\n  filter_name as role, unnest(tags_enabled) as tag\nfrom query_tag_filter where filter_name = ?	{role}	{role,tag}	{roles}	posda_queries	Show a complete list of associated tags for a role\n
CountsByCollectionSiteExt	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type, dicom_file_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
GetBacklogQueueSize	select\n count(*) as num_files\nfrom\n  request\nwhere\n  file_in_posda is false \n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
list_of_roles	select\n  filter_name as role\nfrom query_tag_filter	{}	{role}	{roles}	posda_queries	Show a complete list of roles\n
insert_list_of_roles	update query_tag_filter\nset tags_enabled = ?\nwhere filter_name = ?	{tag_list,role}	{}	{roles}	posda_queries	Insert a list of tags for a role\n
GetBacklogQueueSizeWithCollection	select\n distinct collection, count(*) as num_files\nfrom\n  request natural join submitter\nwhere\n  file_in_posda is false\ngroup by collection\n\n	{}	{collection,num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
DupReport	select\n  distinct collection,\n  sum(num_entered) num_files,\n  sum(num_dups) num_dups,\n  (cast(sum(num_dups) as float)/cast((sum(num_entered) + sum(num_dups)) as float))*100.0 as\n   percent_dups\nfrom\n  round_collection\ngroup by collection\norder by percent_dups desc	{}	{collection,num_files,num_dups,percent_dups}	{Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Report on Percentage of duplicates by collection
ReviewEditsByTimeSpan	select\n  distinct project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere\n  time_of_change > ? and time_of_change < ?\ngroup by\n  project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for	{from,to}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series over a time range
PatientStudySeriesHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
PatientStudySeriesHierarchyByCollectionSiteWithDateRange	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join \n  ctp_file natural join \n  file_series natural join \n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from \n      ctp_file  natural join\n      file_import natural join\n      import_event\n    where project_name = ? and site_name = ? and\n    visibility is null and\n    import_time > ? and import_time < ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site,from,to}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy with upload times within a date range
ListOfCollectionsBySite	select \n    distinct project_name as collection, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and site_name = ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{site}	{collection,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
GetSsVolume	select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n	{sop_instance_uid}	{for_uid,study_instance_uid,series_instance_uid,sop_class_uid,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
GetBacklogCountAndPrioritySummary	select\n  distinct collection, file_count as priority, count(*) as num_requests\nfrom\n  submitter natural join request natural join collection_count_per_round\nwhere\n  not file_in_posda\ngroup by collection, file_count\n	{}	{collection,priority,num_requests}	{NotInteractive,Backlog,backlog_status}	posda_backlog	Get List of Collections with Backlog and Priority Counts
ListOfCollectionsAndSitesLikeCollection	select \n    distinct project_name, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and project_name like ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{CollectionLike}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
DistinctSeriesByCollectionSitePublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site}	public	Get Series in A Collection, Site\n
RoundSummary1Recent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '24:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
WhereSopSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_sop_common natural join ctp_file\n  where\n    sop_instance_uid = ? and visibility is null\n)\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
RoundRunningTimeCurrentRound	select now() - round_start as running_time from round where round_id in (\nselect round_id from round where round_end is null and round_start is not null)	{}	{running_time}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
SeriesVisualReviewResultsByCollectionSiteStatus	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DistinctSopsInCollectionSiteIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	intake	Get Distinct SOPs in Collection with number files\n
DistinctSopsInCollectionSitePublicWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	public	Get Distinct SOPs in Collection with number files\n
SeriesVisualReviewResultsByCollectionSiteStatusVisible	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
CountsByCollectionSiteDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
SeriesVisualReviewResultsByCollectionSiteStatusNotGood	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status != 'Good'\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DistinctSeriesByCollection	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join ctp_file\nwhere\n  project_name = ? \n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{project_name}	{series_instance_uid,modality,count}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
DistinctSeriesByCollectionSite	select distinct series_instance_uid, dicom_file_type, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? and site_name = ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetPlansReferencingBadSS	select sop_instance_uid from file_sop_common where file_id in (\nselect file_id from plan p natural join file_plan  where\nnot exists (select sop_instance_uid from file_sop_common fsc where p.ss_referenced_from_plan \n= fsc.sop_instance_uid))	{}	{sop_instance_uid}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
TotalsByDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{AllCollections,DateRange,Kirk,Totals,count_queries}	posda_files	Get posda totals by date range\n
SubjectCountsDateRangeSummaryByCollectionSite	select \n  distinct patient_id,\n  min(import_time) as from,\n  max(import_time) as to,\n  count(*) as num_files\nfrom \n  ctp_file natural join file_patient natural join file_import natural join import_event\nwhere\n  project_name = ? and site_name = ?\ngroup by patient_id;	{collection,site}	{patient_id,from,to,num_files}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
RoundCountsByCollection2DateRange	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end - round_start as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and round_start > ? and round_end < ?\norder by round_id, collection	{collection,from,to}	{round_id,collection,num_dups,round_created,round_start,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
RoundSummary1DateRange	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_start > ? and round_end < ?\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
SeriesWithDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
DuplicateFilesBySop	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, sop_instance_uid, modality, file_id,\n    root_path || '/' || file_location.rel_path as file_path,\n    count(*) as num_uploads,\n    min(import_time) as first_upload, \n    max(import_time) as last_upload\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_sop_common using(file_id)\n  join file_series using(file_id)\n  join file_location using(file_id)\n  join file_storage_root using(file_storage_root_id)\n  join file_import using (file_id)\n  join import_event using (import_event_id)\nwhere\n  sop_instance_uid = ?\ngroup by\n  project_name, site_name, patient_id, sop_instance_uid, modality, \n  file_id, file_path\norder by\n  collection, site, patient_id, sop_instance_uid, modality	{sop_instance_uid}	{collection,site,patient_id,sop_instance_uid,modality,file_id,file_path,num_uploads,first_upload,last_upload}	{duplicates}	posda_files	Counts query by Collection, Site\n
\.


--
-- Data for Name: query_tag_filter; Type: TABLE DATA; Schema: public; Owner: posda
--

COPY query_tag_filter (filter_name, tags_enabled) FROM stdin;
view_posda_backlog	{backlog_analysis_reporting_tools,backlog_round_history,backlog_status,universal}
review_roles	{universal,roles}
visual_review_tracking_processing	{visual_review_results,universal}
dicom_batch_file_editing	{hide_files,apply_disposition,universal}
counts_patient_status	{universal,count_queries}
send_data_via_dicom	{universal,search_series,send_series,send_directory}
linkage_check	{universal,plan_linkages,dose_linkages,struct_linkages}
manage_posda_backlog	{universal,backlog_status,backlog}
duplicate_sop_resolution	{universal}
downloads_by_date	{universal}
monthly_report_queries	{universal}
.Show No Tags	{universal}
visual_review_scheduling	{universal}
phi_review	{universal}
duplicate_sop_evaluation	{universal}
.Unlimited	{universal}
consistency_check	{universal}
\.


--
-- Data for Name: spreadsheet_operation; Type: TABLE DATA; Schema: public; Owner: posda
--

COPY spreadsheet_operation (operation_name, command_line, operation_type, input_line_format, tags) FROM stdin;
SeriesConsistency	CheckSeriesConsistency.pl <series_instance_uid>	legacy	\N	\N
StudyConsistency	CheckStudyConsistency.pl <study_instance_uid>	legacy	\N	\N
PatConsistency	CheckPatConsistency.pl "<collection>" <patient_id>	legacy	\N	\N
ScanPhi	PhiScan.pl <type> "<description>"	legacy	<series_instance_uid>, <signature>	\N
OnlyIn	OnlyIn.pl Posda Intake	legacy	<SeriesInPosda>, <SeriesInIntake>	\N
CompareDuplicateSops	CompareDupSopList.pl	legacy	<sop_instance_uid>	\N
TestCommand	TestCommand.pl <host> <port> <called> <calling> <series_instance_uid>	legacy	\N	\N
PipeCommand1	PipeCommand1.pl <var1> <var2> 1 2 3	legacy	<vals1>,<vals2>,<vals3>	\N
SymLinkToIntake	SymLinkToIntake.pl /cache/bbennett/Symlinks	legacy	<PID>, <Modality>, <SopInstance>, <FilePath>	\N
LinkDirectory	MakeLinkedDirectory.pl <target_dir>	legacy	<path>, <sop_instance_uid>	\N
AddInitialStatus	PopulatePatStat.pl	legacy	<patient_id>, <status>	\N
ChangePatientStatus	UpdatePatStat.pl <who> "<why>"	legacy	<patient_id>, <old_status>, <new_status>	\N
UpdateKnowlegeBase	UpdateKnowledgeBase.pl <who> "<why>"	legacy	<Tag>^<VR>^<Disposition>^<NameChain>	\N
LinkFileHierarchy	LinkFileHierarchy.pl <Destination>	legacy	<patient_id>  <study_instance_uid> <series_instance_uid>	\N
ApplyPublicPrivateDisposition	CsvApplyPrivateDisposition.pl <dest_dir> <uid_root> <offset> <low_date> <high_date>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	\N
CreatePublicDispositionTable	CreatePublicDispositionTable.pl <sop_class_uid> "<Description>" <who>	legacy	<Tag>^<VR>^<Disposition>^<NameChain>	\N
UpdateCollectionPrio	UpdateBacklogPriorities.pl	legacy	<collection>&<priority>	{backlog_status}
HideSeriesWithStatus	HideBatchSeriesWithStatus.pl <who> "<why>"	legacy	<series_instance_uid>	{hide_files}
ApplyPrivateDisposition	CsvApplyPrivateDisposition.pl <dest_dir> <uid_root> <offset> <low_date> <high_date>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	{apply_disposition}
CompareIntakeFilesToPublicFiles	CompareIntakeFilesToPublicFiles.pl <report_file> <notify>	legacy	<sop_instance_uid> <file_in_intake> <file_in_public>	{compare_collection_site}
SendSeriesToDestination	SendSetOfSeriesToDestination.pl <host> <port> <called> <calling> <user> "<reason>"	legacy	<series_instance_uid>	{send_series}
ApplyPrivateDispositionIntake	CsvApplyPrivateDispositionIntake.pl <dest_dir> <uid_root> <offset> <low_date> <high_date>	legacy	<patient_id>&<study_instance_uid>&<series_instance_uid>	\N
AddPublicHierarchy	AddHierarchyToSpreadsheetByPublicSop.pl <new_root>	legacy	<file>&<Element>&<OldValue>&<NewValue>	\N
EquivalenceClasses	BatchCreateSeriesEquivalenceClasses.pl <notify>	legacy	<series_instance_uid>	\N
ApplyHnsccEdits	ApplyHnsccEdits.pl	legacy	<new_file>&<element>&<new_value>	\N
TdrAndPhiReports	PrepareTdrAndPhiReport.pl	legacy	<id>&<TdrReportFile>&<PhiReportFile>&<notify>	\N
ExtractZ	ExtractZ.pl	legacy	<file_id>&<unique_pixel_data_id>&<ipp>	\N
\.


SET search_path = sqitch, pg_catalog;

--
-- Data for Name: projects; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY projects (project, uri, created_at, creator_name, creator_email) FROM stdin;
posda	\N	2017-01-18 14:05:56.971157-06	Quasar Jarosz	jjarosz@uams.edu
\.


--
-- Data for Name: changes; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY changes (change_id, script_hash, change, project, note, committed_at, committer_name, committer_email, planned_at, planner_name, planner_email) FROM stdin;
04e7d1b785caf668c6a72ff6ed448065bb112584	ce7bb02ec1958e9387389eebdb62fd97c7a03e48	spreadsheet	posda	Add spreadsheet table	2017-01-18 14:05:56.984507-06	Quasar Jarosz	jjarosz@uams.edu	2017-01-18 13:58:41-06	Quasar Jarosz	jjarosz@uams.edu
\.


--
-- Data for Name: dependencies; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY dependencies (change_id, type, dependency, dependency_id) FROM stdin;
\.


--
-- Data for Name: events; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY events (event, change_id, change, project, note, requires, conflicts, tags, committed_at, committer_name, committer_email, planned_at, planner_name, planner_email) FROM stdin;
deploy	04e7d1b785caf668c6a72ff6ed448065bb112584	spreadsheet	posda	Add spreadsheet table	{}	{}	{}	2017-01-18 14:05:56.986396-06	Quasar Jarosz	jjarosz@uams.edu	2017-01-18 13:58:41-06	Quasar Jarosz	jjarosz@uams.edu
\.


--
-- Data for Name: releases; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY releases (version, installed_at, installer_name, installer_email) FROM stdin;
1.1	2017-01-18 14:05:56.965863-06	Quasar Jarosz	jjarosz@uams.edu
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: sqitch; Owner: quasar
--

COPY tags (tag_id, tag, project, change_id, note, committed_at, committer_name, committer_email, planned_at, planner_name, planner_email) FROM stdin;
\.


--
-- PostgreSQL database dump complete
--

