#!/usr/bin/env perl

use strict;
use warnings;
use 5.10.0;
use File::Temp 'tempdir';
use File::Basename ('fileparse', 'basename');

use Posda::File::Import;
use Posda::BackgroundProcess;
use Posda::DownloadableFile;


# build the input params
my $SCRIPT = '/home/posda/posdatools/Posda/bin/pathology/quip_wsi_metadata.py';
my $OUTDIR = tempdir(CLEANUP => 0);


my ($invoc_id, $notify, $act_id, $input_file, $digest) = @ARGV;
my ($filename, $dir) = fileparse($input_file);

my $background = Posda::BackgroundProcess->new($invoc_id, $notify, $act_id);
$background->Daemonize;
# $background->WriteToEmail("some message\n");

my $output_report = $background->CreateReport("Command Output");

# Execute the python script
my $cmd = qq{python3 $SCRIPT --inpdir $dir --outdir $OUTDIR --slide '{"path":"$filename", "file_uuid": "$digest"}'};
my $result = `$cmd`;

$output_report->print($result);
$background->WriteToEmail("Output from this operation (also available in the report listed below)\n");
$background->WriteToEmail($result);


# collect the output artifacts
my $artifacts = `find $OUTDIR -type f -not -iname '*manifest*'`;
my @files = split(" ", $artifacts);


# add the files to Posda
$background->WriteToEmail("Artifacts generated by this operation:\n");
for my $file (@files) {
  say $file;

  my $mimetype = `file --mime-type -b $file`;
  chomp $mimetype;

  my $import_response = Posda::File::Import::insert_file $file;

  if (not $import_response->is_error) {
    say "File inserted, file_id: " . $import_response->file_id;

    my $link = Posda::DownloadableFile::make($import_response->file_id, $mimetype);
    $background->WriteToEmail(basename($file) . ": $link\n");


  } else {
    say "There was an error:";
    say $import_response->message;
  }
}

# generate email report with links to artifacts
$background->Finish("final status message");

