#!/usr/bin/env perl

use strict;
use warnings;
use 5.10.0;
use File::Temp 'tempdir';
use File::Basename ('fileparse', 'basename');

use Posda::File::Import;
use Posda::BackgroundProcess;
use Posda::DownloadableFile;
use Posda::DB 'GetHandle';

use Data::Dumper;


# build the input params
my $OUTDIR = tempdir(CLEANUP => 0);
say $OUTDIR;


my ($invoc_id, $notify, $act_id) = @ARGV;

my $background = Posda::BackgroundProcess->new($invoc_id, $notify, $act_id);
$background->Daemonize;
# $background->WriteToEmail("some message\n");

my $output_report = $background->CreateReport("Command Output");


# read the list of files in the timepoint and process each
my $db = GetHandle('posda_files');
my $qh = $db->prepare(qq{
  select
    file_id,
    root_path || '/' || rel_path as path
  from activity_timepoint_file
  natural join file_location
  natural join file_storage_root
  where activity_timepoint_id = (
    select max(activity_timepoint_id)
    from activity_timepoint
    where activity_id = ?
  )
});
$qh->execute($act_id);

my $files = $qh->fetchall_arrayref;

# say Dumper($stuff);

for my $row (@$files) {
  my ($file_id, $path) = @$row;
  say $file_id, $path;
  process_one_file($file_id, $path);

}

sub process_one_file {
  my ($file_id, $path) = @_;
  my ($filename, $dir) = fileparse($path);
  my $digest = "dummydigest";

  # Execute the python script
  my $result = `
  sudo docker run --rm -t \\
          -v $dir:/data/images \\
          -v $OUTDIR:/data/output \\
          tahsin/quip_slide_metadata:latest  \\
          slide_extract_metadata --slide '{"path":"$filename", "file_uuid": "$digest"}'
  `;

  $output_report->print($result);
  $background->WriteToEmail("Output from this operation (also available in the report listed below)\n");
  $background->WriteToEmail($result);


  # collect the output artifacts
  my $artifacts = `sudo find $OUTDIR -type f -not -iname '*manifest*'`;
  my @files = split(" ", $artifacts);


  # add the files to Posda
  $background->WriteToEmail("Artifacts generated by this operation:\n");
  for my $file (@files) {
    say $file;

    my $mimetype = `file --mime-type -b $file`;
    chomp $mimetype;

    my $import_response = Posda::File::Import::insert_file $file;

    if (not $import_response->is_error) {
      say "File inserted, file_id: " . $import_response->file_id;

      my $link = Posda::DownloadableFile::make($import_response->file_id, $mimetype);
      $background->WriteToEmail(basename($file) . ": $link\n");


    } else {
      say "There was an error:";
      say $import_response->message;
    }
  }

}

# generate email report with links to artifacts
$background->Finish("final status message");

