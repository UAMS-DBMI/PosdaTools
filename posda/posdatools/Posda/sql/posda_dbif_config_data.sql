\connect posda_files
--
-- PostgreSQL database dump
--

-- Dumped from database version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: background_buttons; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.background_buttons (background_button_id, operation_name, object_class, button_text, tags) FROM stdin;
\.


--
-- Data for Name: chained_query; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.chained_query (chained_query_id, from_query, to_query, caption) FROM stdin;
\.


--
-- Data for Name: chained_query_cols_to_params; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.chained_query_cols_to_params (chained_query_id, from_column_name, to_parameter_name) FROM stdin;
\.


--
-- Data for Name: popup_buttons; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.popup_buttons (popup_button_id, name, object_class, btn_col, is_full_table, btn_name) FROM stdin;
\.


--
-- Data for Name: queries; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.queries (name, query, args, columns, tags, schema, description) FROM stdin;
SubprocessesByUserWhichGeneratedEmail	select \n  distinct subprocess_invocation_id, when_script_started, when_background_entered,\n  when_script_ended, user_to_notify, button_name, operation_name, command_line,\n  user_inbox_content_id, activity_id, brief_description as activity_description\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join \n  background_subprocess_report natural left join user_inbox_content natural left join\n  activity_inbox_content left join activity using (activity_id)\nwhere\n  invoking_user = ? and background_subprocess_report.name = 'Email'\norder by subprocess_invocation_id desc;	{invoking_user}	{subprocess_invocation_id,when_script_started,when_background_entered,when_script_ended,user_to_notify,button_name,operation_name,user_inbox_content_id,activity_id,activity_description,command_line}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
PatientReportByPatientOnly	select\n  distinct project_name as collection,\n  site_name as site,\n  site_id,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  patient_id = ?\n  and visibility is null\ngroup by \n  collection, site, site_id,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{patient_id}	{collection,site,patient_id,site_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
GetListStructureSets	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\norder by project_name, site_name, patient_id	{}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
FinalizeSimpleScanInstance	update phi_scan_instance set\n  end_time = now()\nwhere\n  phi_scan_instance_id = ?	{id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Finalize PHI Scan
UnhideFile	update\n  ctp_file\nset\n  visibility = null\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
CreateDciodvfyUnitScan	insert into dciodvfy_unit_scan(\n  type_of_unit,\n  unit_uid,\n  unit_id,\n  num_file_in_unit,\n  start_time\n) values( ?, ?, ?, ?, now())	{type_of_unit,unit_uid,unit_id,num_file_in_unit}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan row
SeriesVisualReviewResultsByCollectionSiteStatusNotGood	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status != 'Good'\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
BackgroundProcessStatsWithInvokerLikeProgram	select\n  distinct command_executed, invoking_user as invoker, \n  max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null and command_executed like ?\ngroup by command_executed, invoker	{command_executed_like}	{command_executed,invoker,longest,shortest,avg,times_invoked,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
InsertFileImportLong	insert into file_import(\n  import_event_id, file_id,  rel_path, rel_dir, file_name\n) values (\n  ?, ?, ?, ?, ?\n)\n	{import_event_id,file_id,rel_path,rel_dir,file_name}	{}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Create an import_event
GetCountSsVolumeByPatientId	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid \n         from file_sop_common natural join file_patient\n         where patient_id = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{patient_id}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
LookingForMissingHeadNeckPetCT	select distinct series_instance_uid, visibility, count(distinct file_id) as num_files, count(distinct import_event_id) as num_uploads, count(distinct sop_instance_uid) as num_sops\n, max(import_time) as last_load, min(import_time) as earliest_load from file_series join ctp_file using(file_id) join file_sop_common using(file_id) join file_import using (file_id) join import_event using(import_event_id)\nwhere project_name = 'Head-Neck-PET-CT' and import_time > '2018-04-01' group by series_instance_uid, visibility;	{}	{series_instance_uid,visibility,num_files,num_uploads,num_sops,last_load,earliest_load}	{meta,test,hello,bills_test,bills_ad_hoc_scripts,for_tracy}	posda_files	Add a filter to a tab
ShowPopUps	select * from popup_buttons\n 	{}	{popup_button_id,name,object_class,btn_col,is_full_table,btn_name}	{AllCollections,universal}	posda_queries	Get a list of configured pop-up buttons
GetDciodvfyWarningUnrecognizedDT	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedDefinedTerm'\n  and warning_tag = ?\n  and warning_value = ?\n  and warning_index = ?\n	{warning_tag,warning_value,warning_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = UnrecognizedDefinedTerm
DistinctSeriesByCollectionSiteSubject	select distinct patient_id, series_instance_uid, dicom_file_type, modality, count(*)\nfrom (\nselect distinct patient_id, series_instance_uid, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct patient_id, series_instance_uid, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join file_patient\n   natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null)\nas foo\ngroup by patient_id, series_instance_uid, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by patient_id, series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,patient_id}	{patient_id,series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
PixelInfoBySopInstance	select\n  f.file_id, root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration, modality\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\n  natural join file_series \nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n    select distinct file_id\n    from file_sop_common where sop_instance_uid = ?\n  )\n	{sop_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for a particular image id\n
GetIdOfNewCopyFromPublicRow	select currval('copy_from_public_copy_from_public_id_seq') as id	{}	{id}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
ListClosedActivitiesWithItems	select\n  distinct activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  when_closed,\n  count(distinct user_inbox_content_id) as num_items\nfrom\n  activity natural join activity_inbox_content\nwhere when_closed is not null\ngroup by activity_id, brief_description, when_created, who_created, when_closed\norder by activity_id	{}	{activity_id,brief_description,when_created,who_created,when_closed,num_items}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
GetPlans	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan)	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
AddInsertedToFileCopyFromPublic	update file_copy_from_public set\n  inserted_file_id = ?\nwhere copy_from_public_id = ? and sop_instance_uid = ?	{inserted_file_id,copy_from_public_id,sop_instance_uid}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
VisualReviewStatusByIdWithVisibility	select\n  distinct processing_status, review_status, dicom_file_type,  visibility,\n  count(distinct image_equivalence_class_id) as num_equiv, count(distinct series_instance_uid) as num_series                                                               from\n  image_equivalence_class natural join image_equivalence_class_input_image \n  natural join dicom_file natural join ctp_file\nwhere\n  visual_review_instance_id = ?\ngroup by processing_status, review_status, dicom_file_type, visibility	{id}	{processing_status,review_status,dicom_file_type,visibility,num_equiv,num_series}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_reports,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
AllPixelInfo	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from ctp_file\n  where visibility is null\n)\n	{}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
GetInfoForDupFilesByCollection	select\n  file_id, image_id, patient_id, study_instance_uid, series_instance_uid,\n   sop_instance_uid, modality\nfrom\n  file_patient natural join file_series natural join file_study\n  natural join file_sop_common natural join file_image\nwhere file_id in (\n  select file_id\n  from (\n    select image_id, file_id\n    from file_image\n    where image_id in (\n      select image_id\n      from (\n        select distinct image_id, count(*)\n        from (\n          select distinct image_id, file_id\n          from file_image\n          where file_id in (\n            select\n              distinct file_id\n              from ctp_file\n              where project_name = ? and visibility is null\n          )\n        ) as foo\n        group by image_id\n      ) as foo \n      where count > 1\n    )\n  ) as foo\n);\n	{collection}	{file_id,image_id,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality}	{}	posda_files	Get information related to duplicate files by collection\n
DeleteFilterFromTab	delere from query_tabs_query_tag_filter\nwhere query_tab_name = ? and filter_name = ?	{query_tab_name,filter_name}	{}	{meta,test,hello,query_tabs}	posda_queries	Remove a filter from a tab
VisibilityChangeEventsByCollection	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, series_instance_uid, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,series_instance_uid,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
GetNonDicomPathSeenId	select\n  currval('non_dicom_file_scan_non_dicom_file_scan_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
InsertIntoPosdaPublicCompare	insert into posda_public_compare(\n  compare_public_to_posda_instance_id,\n  sop_instance_uid,\n  posda_file_id,\n  posda_file_path,\n  public_file_path,\n  short_report_file_id,\n  long_report_file_id\n) values ( ?, ?, ?, ?, ?, ?, ?)	{compare_public_to_posda_instance_id,sop_instance_uid,posda_file_id,posda_file_path,public_file_path,short_report_file_id,long_report_file_id}	{}	{NotInteractive,Backlog,Transaction,public_posda_counts}	posda_files	Lock the file table in posda_files
SummaryOfSingleFileImportEventsByDateRange	select \n  distinct import_type, import_comment, min(import_time) as earliest, max(import_time) as latest,\n  count(distinct import_event_id) as num_imports\nfrom (\n  select * \n  from (\n    select\n      distinct import_event_id, import_time, import_type, import_comment, count(distinct file_id)\n    from\n      import_event natural join file_import \n    where\n      import_time > ?\n      and import_time < ?\n     group by import_event_id, import_time, import_type, import_comment\n     order by import_time desc\n  ) as foo where count = 1\n) as foo \ngroup by import_type, import_comment;	{from,to}	{import_type,import_comment,earliest,latest,num_imports}	{downloads_by_date,import_events}	posda_files	Counts query by Collection, Site\n
AddPhiElement	insert into element_signature (\n  element_signature,\n  vr,\n  is_private,\n  private_disposition,\n  name_chain\n) values (\n  ?, ?, ?, ?, ?\n)\n	{element_signature,vr,is_private,private_disposition,name_chain}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Add an element_signature row to posda_phi
GetQualifiedCTQPByLikeCollectionSiteWithFIleCount	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id)\nwhere collection like ? and site = ? and qualified\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified,num_files}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
SeriesWithDuplicatePixelDataTest	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  file_series natural join file_image\n  natural join file_patient\n  natural join ctp_file\nwhere \n  visibility is null \n  and image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(distinct file_id)\n              from file_image natural join ctp_file\n              where project_name = ? and visibility is null\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n) group by collection, site, patient_id, series_instance_uid\n	{collection}	{collection,site,series_instance_uid,patient_id,num_files}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
PixelTypesWithRowsColumns	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_rows,\n  pixel_columns,\n  number_of_frames,\n  pixel_representation,\n  planar_configuration,\n  modality\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_rows,pixel_columns,number_of_frames,pixel_representation,planar_configuration,modality,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
LookingForMissingHeadNeckPetCT2	select \n  distinct series_instance_uid, modality, \n  count(distinct file_id) as num_files, min(import_time) as first_load, max(import_time) as last_load\nfrom\n  file_series\n  join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere file_id in (      \n  select\n     distinct file_id\n  from\n    file_series join ctp_file using(file_id)\n    join file_sop_common using(file_id) \n    join file_import using (file_id)\n    join import_event using(import_event_id)\n  where \n    project_name = 'Head-Neck-PET-CT' and import_time > '2018-04-01'\n  )\ngroup by series_instance_uid, modality	{}	{study_instance_uid,series_instance_uid,modality,num_files,first_load,last_load}	{meta,test,hello,bills_test,bills_ad_hoc_scripts,for_tracy}	posda_files	Add a filter to a tab
Checking Duplicate Series	select \n  distinct project_name as collection, site_name as site, patient_id,\n  dicom_file_type, pixel_data_digest, sop_instance_uid\nfrom\n  file_series natural join file_patient natural join ctp_file natural join\n  file_sop_common natural join dicom_file\nwhere\n  visibility is null and series_instance_uid = ?\norder by sop_instance_uid	{series_instance_uid}	{collection,site,patient_id,dicom_file_type,pixel_data_digest,sop_instance_uid}	{"CPTAC Bolus September 2018"}	posda_files	Get the list of files by sop, excluding base series
CountsByPatientId	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  patient_id = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{patient_id}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetSeenValue	select * from seen_value where value = ?\n	{value}	{seen_value_id,value}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Seen Value Id
GetPosdaPhiSimpleElementSigInfo	select\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\nfrom element_seen\n\n	{}	{element_sig_pattern,vr,is_private,private_disposition,name_chain}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Get the relevant features of an element_signature in posda_phi_simple schema
FileWithInfoBySopInPosda	select \n  file_for.for_uid as frame_of_ref,\n  iop, \n  ipp,\n  pixel_spacing,\n  pixel_rows,\n  pixel_columns\nfrom\n  file_sop_common natural join ctp_file\n  natural join file_for natural join file_image\n  join image_geometry using (image_id)\n  join image using (image_id)\nwhere\n  sop_instance_uid = ?\n  and visibility is null	{sop_instance_uid}	{frame_of_ref,iop,ipp,pixel_spacing,pixel_rows,pixel_columns}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
PatientStudySeriesHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_study natural join\n  ctp_file natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{Hierarchy,phi_simple,simple_phi}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
CreateElementSignature	insert into element_signature(element_signature, vr, is_private) values(?, ?, ?)\n	{element_signature,vr,is_private}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Element Signature Id
AverageSecondsPerFile	select avg(seconds_per_file) from (\n  select (send_ended - send_started)/number_of_files as seconds_per_file \n  from dicom_send_event where send_ended is not null and number_of_files > 0\n  and send_started > ? and send_ended < ?\n) as foo\n	{from_date,to_date}	{avg}	{send_to_intake}	posda_files	Average Time to send a file between times\n
LookUpTagEle	select\n  tag, name, keyword, vr, vm, is_retired, comments\nfrom \n  dicom_element\nwhere\n  tag = ?	{tag}	{tag,name,keyword,vr,vm,is_retired,comments}	{NotInteractive,used_in_dciodvfy}	dicom_dd	Get tag from name or keyword
RoundSummary1Recent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '24:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
DistinctPatientStudySeriesByCollection	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere\n  project_name = ? and\n  visibility is null\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
DupSopsByImportEventByPatLike	select\n  distinct sop_instance_uid, count(distinct file_id) as num_files\nfrom (\n  select distinct sop_instance_uid, file_id \n  from file_sop_common \n  where file_id in (\n    select\n      distinct file_id from file_import where import_event_id in (select import_event_id from (\n        select\n          distinct import_event_id, import_time,  import_type, count(distinct file_id) as num_files\n        from\n          import_event natural join file_import natural join file_patient\n        where\n          import_type = 'multi file import' and\n          patient_id like ?\n         group by import_event_id, import_time, import_type\n       ) as foo\n    )\n  )\n)as foo\ngroup by sop_instance_uid\n	{patient_id_like}	{sop_instance_uid,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
PrivateTagsToBeDeleted	select distinct element_sig_pattern as tag from element_seen where is_private and private_disposition = 'd' order by element_sig_pattern;\n\n	{}	{tag}	{AllCollections,queries,phi_maint}	posda_phi_simple	Private tags to be deleted
GetDupsFromSimilarDupContourCounts	select distinct roi_id, count(*) from file_roi_image_linkage where\ncontour_digest in (select contour_digest from (select\n  distinct contour_digest, count(*) from\n(select\n  distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_class_uid,\n  file_id,\n  contour_digest\nfrom\n   ctp_file\n   natural join file_patient\n   natural join file_series\n   natural join file_sop_common\n  natural join file_roi_image_linkage\nwhere file_id in (\n  select distinct file_id from (\n    select \n      distinct file_id, count(*) as num_dup_contours\n    from\n      file_roi_image_linkage \n    where \n      contour_digest in (\n      select contour_digest\n     from (\n        select \n          distinct contour_digest, count(*)\n        from\n          file_roi_image_linkage group by contour_digest\n     ) as foo\n      where count > 1\n    ) group by file_id order by num_dup_contours desc\n  ) as foo\n  where num_dup_contours = ?\n)\n) as foo\ngroup by contour_digest)\nas foo where count > 1)\ngroup by roi_id order by count desc\n	{num_dup_contours}	{roi_id,count}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
UnHideFile	update\n  ctp_file\nset\n  visibility = null\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
GetCTQPByCollectionSite	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id\nwhere collection = ? and site = ?	{collection,site}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
TotalDiskSpace	select\n  sum(size) as total_bytes\nfrom\n  file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\n	{}	{total_bytes}	{all,posda_files,storage_used}	posda_files	Get total disk space used\n
DistinctSeriesByCollection	select distinct series_instance_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  project_name = ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by series_instance_uid, patient_id, dicom_file_type, modality\n	{collection}	{series_instance_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy}	posda_files	Get Series in A Collection\n
LastFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, max(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	Last files uploaded by series\n
FileSizeByCollection	select project_name as collection,sum(size) as total_disc_used from file natural join ctp_file group by project_name order by total_disc_used desc	{}	{collection,total_disc_used}	{AllCollections,queries}	posda_files	Get a list of available queries
HideFile	update\n  ctp_file\nset\n  visibility = 'hidden'\nwhere\n  file_id = ?\n	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file\n
DupSopCountsByCSS	select\n  distinct sop_instance_uid, min, max, count\nfrom (\n  select\n    distinct sop_instance_uid, min(file_id),\n    max(file_id),count(*)\n  from (\n    select\n      distinct sop_instance_uid, file_id\n    from\n      file_sop_common \n    where sop_instance_uid in (\n      select\n        distinct sop_instance_uid\n      from\n        file_sop_common natural join ctp_file\n        natural join file_patient\n      where\n        project_name = ? and site_name = ? \n        and patient_id = ? and visibility is null\n    )\n  ) as foo natural join ctp_file\n  where visibility is null\n  group by sop_instance_uid\n)as foo where count > 1\n	{collection,site,subject}	{sop_instance_uid,min,max,count}	{}	posda_files	Counts of DuplicateSops By Collection, Site, Subject\n
StorageRootIdByClass	select file_storage_root_id as id from file_storage_root where\nstorage_class = ?	{storage_class}	{id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get file storage root by storage class\n\nUsed in file migration; should return a single row. If not, error in database configuration.
CountsByCollectionSiteExt	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type, dicom_file_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
BackgroundersByDateRange	select\n  distinct operation_name, count(distinct subprocess_invocation_id) as num_invocations\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null and operation_name is not null and\n  when_script_started > ? and when_script_ended < ? and\n  when_script_ended is not null\ngroup by operation_name\norder by num_invocations desc	{from,to}	{operation_name,num_invocations}	{invoking_user}	posda_files	Get a list of collections and sites\n
SimplePhiReportAllPrivateOnlyMetaQuote	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, \n  '<' || value || '>' as q_value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,disp,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
GoInServicePosdaImport	update import_control\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,PosdaImport}	posda_files	Claim control of posda_import
GetBackgroundSubprocessId	select currval('background_subprocess_background_subprocess_id_seq') as id	{}	{id}	{NotInteractive,used_in_background_processing}	posda_queries	Get the id of the background_subprocess row just created
UpdatePatientImportStatus	update patient_import_status set \n  patient_import_status = ?\nwhere patient_id = ?\n	{patient_id,status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Update Patient Status\nFor use in scripts\nNot really intended for interactive use\n
CountRowsInDicomFileWithPopulatedPixelInfo	select \n count(*) from dicom_file where has_pixel_data is not null	{}	{count}	{adding_pixels_to_dicom_file}	posda_files	count rows in dicom_file with unpopulated pixel info
GetFilesToEditBySopForLGCP	select\n  file_id, root_path || '/' || rel_path as path\nfrom \n  file_sop_common natural join file_series natural join\n  file_location natural join file_storage_root natural join ctp_file\nwhere \n  sop_instance_uid = ? and series_instance_uid != ?\n  and visibility is null\n	{sop_instance_uid,series_instance_uid}	{file_id,path}	{"Curation of Lung-Fused-CT-Pathology"}	posda_files	Get the list of files by sop, excluding base series
StatusOfDciodvfyScans	select \n  dciodvfy_scan_instance_id as id,\n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time,\n  end_time\nfrom \n  dciodvfy_scan_instance\norder by id\n  	{}	{id,type_of_unit,description_of_scan,number_units,scanned_so_far,start_time,end_time}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
GetLinkedSopsByStructureSetFileId	select\n  distinct sop_instance\nfrom contour_image natural join  file_structure_set natural join roi natural join roi_contour\nwhere file_id = ?	{file_id}	{sop_instance}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of SOP's linked in SS\n\n
PosdaTotals	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility is null\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Produce total counts for all collections currently in Posda\n
GetPixelDescriptorByDigestNew	select\n  samples_per_pixel, \n  number_of_frames, \n  pixel_rows,\n  pixel_columns,\n  bits_stored,\n  bits_allocated,\n  high_bit, \n  pixel_data_offset, \n  pixel_data_length,\n  root_path || '/' || rel_path as path\nfrom\n  image natural join file_image\n  natural join dicom_file natural join file_location\n  natural join file_storage_root where pixel_data_digest = ?\nlimit 1	{pixel_data_digest}	{samples_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,pixel_data_offset,pixel_data_length,path}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
GetPtInfoBySeries	select \n  distinct \n  pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam\nfrom file_pt_image natural join file_patient natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null	{series_instance_uid}	{radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
ListOfQueriesPerformedByUserByDate	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n  invoking_user = ? and\n  query_start_time > ? and query_end_time < ?\norder by query_start_time	{user,from,to}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
GetDciodvfyWarningMissingDicomDir	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'MissingForDicomDir'\n  and warning_tag = ?\n 	{warning_tag}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
ColSiteDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  project_name, site_name, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{collection,site}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,ctp_details}	posda_files	Get Series in A Collection\n
GetDciodvfyErrorUnrecogEnum	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedEnumeratedValue'\n  and error_value = ?\n  and error_tag = ?\n  and error_index = ?	{error_value,error_tag,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
RecordPatientStatusChange	insert into patient_import_status_change(\n  patient_id, when_pat_stat_changed,\n  pat_stat_change_who, pat_stat_change_why,\n  old_pat_status, new_pat_status\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?\n)\n	{patient_id,who,why,old_status,new_status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Record a change to Patient Import Status\nFor use in scripts\nNot really intended for interactive use\n
GetScanElementId	select currval('scan_element_scan_element_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of ScanElementId Sequence\n
FromFileWithVisibilityBySopFromDicomEditCompare	select \n  sop_instance_uid,\n  file_id as from_file_id,\n  visibility as from_file_visibility\nfrom\n  ctp_file natural join file natural join file_sop_common,\n  dicom_edit_compare\nwhere\n  from_file_digest = file.digest and\n  subprocess_invocation_id = ?\norder by sop_instance_uid	{subprocess_invocation_id}	{sop_instance_uid,from_file_id,from_file_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
GetSsVolumeForStudySeriesCount	select \n  distinct for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, count(distinct sop_instance) as num_sops\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\ngroup by for_uid, study_instance_uid, series_instance_uid, sop_class\n	{sop_instance_uid}	{for_uid,study_instance_uid,series_instance_uid,sop_class_uid,num_sops}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
EquipmentByPrivateTag	select distinct equipment_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere element_signature = ?\norder by equipment_signature;\n	{scan_id,element_signature}	{equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
Series In Posda By PatientId	select \n  distinct series_instance_uid\nfrom\n  file_series natural join file_patient natural join ctp_file\nwhere \n  visibility is null and patient_id = ?\n\n	{patient_id}	{series_instance_uid}	{"Reconcile Public and Posda for CPTAC"}	posda_files	Get the list of files by sop, excluding base series
GetSeriesByVisualReviewIdAndStatus	select \n  distinct series_instance_uid\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ? and review_status = ?	{visual_review_instance_id,review_status}	{series_instance_uid}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
ByDistinguishedDigest	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id as subject,\n  series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_series\nwhere file_id in (\n  select \n    file_id\n  from\n    file_image\n    join image using(image_id)\n    join unique_pixel_data using(unique_pixel_data_id)\n  where digest = ?\n  ) and visibility is null \ngroup by \n  collection,\n  site,\n  series_instance_uid,\n  subject\norder by\n  collection,\n  site,\n  subject	{pixel_digest}	{collection,site,subject,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesInSeriesWithPath	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
GetBackgroundButtons	select\n    background_button_id,\n    operation_name,\n    object_class,\n    button_text\nfrom background_buttons\n\n	{}	{background_button_id,operation_name,object_class,button_text}	{NotInteractive,used_in_process_popup}	posda_queries	N\no\nn\ne
NonDicomFileInPosdaByScanPathValue	select \n  distinct posda_file_id as file_id, non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value\nfrom\n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and \n  file_type = ? and \n  non_dicom_path = ? and \n  value = ?\norder by type, path, q_value	{scan_id,file_type,non_dicom_path,value}	{file_id,type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi}	posda_phi_simple	Simple Phi Report with Meta Quotes
RecordElementDispositionChangeSimple	insert into element_disposition_changed(\n  element_seen_id,\n  when_changed,\n  who_changed,\n  why_changed,\n  new_disposition\n) values (\n  ?, now(), ?, ?, ?)	{id,who,why,disp}	{}	{tag_usage,simple_phi,used_in_phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
DicomFilesMissingThingsByDateRange	select\n\tdicom_file.file_id,\n\tproject_name as collection,\n\tsite_name as site,\n\tcase when file_sop_common.file_id is null\n\t\tthen 'X'\n\t\telse ''\n\tend as file_sop_common_missing,\n\tcase when file_patient.file_id is null\n\t\tthen 'X'\n\t\telse ''\n\tend as file_patient_missing,\n\tcase when file_study.file_id is null\n\t\tthen 'X'\n\t\telse ''\n\tend as file_study_missing,\n\tcase when file_series.file_id is null\n\t\tthen 'X'\n\t\telse ''\n\tend as file_series_missing,\n\tcase when file_equipment.file_id is null\n\t\tthen 'X'\n\t\telse ''\n\tend as file_equipment_missing\n\n\nfrom dicom_file\nnatural join import_event\nnatural join file_import\nnatural left join ctp_file\nleft join file_patient\n\ton dicom_file.file_id = file_patient.file_id\nleft join file_sop_common\n\ton dicom_file.file_id = file_sop_common.file_id\nleft join file_series\n\ton dicom_file.file_id = file_series.file_id\nleft join file_equipment\n\ton dicom_file.file_id = file_equipment.file_id\nleft join file_study\n\ton dicom_file.file_id = file_study.file_id\n\nwhere \n\timport_time >= ?\n\tand import_time < ?\n\tand (\n\t\tfile_patient.file_id is null\n\t\tor file_sop_common.file_id is null\n\t\tor file_series.file_id is null\n\t\tor file_equipment.file_id is null\n\t)\n	{from,to}	{file_id,collection,site,file_sop_common_missing,file_patient_missing,file_study_missing,file_series_missing,file_equipment_missing}	{}	posda_files	List DICOM files which are missing one of:\n\n* file_patient\n* file_sop_common\n* file_series\n* file_equipment\n\nNote that these could be missing due to a failure to fully \nparse the DICOM file. If that is the case, the CTP information\nmay also have failed (or been missing). Collection and Site\nare included in this query but may be missing!
ListOfValuesByElementInScan	select element_signature, value                  \nfrom element_signature natural join scan_element natural join seen_value natural join series_scan natural join scan_event where element_signature = ? and scan_event_id = ?;	{element_signature,scan_id}	{element_signature,value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
UpdateStatusVisualReviewInstance	update visual_review_instance set\n  visual_review_num_series_done = ?,\n  visual_review_num_equiv_class = ?\nwhere\n  visual_review_instance_id = ?	{visual_review_num_series_done,visual_review_num_equiv_class,visual_review_instance_id}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
VisualReviewStatusWithCollectionByIdWithVisibility	select \n  distinct project_name as collection, site_name as site, \n  series_instance_uid, visibility, review_status, modality, series_description,\n  series_date, count(distinct image_equivalence_class_id) as num_equiv_classes, \n  count(distinct file_id) as num_files\nfrom\n  visual_review_instance natural join image_equivalence_class natural join\n  image_equivalence_class_input_image natural join\n  file_series natural join ctp_file\nwhere\n  visual_review_instance_id = ? and review_status = ?\ngroup by collection, site, series_instance_uid, visibility, review_status, modality, series_description, series_date;	{visual_review_instance_id,review_status}	{collection,site,series_instance_uid,review_status,visibility,modality,series_description,series_date,num_equiv_classes,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetContourData	select\n  contour_data\nfrom\n  roi_contour\nwhere roi_contour_id = ?	{roi_contour_id}	{contour_data}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Contour Data by roi_contour_id\n
GetMaxFileId	select\n  max(file_id) as file_id\nfrom\n  file\n	{}	{file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
DistinctSopsInSeriesForCompare	select distinct sop_instance_uid, dicom_file_type, sop_class_uid, modality, file_id\nfrom file_sop_common natural join dicom_file  natural join file_series\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\n	{series_instance_uid}	{sop_instance_uid,dicom_file_type,sop_class_uid,modality,file_id}	{compare_series}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
GetPatientMappingExperimental	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  '<' || diagnosis_date || '>' as diagnosis_date,\n  '<' || baseline_date || '>' as baseline_date,\n  '<' || date_trunc('year', diagnosis_date) || '>' as year_of_diagnosis,\n  baseline_date - diagnosis_date as computed_shift\nfrom\n  patient_mapping\n  	{}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,year_of_diagnosis,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
SsWithClosedContoursWithNoLinkage	select \n  distinct project_name as collection,\n  site_name as site, patient_id, series_instance_uid, file_id\nfrom ctp_file natural join file_patient natural join file_series \nwhere project_name = ? and visibility is null\n  and file_id in (\n  select distinct file_id from file_structure_set where structure_set_id in (\n    select distinct structure_set_id from roi where roi_id in (\n      select distinct roi_id from roi_contour where roi_contour_id in (\n        select distinct roi_id from roi r where exists (\n          select * from roi_contour c where r.roi_id = c.roi_id and geometric_type = 'CLOSED_PLANAR') \n          and roi_id in (     \n            select distinct roi_id from roi r where not exists (\n              select * from file_roi_image_linkage l where l.roi_id = r.roi_id\n            )\n         )\n       )\n     )\n   )\n)	{collection}	{collection,site,patient_id,file_id,series_instance_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
DuplicateSopsInSeriesExperimental	select \n  sop_instance_uid, first_f as early_file, last_f as late_file\nfrom (\n  select \n    distinct sop_instance_uid, min(file_id) as first_f, max(file_id) as last_f\n  from\n     file_series natural join file_sop_common natural join ctp_file\n  where\n     series_instance_uid = ? and visibility is null\n  group by sop_instance_uid\n) as foo\nwhere first_f < last_f	{series_instance_uid}	{sop_instance_uid,early_file,late_file}	{by_series,dup_sops,"ACRIN-FMISO-Brain Duplicate Elimination"}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
GetSeriesWithImageByCollectionSiteDateRange	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,from,to}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
GetAllFilesAndDigests	select \n  received_file_path, file_digest\nfrom \n  request\n\n	{}	{received_file_path,digest}	{NotInteractive,Backlog}	posda_backlog	Get all files with digests in backlog
GetSeriesWithImageByCollectionSite	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
DispositionsVersusChanges	select \n  element_sig_pattern, tag_name, element_seen_id, private_disposition, when_changed, new_disposition\nfrom element_seen natural join element_disposition_changed \norder by element_sig_pattern, when_changed	{}	{element_sig_pattern,tag_name,element_seen_id,private_disposition,when_changed,new_disposition}	{tag_usage,used_in_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
PatientsWithNoCtpLike	select\n  distinct patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\nwhere\n  not exists (select file_id from ctp_file c where sc.file_id = c.file_id) and patient_id like ?\ngroup by patient_id;	{patient_match}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
FilesIdsInSeriesWithVisibility	select\n  file_id, visibility\nfrom\n  ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_id,visibility}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
DoseLinkageToPlanByCollectionSite	select\n  sop_instance_uid as referencing_dose,\n  rt_dose_referenced_plan_uid as referenced_plan\nfrom\n  rt_dose natural join file_dose natural join file_sop_common natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null	{collection,site}	{referencing_dose,referenced_plan}	{"Structure Sets",sops,LinkageChecks,plan_linkages,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
CountsByCollectionLikeDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name like ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection_like}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
DistinctVrByScan	select \n  distinct vr, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? \ngroup by vr	{scan_id}	{vr,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
SubjectsWithDupSops	select\n  distinct collection, site, patient_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{duplicates,dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetNonSquareImageIds	select file_id from image natural join file_image  where pixel_rows != pixel_columns\noffset ? limit ?	{offset,limit}	{file_id}	{ImageEdit}	posda_files	Get list of dicom_edit_event
UpdateDicomEditCompareDispositionStatus	update dicom_edit_compare_disposition set\n  current_disposition = ?,\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{current_disposition,subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update status of an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
GetVisualReviewInstanceId	select currval('visual_review_instance_visual_review_instance_id_seq') as id	{}	{id}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
GetSeriesByPatId	select\n  distinct series_instance_uid, count(distinct file_id) as num_files\nfrom\n  file_series natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and\n  visibility is null\ngroup by series_instance_uid	{patient_id}	{series_instance_uid,num_files}	{meta,test,hello,query_tabs,bills_test}	posda_files	See if ctp_file_row exists
FileStorageTotalBytes	select\n  sum(size) as total_bytes\nfrom file\n	{}	{total_bytes}	{AllCollections,postgres_stats,database_size}	posda_files	Get a list of collections and sites\n
ShowAllHideEventsByCollectionSite	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file \n  where project_name = ? and site_name = ? \n)	{collection,site}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
CreateActivity	insert into activity(brief_description, when_created, who_created) values (\n?, now(), ?);	{description,user}	{}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
GetSsReferencingKnownImages	select\n  project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n  select\n    distinct ss_file_id as file_id \n  from (\n    select\n      sop_instance_uid, ss_file_id \n    from (\n      select \n        distinct\n           linked_sop_instance_uid as sop_instance_uid,\n           file_id as ss_file_id\n      from\n        file_roi_image_linkage\n    ) foo left join file_sop_common using(sop_instance_uid)\n    join ctp_file using(file_id)\n  where\n    visibility is null\n  ) as foo\n)\norder by collection, site, patient_id, file_id\n	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
SeriesInHierarchyBySeriesWithFileTypeModality	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  dicom_file natural join \n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by collection, site, patient_id, \n  study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
FindUnpopulatedPetsWithCount	select\n  file_id, root_path || '/' || rel_path as file_path\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)\nlimit ?	{n}	{file_id,file_path}	{populate_posda_files,bills_test}	posda_files	Get's all files which are PET's which haven't been imported into file_pt_image yet.<br>\n\nOk to run this interactively, but use small n
SubjectLoadDaysByCollection	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\n  and collection = ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval_type,from,to,collection}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{find_series,for_tracy,backlog_round_history}	posda_backlog	Get List of Series by Subject Name
InsertIntoPatientMappingBaselineBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  diagnosis_date,\n  baseline_date) values (\n  ?, ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with batch, diagnosis_date, and baseline_date
CreateNonDicomPathSeen	insert into non_dicom_path_seen(\n  non_dicom_file_type,\n  non_dicom_path\n) values (\n  ?, ?\n)	{non_dicom_file_type,non_dicom_path}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
DuplicateSopsInSeriesDistinct	select\n  distinct sop_instance_uid,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\ngroup by sop_instance_uid\norder by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,num_files,earliest,latest}	{by_series,dup_sops}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
GetFileIdByDigest	select file_id from file where digest = ?	{digest}	{file_id}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
FindInconsistentSeriesWithSubjectAndStudy	select distinct patient_id, study_instance_uid, series_instance_uid\nfrom file_patient natural join file_study natural join file_series\nwhere series_instance_uid in (\nselect series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n)	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{consistency,find_series,for_bill_series_consistency}	posda_files	Find Inconsistent Series\n
SubjectCountsDateRangeSummaryByCollectionSite	select \n  distinct patient_id,\n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_patient natural join \n  file_import natural join \n  import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id\norder by patient_id	{collection,site}	{patient_id,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
CreateTableSequenceIndex	insert into sequence_index(\n  scan_element_id, sequence_level, item_number\n) values (?, ?, ?)\n	{scan_element_id,sequence_level,item_number}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Table Sequence Id
GetRoiIdFromFileIdRoiNum	select\n  roi_id\nfrom\n  roi natural join structure_set natural join file_structure_set\nwhere \n  file_id =? and roi_num = ?	{file_id,roi_num}	{roi_id}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
PixelTypesWithGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get distinct pixel types with geometry\n
UpdateCollectionBacklogPrio	update\n  collection_count_per_round\nset\n  file_count = ?\nwhere\n  collection = ?\n\n	{priority,collection}	{}	{NotInteractive,Backlog}	posda_backlog	Update the priority of a collection in a backlog 
InboxEmailToUsername	select user_name\nfrom user_inbox\nwhere user_email_addr = ?\n\n	{user_email_addr}	{user_name}	{NotInteractive,used_in_background_processing}	posda_queries	Convert an email address to a username
GetPublicSopsForCompareCollectionLike	select\n  i.patient_id,\n  i.study_instance_uid,\n  s.series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  s.modality,\n  i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and tdp.project like ?\n  and i.general_series_pk_id = s.general_series_pk_id	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_uri}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
AreVisibleFilesMarkedAsBadOrUnreviewedInSeriesNew	select \n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom (\n  select \n    distinct project_name as collection,\n    site_name as site,\n    patient_id,\n    series_instance_uid,\n    dicom_file_type,\n    modality,\n    review_status,\n    processing_status,\n    visibility,\n    file_id\n  from \n    dicom_file natural join \n    file_series natural join \n    file_patient natural join\n    ctp_file natural join \n  (\n    select file_id, review_status, processing_status\n    from\n      image_equivalence_class_input_image natural join\n      image_equivalence_class join\n      ctp_file using(file_id)\n    where\n      series_instance_uid = ?\n  ) as foo\n) as foo\nwhere\n  visibility is null and \n  review_status != 'Good' and\n  review_status != 'PassThrough'\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\n	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,visibility,file_id}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
DistinctVisibleFileReportByPatient	select distinct\n  project_name as collection, site_name as site, patient_id, study_instance_uid,\n  series_instance_uid, sop_instance_uid, dicom_file_type, modality, file_id\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\n  natural join dicom_file natural join ctp_file\nwhere\n  patient_id = ? and visibility is null\norder by series_instance_uid	{patient_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,dicom_file_type,modality,file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetFilePath	select\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{path}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
SeriesWithDupSops	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n	{}	{collection,site,subj_id,count,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
IncrementSimpleSeriesScanned	update phi_scan_instance set\n  num_series_scanned = num_series_scanned + 1\nwhere\n  phi_scan_instance_id = ?	{id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Increment series scanned
FindingImportEvent	select\n  import_event_id, import_time, count(distinct file_id) as num_files\nfrom import_event natural join file_import\nwhere import_event_id in (\n  select distinct import_event_id from import_event natural join file_import\n  where file_id in (\n    select file_id from file_patient where patient_id = ?\n  )\n) group by import_event_id, import_time order by import_time desc limit 100	{patient_id}	{import_event_id,import_time,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
SummaryOfToFilesForPatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file_patient natural left join ctp_file\n  where\n    patient_id  = ? and visibility is null\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, \n  series_instance_uid, dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{patient_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
GetSeriesByVisualReviewIdWithNullStatus	select \n  distinct series_instance_uid\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ? and review_status is null	{visual_review_instance_id}	{series_instance_uid}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
ListOfCollectionsAndSites	select\n    project_name,\n\tsite_name,\n\tcount(*) \nfrom \n\tctp_file \nwhere\n  visibility is null\n\ngroup by project_name, site_name\norder by project_name, site_name	{}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n\noptimized by Quasar on 2018-08-08
FilesByModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, s.series_instance_uid, sop_instance_uid, dicom_file_uri\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,dicom_file_uri}	{FindSubjects,intake,FindFiles}	intake	Find All Files with given modality in Collection, Site on Intake\n
MultifileImportsExceptEdits	select\n  distinct import_type, import_comment, import_time,\n  count(distinct import_event_id) as num_imports, sum(num_files) as total_files\nfrom (\n  select * from (\n    select\n      distinct import_event_id, import_time, import_type, import_comment, count(distinct file_id) as num_files \n    from\n      import_event natural join file_import\n    where import_time > ? and import_time < ?\n    group by import_event_id, import_time, import_type, import_comment order by import_time desc\n  ) as foo\n  where num_files > 1 and import_comment not like '%dicom_edit_compare%'\n) as foo\ngroup by import_type, import_time, import_comment	{from,to}	{import_type,import_comment,num_imports,import_time,total_files}	{downloads_by_date,import_events}	posda_files	Counts query by Collection, Site\n
SetDciodvfyScanInstanceNumScanned	update dciodvfy_scan_instance set\n  scanned_so_far = ?\nwhere\n  dciodvfy_scan_instance_id = ?	{scanned_so_far,dciodvfy_scan_instance_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
PublicSeriesByCollectionVisibilityMetadata	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions,\n   count(distinct  i.sop_instance_uid) as Images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  tdp.project = ? and\n  s.visibility = ?\ngroup by PID, StudyDate, Modality\n	{collection,visibility}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,Images}	{public}	public	List of all Series By Collection, Site on Public with metadata\n
PatientIdMappingByFromPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root\nfrom \n  patient_mapping\nwhere\n  from_patient_id = ?	{from_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
TagLocations	select\n  query_tab_name,\n  filter_name, \n  tag\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nwhere tag = ?	{tag}	{query_tab_name,filter_name,tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FindingImageProblem	select\n  distinct dicom_file_type, project_name,  \n  patient_id, min(import_time), max(import_time), count(distinct file_id) \nfrom\n  ctp_file natural join dicom_file natural join\n  file_patient natural join file_import natural join \n  import_event \nwhere file_id in (\n  select file_id \n  from (\n    select file_id, image_id \n    from pixel_location left join image using(unique_pixel_data_id)\n    where file_id in (\n      select\n         distinct file_id from file_import natural join import_event natural join dicom_file\n      where import_time > '2018-09-17'\n    )\n  ) as foo where image_id is null\n) \nand visibility is null\ngroup by dicom_file_type, project_name, patient_id\norder by patient_id	{}	{dicom_file_type,project_name,patient_id,min,max,count}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
ListOfPrivateElementsFromDD	select\n  pt_signature as tag,\n  pt_consensus_vr as vr,\n  pt_consensus_vm as vm,\n  pt_consensus_name as name\nfrom\n  pt	{}	{tag,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Private Tags from DD
GetFilePathWithCollSitePatientStudySeries	select\n  root_path || '/' || rel_path as path,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_location natural join file_storage_root natural join\n  ctp_file natural join file_patient natural join file_study natural join file_series\nwhere\n  file_id = ?	{file_id}	{path,collection,site,patient_id,study_instance_uid,series_instance_uid}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
GetHiddenFilesBySeriesAndVisualReviewId	select\n  file_id\nfrom ctp_file\nwhere visibility is not null and file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    visual_review_instance_id = ? and series_instance_uid = ?\n)	{visual_review_instance_id,series_instance_uid}	{file_id}	{signature,phi_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
GetNotQualifiedCTQPByLikeCollectionSiteWithNoFiles	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id p\nwhere collection like ? and site = ? and not qualified and\n  not exists (select file_id from file_patient f where f.patient_id = p.patient_id)\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
ListSrPosdaHidden	select \n  distinct project_name as collection, site_name as site,\n  patient_id, study_instance_uid, series_instance_uid,\n  file_id, root_path || '/' || rel_path as file_path\nfrom\n  dicom_file natural join file_patient natural join file_series\n  natural join file_study natural join ctp_file\n  join file_location using (file_id) natural join file_storage_root\nwhere\n  visibility is not null and dicom_file_type like '%SR%' and\n  project_name like ?	{collection_like}	{collection,site,patient_id,study_instance_uid,series_instance_uid,file_id,file_path}	{meta,test,hello,query_tabs,bills_test,view_structured_reports}	posda_files	Add a filter to a tab
GetDciodvfyWarningNonStd	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'NonStandardAttribute'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_iod = ?\n\n 	{warning_tag,warning_desc,warning_iod}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetAllQualifiedCTQPByLikeCollectionWithFIleCountAndLoadTimes	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ?\ngroup by collection, site, patient_id, qualified	{collection_like}	{collection,site,patient_id,qualified,num_files,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
PatientStudySopCountByCollectionSite	select \n  distinct patient_id, study_instance_uid, \n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_patient natural join \n  file_study\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, study_instance_uid\norder by patient_id	{collection,site}	{patient_id,study_instance_uid,num_sops}	{counts,for_bill_counts}	posda_files	For every patient in collection site, get a list of studies with a count of distinct SOPs in each study
HowManyRowsInCopyFromPublic	select\n  count(*) as num_copies_total\nfrom file_copy_from_public c\nwhere\n  c.copy_from_public_id = ? 	{copy_from_public_id}	{num_copies_total}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
ImageFrameOfReferenceBySeriesPosda	select \n  distinct for_uid, count(*) as num_files\nfrom\n  file_series natural join file_sop_common natural join file_for natural join ctp_file\nwhere \n  series_instance_uid = ? and visibility is null\ngroup by for_uid	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
PatientDetailsWithBlankCtp	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere\n  project_name = 'UNKNOWN' and visibility is null\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
DistinctPatientStudySeriesByCollectionSite	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  visibility is null\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
FilesByCollectionSitePatientWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  ctp_file\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  project_name = ?\n  and site_name = ?\n  and patient_id = ?	{collection,site,patient_id}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{hide_events}	posda_files	Get List of files for Collection, Site with visibility
ShowAllHideEventsByCollectionSiteAlt	select\n distinct\n  user_name,\n  date_trunc('hour',time_of_change) as hour_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for,\n  count(distinct file_id) as num_files\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file \n  where project_name = ? and site_name = ?\n  and visibility = 'hidden' \n)\ngroup by user_name, hour_of_change, prior_visibility, new_visibility, reason_for	{collection,site}	{user_name,hour_of_change,prior_visibility,new_visibility,reason_for,num_files}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
PrivateTagsWhichArentMarked	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  private_disposition as disp\nfrom\n  element_seen\nwhere\n  is_private is null and \n  element_sig_pattern like '%"%'\n	{}	{id,element_sig_pattern,vr,tag_name,disp}	{tag_usage,simple_phi,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
GetCurrentAdverseFileEvent	select currval('adverse_file_event_adverse_file_event_id_seq') as id	{}	{id}	{NotInteractive,used_in_import_edited_files}	posda_files	Get current dicom_edit_event_id\nFor use in scripts\nNot really intended for interactive use\n
RelinquishControlPosdaImport	update import_control\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null	{}	{}	{NotInteractive,PosdaImport}	posda_files	relese control of posda_import
TagsSeenSimple	select\n  element_sig_pattern, vr, is_private, private_disposition, tag_name\nfrom\n  element_seen order by element_sig_pattern	{}	{element_sig_pattern,vr,is_private,private_disposition,tag_name}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
GetDicomObjectTypeBySeries	select \n  distinct \n  dicom_file_type as dicom_object_type\nfrom dicom_file natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{dicom_object_type}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
GetContourImageLinksByFileId	select\n  distinct roi_id,\n  linked_sop_instance_uid as sop_instance_uid,\n  linked_sop_class_uid as sop_class_uid,\n  contour_type,\n  count(distinct contour_digest) as num_contours,\n  sum(num_points) as num_points\nfrom\n file_roi_image_linkage\nwhere file_id = ?\ngroup by roi_id, linked_sop_instance_uid, linked_sop_class_uid, contour_type	{file_id}	{roi_id,sop_instance_uid,sop_class_uid,contour_type,num_contours,num_points}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
PixelTypes	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type,\n  count(distinct file_id)\nfrom\n  image natural join file_image natural join file_series\n  natural join dicom_file\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,dicom_file_type,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
GetDciodvfyErrorInvalidEleLen	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'InvalidElementLength'\n  and error_tag = ?\n  and error_value = ?\n  and error_subtype = ?\n  and error_reason = ?\n  and error_index = ?\n	{error_tag,error_value,error_subtype,error_reason,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'InvalidElementLength'
ListAllActivities	select\n  activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  when_closed\nfrom\n  activity \norder by activity_id	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
DistinctSeriesByPatientId	select distinct \n  project_name as collection, site_name as site, patient_id, study_instance_uid,\n  series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_study natural join file_series natural join\n  file_patient natural join\n  dicom_file natural join ctp_file\nwhere\n  patient_id = ? and visibility is null\ngroup by \n  collection, site, patient_id, study_instance_uid,\n  series_instance_uid, dicom_file_type, modality\n	{patient_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,modality,dicom_file_type,count}	{dciodvfy,select_for_phi,visual_review_selection,activity_timepoint_support}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
FilesInSeriesWithVisibility	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
GetSeriesBasedOnErrorId	select \n  distinct unit_uid as series_instance_uid\nfrom \n  dciodvfy_unit_scan natural join dciodvfy_unit_scan_error\nwhere\n  dciodvfy_error_id = ?\norder by dciodvfy_error_id	{dciodvfy_error_id}	{series_instance_uid}	{tag_usage,dciodvfy}	posda_phi_simple	find series for a particular dciodvfy_error
GetFilePathPublic	select\n dicom_file_uri as path\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?	{sop_instance_uid}	{path}	{AllCollections,universal,public_posda_consistency}	public	Get path to file by id
DistinctUnhiddenFilesInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
FindInconsistentStudy	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,for_bill_study_consistency}	posda_files	Find Inconsistent Studies\n
BackgroundersByDateRangeWithInvoker	select\n  distinct operation_name, invoking_user, count(distinct subprocess_invocation_id) as num_invocations\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null and operation_name is not null and\n  when_script_started > ? and when_script_ended < ? and\n  when_script_ended is not null\ngroup by operation_name, invoking_user\norder by num_invocations desc	{from,to}	{operation_name,invoking_user,num_invocations}	{invoking_user}	posda_files	Get a list of collections and sites\n
GetSsByFileId	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient natural join file_structure_set\nwhere file_id = ? and visibility is null	{file_id}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
ShowImportsBySopInstance	select \n  file_id, import_time, import_comment \nfrom \n  import_event natural join file_import \nwhere file_id in (\n  select file_id from file_sop_common where sop_instance_uid = ?\n)\norder by import_time	{sop_instance_uid}	{file_id,import_time,import_type,import_comment}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
VisibilityChangeEventsByCollectionByHourNoSeriesOrPatient	select \n  distinct project_name as collection,\n  site_name as site,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, \n  count (distinct patient_id) as num_patients,\n  count (distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,when_done,user_name,prior_visibility,new_visibility,reason_for,num_patients,num_series,num_files}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
DistinctSeriesByCollectionPublicTest	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	public	Get Series in A Collection, Site\n
FindDuplicatedPixelDigests	select\n  distinct pixel_digest, num_files\nfrom (\n  select\n    distinct digest as pixel_digest, count(distinct file_id) as num_files\n  from\n    file_image\n    join image using(image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  group by digest\n) as foo\nwhere num_files > 3\norder by num_files desc\n\n	{}	{pixel_digest,num_files}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
GetPhiNonDicomScanInstanceById	select\n  phi_non_dicom_scan_instance_id,\n  pndsi_description as description,\n  pndsi_start_time as start_time,\n  pndsi_num_files as num_files,\n  pndsi_num_files_scanned as num_files_scanned,\n  pndsi_end_time as end_time\nfrom\n  phi_non_dicom_scan_instance\nwhere\n  phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{phi_non_dicom_scan_instance_id,description,start_time,num_files,num_files_scanned,end_time}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
BackgroundProcessStatsWithInvokerNullComand	select\n  distinct operation_name, command_executed, invoking_user as invoker, \n  max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null and operation_name is null\ngroup by operation_name, command_executed, invoker	{}	{operation_name,command_executed,invoker,longest,shortest,avg,times_invoked,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
FilesInStudy	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_sop_common\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
FilesByPatientForApplicationOfPrivateDisposition	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_patient\n  natural join file_sop_common\nwhere\n patient_id = ? and visibility is null\n	{patient_id}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,edit_files}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
GetSubProcessInvocationId	select currval('subprocess_invocation_subprocess_invocation_id_seq') as id	{}	{id}	{NotInteractive,used_in_background_processing}	posda_queries	Get the id of the subprocess_invocation row just created
UpdPosdaPhiSimplePrivDisp	update\n  element_seen\nset\n  private_disposition = ?\nwhere\n  element_sig_pattern = ? and\n  vr = ?\n\n	{private_disposition,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Update name_chain in element_seen
GetImageGeoBySop	select \n  distinct sop_instance_uid, iop as image_orientation_patient,\n  ipp as image_position_patient,\n  pixel_spacing,\n  pixel_rows as i_rows,\n  pixel_columns as i_columns\nfrom\n  file_sop_common join\n  ctp_file using(file_id) join\n  file_patient using (file_id) join\n  file_image using (file_id) join \n  file_series using (file_id) join\n  file_study using (file_id) join\n  image using (image_id) join\n  file_image_geometry using (file_id) join\n  image_geometry using (image_geometry_id) \nwhere \n  sop_instance_uid = ? and visibility is null\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	posda_files	Get Geometric Information by Sop Instance UID from posda
GetPatientStatus	select\n  patient_import_status as status\nfrom\n  patient_import_status\nwhere\n  patient_id = ?\n	{patient_id}	{status}	{NotInteractive,PatientStatus,Update}	posda_files	Get Patient Status
GetVisualReviewStatusBothCountsById	select \n  distinct review_status, processing_status, count(distinct series_instance_uid) as num_series\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ?\ngroup by review_status, processing_status	{visual_review_instance_id}	{review_status,processing_status,num_series}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
ValueSeenByElementSeen	select value from value_seen where value_seen_id in (\n  select  value_seen_id\n  from element_value_occurance\nwhere\n    element_seen_id in (\n      select element_seen_id\n      from\n        element_seen\n      where\n        element_sig_pattern = ?\n    )\n)	{element_sig_pattern}	{value}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
ValuesByVr	select distinct value, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n) as foo\ngroup by value\norder by value\n	{scan_id,vr}	{value,count}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetSiteCodes	select\n  site_name, site_code\nfrom\n  site_codes\n  	{}	{site_name,site_code}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
ListOpenActivitiesWithItemCount	select\n  distinct activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  count(distinct user_inbox_content_id) as num_items\nfrom\n  activity natural left join activity_inbox_content\nwhere when_closed is null\ngroup by activity_id, brief_description, when_created, who_created\norder by activity_id desc	{}	{activity_id,brief_description,when_created,who_created,num_items}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
PatientDetailsWithNoCtp	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n  patient_id = ?\n  and not exists (select file_id from ctp_file c where c.file_id = f.file_id)\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{patient_id}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
InsertPublicDisposition	insert into public_disposition(\n  element_signature_id, sop_class_uid, name, disposition\n) values (\n  ?, ?, ?, ?\n)\n\n	{element_signature_id,sop_class_uid,name,disposition}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Insert a public disposition
UpdPosdaPhiEleName	update\n  element_signature\nset\n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n\n	{name,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Update name_chain in element signature
StudyConsistency	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency,study_consistency}	posda_files	Check a Study for Consistency\n
UpdateCopyInformation	update copy_from_public set \n  status_of_copy = ?,\n  pid_of_running_process = ?\nwhere copy_from_public_id = ?	{status_of_copy,pid_of_running_process,copy_from_public_id}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
PatientStatusCounts	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, status\norder by collection, status\n	{}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
DuplicatePixelDataByProject	select image_id, file_id\nfrom file_image where image_id in (\n  select image_id\n  from (\n    select distinct image_id, count(*)\n    from (\n      select distinct image_id, file_id \n      from file_image\n      where file_id in (\n        select\n          distinct file_id \n        from ctp_file\n        where project_name = ? and visibility is null\n      )\n    ) as foo\n    group by image_id\n  ) as foo\n  where count > 1\n)\norder by image_id;\n	{collection}	{image_id,file_id}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data\n
DistinctSeriesByCollectionLikePatient	select distinct patient_id, series_instance_uid, modality, count(*)\nfrom (\nselect distinct patient_id, series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct patient_id, series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common natural join file_patient\n   natural join ctp_file\nwhere\n  project_name = ? and patient_id like ?\n  and visibility is null)\nas foo\ngroup by patient_id, series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by patient_id, series_instance_uid, modality\n	{project_name,patient_id_like}	{patient_id,series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
RoiWithForAndFileIdByCollectionSite	select\n  distinct for_uid, roi_num, roi_name, file_id\nfrom\n  roi natural join file_structure_set natural join ctp_file\nwhere \n  project_name = ? and site_name = ? and visibility is null\norder by file_id, for_uid	{collection,site}	{for_uid,roi_num,roi_name,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
SeriesVisualReviewResultsByCollectionSite	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetFilesWithNoStudyInfoByCollection	select\n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location\nwhere file_id in (\nselect \n  distinct file_id\nfrom \n ctp_file c\nwhere\n  project_name = ? and \n  visibility is null and \n  not exists (\n    select\n      file_id \n    from\n      file_study s \n    where\n      s.file_id = c.file_id\n  )\n)	{collection}	{file_id,path}	{reimport_queries,dicom_file_type}	posda_files	Get file path from id
GetDupContourCountsExtended	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  file_id,\n  num_dup_contours\nfrom (\n  select \n    distinct file_id, count(*) as num_dup_contours\n  from\n    file_roi_image_linkage \n  where \n    contour_digest in (\n    select contour_digest\n    from (\n      select \n        distinct contour_digest, count(*)\n      from\n        file_roi_image_linkage group by contour_digest\n    ) as foo\n    where count > 1\n  ) group by file_id \n) foo join ctp_file using (file_id) join file_patient using(file_id)\norder by num_dup_contours desc	{}	{collection,site,patient_id,file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
FindInconsistentSeriesIgnoringTimeCollectionLike	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name like ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection_like}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series by Collection Site\n
UpdateEquivalenceClassReviewStatus	update image_equivalence_class\nset review_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
SummaryOfToFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file f, dicom_edit_compare dec \n  where\n    f.digest = dec.to_file_digest and dec.subprocess_invocation_id = ?\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, \n  series_instance_uid, dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{subprocess_invocation_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
PosdaTotalsHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility = 'hidden'\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Get totals of files hidden in Posda\n
VisualReviewStatusByCollection	select \n  distinct series_instance_uid, visibility, review_status, modality, series_description,\n  series_date, count(distinct image_equivalence_class_id) as num_equiv_classes, \n  count(distinct file_id) as num_files\nfrom\n  image_equivalence_class natural join\n  image_equivalence_class_input_image natural join\n  file_series natural join ctp_file\nwhere\n  project_name = ? and visibility is null and review_status = ?\ngroup by series_instance_uid, visibility, review_status, modality, series_description, series_date;	{collection,review_status}	{series_instance_uid,review_status,visibility,modality,series_description,series_date,num_equiv_classes,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
SopInstanceFilePathCountAndLoadTimesBySeries	select\n  distinct sop_instance_uid, file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common\n  natural join file_series\nwhere series_instance_uid = ?\ngroup by sop_instance_uid, file_id, path\norder by sop_instance_uid, first_loaded	{series_instance_uid}	{sop_instance_uid,file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,dup_sops}	posda_files	Get file path from id
GetPosdaQueueSize	select\n count(*) as num_files\nfrom\n  file \nwhere\n  is_dicom_file is null and\n  ready_to_process and\n  processing_priority is not null\n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_files	Get size of queue  in Posda\nRemoved by Quasar on 2018-11-25. Results are not identical but it is more than 500 times faster\nNATURAL JOIN file_location NATURAL JOIN file_storage_root
PosdaPublicDifferenceReportByEditId	select\n  distinct short_report_file_id, long_report_file_id, count(distinct sop_instance_uid) as num_files\nfrom public_to_posda_file_comparison\nwhere compare_public_to_posda_instance_id =?\ngroup by short_report_file_id, long_report_file_id order by short_report_file_id	{compare_public_to_posda_instance_id}	{short_report_file_id,long_report_file_id,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
LookUpTag	select\n  tag, name, keyword, vr, vm, is_retired, comments\nfrom \n  dicom_element\nwhere\n  name = ? or\n  keyword = ?	{name,keyword}	{tag,name,keyword,vr,vm,is_retired,comments}	{NotInteractive,used_in_dciodvfy}	dicom_dd	Get tag from name or keyword
SeriesListByStudyInstanceUid	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file\nwhere \n  study_instance_uid = ?\n  and visibility is null\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{study_instance_uid}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy}	posda_files	Get List of Series by Study Instance UID
NumEquipSigsForTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
FilesWithIndicesByElementScanId	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, sequence_level,\n  item_number\nfrom\n  series_scan natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_element_id = ?\n	{scan_element_id}	{series_instance_uid,file,element_signature,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
ShowFilesHiddenByUserDateRange	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  reason_for as reason,\n  prior_visibility as before,\n  new_visibility as after,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(distinct file_id) as num_files\nfrom \n  file_visibility_change natural join\n  file_patient natural join\n  file_study natural join\n  file_series natural join \n  ctp_file\nwhere\n  user_name = ? and\n  time_of_change > ? and time_of_change < ?\ngroup by\n   collection, site, \n   patient_id, study_instance_uid,\n   series_instance_uid, reason, before, after\norder by\n  patient_id, study_instance_uid, series_instance_uid	{user,from,to}	{collection,site,patient_id,study_instance_uid,series_instance_uid,reason,before,after,num_files,earliest,latest}	{find_series,equivalence_classes,consistency,visual_review_results,old_hidden}	posda_files	Show Files Hidden By User Date Range
GlobalUnhiddenSOPDuplicatesSummary	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid, min(import_time) as first_upload, max(import_time) as\n  last_upload, count(distinct file_id) as num_dup_sops,\n  count(*) as num_uploads from (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\nnatural join file_sop_common natural join file_series natural join file_study\nnatural join ctp_file natural join file_patient natural join file_import\nnatural join import_event\ngroup by project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid\norder by project_name, site_name, patient_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,num_dup_sops,num_uploads,first_upload,last_upload}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
RoiInfoByFileId	select\n  distinct roi_id, for_uid,\n  max_x, max_y, max_z,\n  min_x, min_y, min_z,\n  roi_name, roi_description , roi_interpreted_type\nfrom\n  roi natural join file_structure_set\nwhere file_id = ?	{file_id}	{roi_id,for_uid,max_x,max_y,max_z,min_x,min_y,min_z,roi_name,roi_description,roi_interpreted_type}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
FirstFileInSeriesPublic	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan,public}	public	First files in series in Public\n
GetRoiCounts	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\ngroup by sop_instance_uid\norder by count desc\n	{}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
GetZipUploadEventsByDateRangeNonDicomOnly	select distinct import_event_id, import_time, count (distinct file_id) as num_files from (\n  select import_event_id, file_id, import_time, rel_path, file_type\n  from file_import natural join import_event join file using(file_id)\n  where import_time > ? and import_time < ? and import_comment = 'zip'\n  and (rel_path like '%.docx' or rel_path like '%.xls' or rel_path like '%.xlsx' or rel_path like '%.csv')\n) as foo\ngroup by import_event_id, import_time	{from,to}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
ChangeFileStorageRootIdByFileIdAndOldStorageRootId	update\n  file_location\nset file_storage_root_id = ?\nwhere file_storage_root_id = ?\nand file_id = ?	{new_file_storage_root_id,old_file_storage_root_id,file_id}	{}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
DoesDoseReferenceGoodPlan	select\n  sop_instance_uid\nfrom\n  file_sop_common fsc, rt_dose d natural join file_dose f\nwhere\n  f.file_id = ? and d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid	{file_id}	{sop_instance_uid}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Determine whether an RTDOSE references a known plan\n\n
DciodvfyErrorIdsBySeriesAndScanInstance	select                                                    \n  dciodvfy_error_id\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{dciodvfy_error_id}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
UnlinkEmailFromActivity	delete from activity_inbox_content\nwhere activity_id = ? and user_inbox_content_id = ?	{activity_id,user_inbox_content_id}	{}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
PrivateTagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
GetDosesAndPlanReferences	select\n  sop_instance_uid as dose_referencing,\n  rt_dose_referenced_plan_uid as plan_referenced\nfrom\n  rt_dose natural join file_dose join file_sop_common using (file_id)	{}	{dose_referencing,plan_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of dose and plan sops where dose references plan\n
CountsByCollectionSiteDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
DupSopsByCollectionDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ?  and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, sop_instance_uid\n\n	{collection,from,to}	{collection,site,subj_id,sop_instance_uid,num_files}	{duplicates,dup_sops,hide_dup_sops,check_dups}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetPosdaFileIdByDigest	select\n file_id\nfrom\n  file\nwhere\n  digest = ?\n\n	{digest}	{file_id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of file by file_digest
DistinctSeriesByCollectionSitePublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	public	Get Series in A Collection, Site\n
GetLoadWeeks	select \n  distinct load_week from (\n  select \n    distinct file_id, date_trunc('week', min(import_time)) as load_week\n  from \n    file_import natural join import_event\n  where\n    import_time >= ? and import_time < ?\n  group by file_id\n) as foo \norder by load_week;	{from,to}	{load_week}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
InsertEditImportEvent	insert into import_event(\n  import_type, import_comment, import_time\n) values (\n  ?, ?, now()\n)	{import_type,import_comment}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Insert an Import Event for an Edited File
VisibilityChangeEventsByCollectionByHour	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, series_instance_uid, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,series_instance_uid,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
RoundCountsByCollection2	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ?\norder by round_id, collection	{collection}	{round_id,collection,num_dups,round_created,round_start,round_end,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
ListOfRepeatingPrivateElementsFromDD	select\n  ptrg_signature_masked as tag,\n  ptrg_base_grp as base_grp,\n  ptrg_grp_mask as id_mask,\n  ptrg_grp_ext_mask as ext_mask,\n  ptrg_grp_ext_shift as ext_shift,\n  ptrg_consensus_vr as vr,\n  ptrg_consensus_vm as vm,\n  ptrg_consensus_name as name \nfrom ptrg	{}	{tag,base_grp,id_mask,ext_mask,ext_shift,vr,vm,name}	{ElementDisposition}	posda_private_tag	Get List of Repeating Private Tags from DD
FinalizeComparePublicToPosdaInstance	update compare_public_to_posda_instance set\n  status_of_compare = 'Comparisons In Progress',\n  when_compare_completed = now(),\n  last_updated = now()\nwhere\n  compare_public_to_posda_instance_id = ?\n	{compare_public_to_posda_instance_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
GetSsReferencingUnknownImagesByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, series_instance_uid, file_id\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere file_id in (\nselect\n  distinct ss_file_id as file_id from \n(select\n  sop_instance_uid, ss_file_id \nfrom (\n  select \n    distinct linked_sop_instance_uid as sop_instance_uid, file_id as ss_file_id\n  from\n    file_roi_image_linkage\n  ) foo left join file_sop_common using(sop_instance_uid)\n  where\n  file_id is null\n) as foo\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDciodvfyErrorUncat	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'Uncategorized'\n  and error_text = ?	{error_text}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
GetDciodvfyErrorInvalidValueForVr	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'InvalidValueForVr'\n  and error_tag = ? and\n  error_index = ? and\n  error_value = ? and\n  error_reason = ? and\n  error_subtype = ?\n	{error_tag,error_index,error_value,error_reason,error_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'InvalidValueForVr'
HideEvents	select\n  distinct date_trunc('day', time_of_change) as when_done, \n  reason_for,\n  user_name, \n  count(*) as num_files\nfrom\n  file_visibility_change\ngroup by when_done, reason_for, user_name\norder by when_done desc	{}	{when_done,reason_for,user_name,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
SimplePhiReportAllMetaQuotes	select \n  distinct '<' || element_sig_pattern || '>' as element, vr, \n  '<' || value || '>' as q_value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ?\ngroup by element_sig_pattern, vr, value, description\norder by vr, element, q_value\n	{scan_id}	{element,vr,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
CreateBackgroundReport	insert into background_subprocess_report(\n  background_subprocess_id,\n  file_id,\n  name\n) values (\n  ?, ?, ?\n)\nreturning background_subprocess_report_id\n	{background_subprocess_id,file_id,name}	\N	{NotInteractive,used_in_background_processing}	posda_queries	Create a new entry in background_subprocess_report table
PublicCollectionCounts	select\n        tdp.project as Collection,'|',\n        group_concat(distinct s.modality) as Modalities,'|',\n        count(distinct p.patient_id) as Pts,'|',\n        count(distinct t.study_instance_uid) as Studies,'|',\n        count(distinct s.series_instance_uid) as Series,'|',\n        count(distinct i.sop_instance_uid) as Images, '|',\n        format(sum(i.dicom_size)/1000000000,1) as GBytes\n \n     from\n        general_image i,\n        general_series s,\n        study t,\n        patient p,\n        trial_data_provenance tdp\n \n     where\n        i.general_series_pk_id = s.general_series_pk_id and\n        s.study_pk_id = t.study_pk_id and\n        t.patient_pk_id = p.patient_pk_id and\n        p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n        tdp.project =? and\n        s.visibility = ?\n \n     group by tdp.project	{collection,visibility}	{Collection,Modalities,Pts,Studies,Series,Images,GBytes}	{AllCollections,DateRange,Kirk,Totals,count_queries,end_of_month}	public	Get public totals for collection\n\nUsed to fill in "Detailed description" on public Wiki page\n\n
PatientIdMappingByToPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift,\n  site_code\nfrom \n  patient_mapping\nwhere\n  to_patient_id = ?	{to_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root,computed_shift,site_code}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
ListActivities	select\n  activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  when_closed\nfrom\n  activity\norder by activity_id desc	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
CreateNonDicomFileChangeRow	insert into non_dicom_file_change(\n  file_id, file_type, file_sub_type, collection, site, subject, visibility, when_categorized,\n  when_recategorized, who_recategorized, why_recategorized)\nvalues(\n  ?, ?, ?, ?, ?, ?, ?, ?,\n  now(), ?, ?\n)\n	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,who,why}	{}	{radcomp}	posda_files	Add a filter to a tab
FileNamesBySeriesAndImportId	select file_id, file_name\nfrom file_import natural join import_event natural join file_series\nwhere import_event_id = ? and series_instance_uid = ?	{import_event_id,series_instance_uid}	{file_id,file_name}	{downloads_by_date,import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
SimplePhiReportPrivateOnlyByScanVrScreenDeletedPT	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ? and\n  is_private and\n  private_disposition in ('k', 'oi', 'h', 'o')\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
FindingFilesWithImageProblem	select file_id, root_path || '/' || rel_path as path\nfrom (\n  select file_id, image_id \n  from pixel_location left join image using(unique_pixel_data_id)\n  where file_id in (\n    select\n       distinct file_id from file_import natural join import_event natural join dicom_file\n    where import_time > '2018-09-17'\n  )\n) as foo natural join ctp_file natural join file_location natural join file_storage_root\nwhere image_id is null and visibility is null\n	{}	{file_id,path}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
GetDciodvfyUnitScanErrorId	select currval('dciodvfy_unit_scan_error_dciodvfy_unit_scan_error_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
FilesIdsVisibleInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
RequestShutdown	update control_status\n  set pending_change_request = 'shutdown',\n  source_pending_change_request = 'DbIf',\n  request_time = now()	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	request a shutdown of Backlog processing
GetPixelPaddingInfo	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join \n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT'\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
ListHiddenFilesByCollectionPatient	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id,\n  visibility as old_visibility\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_series\nwhere\n  visibility is not null and\n  project_name = ? and\n  patient_id = ?	{collection,patient_id}	{collection,site,patient_id,series_instance_uid,file_id,old_visibility}	{find_series,equivalence_classes,consistency,visual_review_results,old_visibility}	posda_files	Show Received before date by collection, site
DistinctSeriesByCollectionPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,public}	public	Get Series in A Collection\n
DciodvfyErrorsStringBySeriesAndScanInstance	select                                                    \n  dciodvfy_error_id || '|' ||\n  error_type || '|' ||                                                                                                                                                                                                                   \n  error_tag || '|' ||\n  coalesce(error_value, '[null]') || '|' ||\n  coalesce(error_subtype, '[null]') || '|' ||\n  coalesce(error_module, '[null]') || '|' ||\n  coalesce(error_reason, '[null]') || '|' ||\n  coalesce(error_index, '[null]') || '|' ||\n  coalesce(error_text, '[null]') as error_string\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{error_string}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
DistinctSeriesByImportEventByPatLike	select\n  distinct series_instance_uid, count(distinct file_id) as num_files\nfrom (\n  select distinct series_instance_uid, file_id \n  from file_series \n  where file_id in (\n    select\n      distinct file_id from file_import where import_event_id in (select import_event_id from (\n        select\n          distinct import_event_id, import_time,  import_type, count(distinct file_id) as num_files\n        from\n          import_event natural join file_import natural join file_patient\n        where\n          import_type = 'multi file import' and\n          patient_id like ?\n         group by import_event_id, import_time, import_type\n       ) as foo\n    )\n  )\n)as foo\ngroup by series_instance_uid\n	{patient_id_like}	{series_instance_uid,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
GetSeriesWithSignature	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series with Signatures by Collection\n
SeriesByNotLikeDescriptionAndCollectionSite	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere \n  project_name = ? and site_name = ? and \n  visibility is null and\n  series_description not like ?\n	{collection,site,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection, Site not matching Series Description\n
HideEventInfo	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  ctp_file natural join\n  file_series natural join \n  file_patient\nwhere file_id in (\nselect\n  distinct file_id\nfrom\n  file_visibility_change\nwhere\n  date_trunc('day', time_of_change) = ? and\n  reason_for = ? and\n  user_name = ?\n)\ngroup by\n  collection, site, patient_id, series_instance_uid\norder by\n  collection, site, patient_id, series_instance_uid	{day_of_change,reason_for,user_name}	{collection,site,patient_id,series_instance_uid,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
SeriesInHierarchyBySeriesExtended	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_description,\n  series_date,\n  modality,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by\n  collection, site, patient_id, study_instance_uid, study_date,\n  study_description, series_instance_uid, series_description,\n  series_date, modality\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_description,series_date,modality,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
DupSopsByCollection	select distinct sop_instance_uid, min(latest) as earliest, max(latest) as latest\nfrom (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo\ngroup by sop_instance_uid	{collection}	{sop_instance_uid,earliest,latest}	{meta,test,hello,bills_test,check_dups}	posda_files	List of duplicate sops with file_ids and latest load date
GetSimpleSeriesScanId	select currval('series_scan_instance_series_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get id of newly created series_scan_instance
AddPhiSimpleElement	insert into element_seen (\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\n) values (\n  ?, ?, ?, ?, ?\n)\n	{element_signature,vr,is_private,private_disposition,name_chain}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Add an element_seen row to posda_phi_simple
CreateFileSend	insert into dicom_file_send(\n  dicom_send_event_id, file_path, status, file_id_sent\n) values (\n  ?, ?, ?, ?\n)\n	{id,path,status,file_id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Add a file send row\nFor use in scripts.\nNot meant for interactive use\n
GetEditStatus	select\n  subprocess_invocation_id as id,\n  start_creation_time, end_creation_time - start_creation_time as duration,\n  number_edits_scheduled as to_edit,\n  number_compares_with_diffs as changed,\n  number_compares_without_diffs as not_changed,\n  current_disposition as disposition,\n  dest_dir\nfrom\n  dicom_edit_compare_disposition\norder by start_creation_time desc	{}	{id,start_creation_time,duration,to_edit,changed,not_changed,disposition,dest_dir}	{adding_ctp,find_patients,series_selection,check_edits,testing_edit_objects,edit_status}	posda_files	Get List of visible patients with CTP data
CreateBackgroundInputLine	insert into background_input_line(\n  background_subprocess_id,\n  line_number,\n  line\n) values (\n  ?, ?, ?\n)	{background_subprocess_id,param_index,param_value}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_input_line table\n\nUsed by background subprocess
PhiNonDicomScanStatusInProgress	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   now() - pndsi_start_time as time_running\nfrom\n  phi_non_dicom_scan_instance\nwhere pndsi_end_time is null\norder by start_time	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,time_running}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
SeriesWithExactlyNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count = ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with exactly n equivalence classes
GetPosdaFilesImportControl	select\n  status,\n  processor_pid,\n  idle_seconds,\n  pending_change_request,\n  files_per_round\nfrom\n  import_control	{}	{status,processor_pid,idle_seconds,pending_change_request,files_per_round}	{NotInteractive,PosdaImport}	posda_files	Get import control status from posda_files database
AllValuesByElementSig	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
tags_by_role	select\n  filter_name as role, unnest(tags_enabled) as tag\nfrom query_tag_filter where filter_name = ?	{role}	{role,tag}	{roles}	posda_queries	Show a complete list of associated tags for a role\n
GetDicomEditCompareDisposition	select\n  number_edits_scheduled,\n  number_compares_with_diffs,\n  number_compares_without_diffs,\n  current_disposition,\n  dest_dir\nfrom\n  dicom_edit_compare_disposition\nwhere\n  subprocess_invocation_id = ?\n  	{subprocess_invocation_id}	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,current_disposition,dest_dir}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
SeriesCollectionSite	select distinct\n  series_instance_uid\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{series_instance_uid}	{find_series}	posda_files	Get a list of Series by Collection, Site\n
GetStartOfWeek	select \n  date_trunc('week', to_timestamp(?, 'yyyy-mm-dd')) as start_week\n 	{from}	{start_week}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
VisibilityChangeEventsByCollectionForHiddenFiles	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, \n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(*)\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and\n  visibility is not null\ngroup by collection, site, patient_id, user_name, time, reason_for\norder by time, collection, site, patient_id	{collection}	{collection,site,patient_id,user_name,time,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
CreateSubprocessInvocationButton	insert into subprocess_invocation (\n  from_spreadsheet,\n  from_button,\n  query_invoked_by_dbif_id,\n  button_name,\n  command_line,\n  invoking_user,\n  when_invoked,\n  operation_name\n) values (\n  false, true, ?, ?, ?, ?, now(), ?\n)\nreturning subprocess_invocation_id\n	{query_invoked_by_dbif_id,btn_name,command_line,invoking_user,operation_name}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_invocation table\n\nUsed when invoking a spreadsheet operation from a button
InsertIntoSeriesScan	insert into series_scan(\n  scan_event_id, equipment_signature_id, series_instance_uid,\n  series_scan_status, series_scanned_file\n) values (\n  ?, ?, ?, 'In Process', ?)	{scan_id,equipment_signature_id,series_instance_uid,series_scanned_file}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
TestThisOne	select\n  patient_id, patient_import_status,\n  count(distinct file_id) as total_files,\n  min(import_time) min_time, max(import_time) as max_time,\n  count(distinct study_instance_uid) as num_studies,\n  count(distinct series_instance_uid) as num_series\nfrom\n  ctp_file natural join file natural join\n  file_import natural join import_event natural join\n  file_study natural join file_series natural join file_patient\n  natural join patient_import_status\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, patient_import_status\n	{project_name,site_name,PatientStatus}	{patient_id,patient_import_status,total_files,min_time,max_time,num_studies,num_series}	{}	posda_files	
ListOfPrivateElementsWithNullDispositions	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and private_disposition is null\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetSeriesForPhiInfo	select \n  series_instance_uid\nfrom \n  series_scan_instance \nwhere series_scan_instance_id in (\n  select series_scan_instance_id \n  from element_value_occurance \n  where element_seen_id in (\n    select \n      element_seen_id \n    from element_seen \n    where element_sig_pattern = ? and vr = ?\n  )\n  and value_seen_id in (\n    select value_seen_id \n    from value_seen\n    where value = ?\n  )\n  and phi_scan_instance_id = ?\n)	{element,vr,value,scan_id}	{series_instance_uid}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get an element_seen row by element, vr (if present)
GetElementSignature	select * from element_signature\n  where element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,is_private,vr}	{UsedInPhiSeriesScan,NotInteractive,ElementDisposition}	posda_phi	Get Element Signature By Signature (pattern) and VR
ActiveQueriesRunning	select \n  datname, pid,\n  now() - query_start as time_query_running, \n  query\nfrom pg_stat_activity\nwhere\n  state = 'active'\norder by datname, state\n	{}	{datname,pid,time_query_running,query}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
AllVrsByElementSig	select distinct vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by element_signature, vr, equipment_signature\norder by element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
GetListStructureSetsByCollectionSite	select \n  distinct project_name, site_name, patient_id, sop_instance_uid\nfrom\n  file_sop_common natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  dicom_file_type = 'RT Structure Set Storage' and visibility is null\n  and project_name = ? and site_name = ?\norder by project_name, site_name, patient_id	{collection,site}	{project_name,patient_id,site_name,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set List\n\n
GetDciodvfyWarningUnrecog	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedTag'\n  and warning_tag = ?\n  and warning_comment = ?\n 	{warning_tag,warning_comment}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetPosdaDupSopCounts	select sop_instance_uid, num_files from (\nselect distinct sop_instance_uid, count(distinct file_id) as num_files from (\nselect\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name = ? \n  and visibility is null\n) as foo group by sop_instance_uid\n) as foo where num_files > 1	{collection}	{sop_instance_uid,num_files}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
DuplicateSopsInSeriesFast	select * from (\n  select\n    distinct sop_instance_uid, count(*) as num_sops\n  from file_sop_common where file_id in (\n    select distinct file_id\n    from file_series natural join ctp_file \n    where series_instance_uid = ? and visibility is null\n  ) group by sop_instance_uid\n) as foo where num_sops > 1\n	{series_instance_uid}	{sop_instance_uid,num_sops}	{by_series,dup_sops,"ACRIN-FMISO-Brain Duplicate Elimination"}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
SeriesReportForStructLinkageTest	select\n  file_id, (\n    select root_path \n    from file_storage_root\n    where file_storage_root.file_storage_root_id = file_location.file_storage_root_id\n  ) || '/' || rel_path as file_name,\n  sop_instance_uid, sop_class_uid,\n  study_instance_uid, series_instance_uid,\n  for_uid, iop, ipp\nfrom\n  file_location\n  natural join file_series \n  natural join file_study\n  natural join file_sop_common\n  left join file_image_geometry using(file_id) \n  left join image_geometry using(image_geometry_id)\nwhere file_id in (\n  select file_id from file_series natural join ctp_file\n  where series_instance_uid = ?\n    and visibility is null\n)	{series_instance_uid}	{file_id,file_name,sop_instance_uid,sop_class_uid,study_instance_uid,series_instance_uid,for_uid,iop,ipp}	{by_series_instance_uid,duplicates,posda_files,sops,series_report}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
DuplicateSopsInSeries	select\n  sop_instance_uid, import_time, file_id\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\norder by sop_instance_uid, import_time\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series,dup_sops,"ACRIN-FMISO-Brain Duplicate Elimination"}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
ListOfAvailableQueriesForDescEditBySchema	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere schema = ?\norder by name	{schema}	{name,description,query,tags}	{AllCollections,schema}	posda_queries	Get a list of available queries
EquivalenceClassStatusSummary	select \n  distinct patient_id, study_instance_uid, series_instance_uid,\n  processing_status, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image \n  natural join file_study natural join file_series natural join file_patient\ngroup by \n  patient_id, study_instance_uid, series_instance_uid, processing_status\norder by \n  patient_id, study_instance_uid, series_instance_uid, processing_status	{}	{patient_id,study_instance_uid,series_instance_uid,processing_status,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
ElementScanIdByScanValueTag	select \n  distinct scan_element_id\nfrom\n  scan_element natural join element_signature\n  natural join series_scan natural join seen_value\n  natural join scan_event\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n	{scan_id,value,tag}	{scan_element_id}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FinalizeDciodvfyScanInstance	update dciodvfy_scan_instance set\n  end_time = now()\nwhere\n  dciodvfy_scan_instance_id = ?	{dciodvfy_scan_instance_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetEditList	select * from dicom_edit_event	{}	{dicom_edit_event_id,from_dicom_file,to_dicom_file,edit_desc_file,when_done,performing_user}	{ImageEdit}	posda_files	Get list of dicom_edit_event
GetUnkQualifiedCTQPByLikeCollectionSiteWithNoFiles	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id p\nwhere collection like ? and site = ? and qualified is null and\n  not exists (select file_id from file_patient f where f.patient_id = p.patient_id)\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
RoundSummary1DateRange	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_start > ? and round_end < ?\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
WhatHasComeInRecently	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history,for_bill_counts}	posda_backlog	A query to tell you what has been recently received:<ul>\n  <li>interval = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'sec'</li>\n  <li>from = start date/time (midnight if time not included)</li>\n  <li>to = end date/time (midnight if time not included)</li>\n</ul>
FilesByScanValueTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
InboxContentAllByUser	select\n user_name, user_inbox_content_id as id, operation_name,\n  current_status,\n  activity_id, brief_description,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural left join subprocess_invocation\n  natural left join spreadsheet_uploaded\n  natural left join activity_inbox_content natural left join\n  activity\nwhere user_name = ?\norder by user_inbox_content_id desc	{user_name}	{user_name,id,operation_name,current_status,activity_id,brief_description,when,file_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
NewSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
PatientStudySeriesHierarchyByCollectionNotMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
SummaryOfMultipleFileImportEventsWithEarliestLatestEtc	select \n  distinct import_type,\n  min(import_time) as earliest,\n  max(import_time) as latest,\n  count(distinct import_event_id) as num_imports,\n  sum(num_files) as total_files\nfrom (\n  select\n    distinct import_event_id,\n    import_time, import_type,\n    import_comment,\n    count(distinct file_id) as num_files\n  from\n    import_event natural join file_import\n  group by import_event_id, import_time, import_type, import_comment\n) as foo\nwhere num_files > 1 group by import_type	{}	{import_type,earliest,latest,num_imports,total_files}	{downloads_by_date,import_events}	posda_files	Counts query by Collection, Site\n
DuplicateSopsInSeriesNew	select\n  sop_instance_uid, date_trunc('day',import_time) as import_day, file_id\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\norder by sop_instance_uid, import_day, file_id\n	{series_instance_uid}	{sop_instance_uid,import_day,file_id}	{by_series,dup_sops,"ACRIN-FMISO-Brain Duplicate Elimination"}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
UpdateElementDisposition	update element_signature set \n  private_disposition = ?,\n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{private_disposition,name_chain,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
InsertDistinguishedDigest	insert into distinguished_pixel_digests(\n  pixel_digest,\n  type_of_pixel_data,\n  sample_per_pixel,\n  number_of_frames,\n  pixel_rows,\n  pixel_columns,\n  bits_stored,\n  bits_allocated,\n  high_bit,\n  pixel_mask,\n  num_distinct_pixel_values) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n);	{pixel_digest,type_of_pixel_data,sample_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,pixel_mask,num_distinct_pixel_values}	{}	{duplicates,distinguished_digest}	posda_files	insert distinguished pixel digest
GetDoses	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect distinct file_id from rt_dose d natural join file_dose)	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetUnreadInboxItems	select\n  user_inbox_content_id,\n  background_subprocess_report_id,\n  current_status,\n  date_entered\nfrom user_inbox_content \nnatural join user_inbox \nwhere date_dismissed is null\n  and user_name = ?\n	{user_name}	{user_inbox_content_id,background_subprocess_report_id,current_status,date_entered}	{}	posda_queries	Get a list of unread messages from the user's inbox.
StopTransaction	commit	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetVisibilityByFileId	select\n  file_id, visibility\nfrom\n   ctp_file\nwhere\n   file_id = ?\n	{file_id}	{file_id,visibility}	{ImageEdit,NotInteractive}	posda_files	Get Visibility for a file by file_id\n
FindInconsistentStudyIgnoringStudyTimeByCollectionSite	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and site_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
AddHocQuery1	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, dicom_file_type, modality,\n  count(distinct file_id) as num_files, count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest, max(import_time) as latest\nfrom\n  ctp_file natural join file_patient natural join dicom_file natural join file_series natural join\n  file_sop_common natural join\n  file_study join file_import using(file_id) join import_event using (import_event_id)\nwhere file_id in(\n  select distinct file_id from file_patient where patient_id = 'ER-1125'\n) and visibility is null \ngroup by collection, site, patient_id, study_instance_uid, series_instance_uid, dicom_file_type, modality	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files,num_sops,earliest,latest}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
PosdaTotalsWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get total posda files including hidden\n
GetSeriesWithImageByCollection	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
AllManifests	select\n  distinct file_id, import_time, size, root_path || '/' || l.rel_path as path, i.file_name as alt_path\nfrom\n  file_location l join file_storage_root using(file_storage_root_id) \n  join file_import i using (file_id) natural join file join import_event using(import_event_id)\nwhere\n  file_type like '%ASCII%' and\n  l.rel_path like '%/Manifests/%'\norder by import_time	{}	{file_id,import_time,size,path,alt_path}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
ListOfAvailableQueriesBySchema	select\n  name, description,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere schema = ?\norder by name	{schema}	{name,description,tags}	{AllCollections,schema}	posda_queries	Get a list of available queries
GetGeometricInfoPublic	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	public	Get Geometric Information by Sop Instance UID from public
PatientReportDateRange	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and\n  import_time > ? and\n  import_time < ? and\n  visibility is null\ngroup by \n  collection, site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{collection,site,patient_id,start_time,end_time}	{collection,site,patient_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
InsertIntoSiteCodes	insert into site_codes(site_name, site_code)\nvalues (?, ?)	{site_name,site_code}	{}	{adding_ctp,mapping_tables,for_scripting}	posda_files	Make an entry into the site_codes table
TagsSeenSimplePrivate	select\n  element_sig_pattern, vr, private_disposition, tag_name\nfrom\n  element_seen\nwhere\n  is_private\norder by element_sig_pattern	{}	{element_sig_pattern,vr,private_disposition,tag_name}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
DupSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
UpdateDicomEditCompareDisposition	update dicom_edit_compare_disposition set\n  number_edits_scheduled = ?,\n  number_compares_with_diffs = ?,\n  number_compares_without_diffs = ?,\n  current_disposition = 'Comparisons In Progress',\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
InsertFileStudy	insert into file_study(\n  file_id, study_instance_uid, study_date,\n  study_time, referring_phy_name, study_id,\n  accession_number, study_description, phys_of_record,\n  phys_reading, admitting_diag\n) values (\n  ?, ?, ?,\n  ?, ?, ?,\n  ?, ?, ?,\n  ?, ?\n)	{file_id,study_instance_uid,study_date,study_time,referring_phy_name,study_id,accession_number,study_description,phys_of_record,phys_reading,admitting_diag}	{}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
GetSimpleElementSeenIndex	select currval('element_seen_element_seen_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get index of newly created element_seen
SimplePhiReportAllPublicOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and not is_private\ngroup by element_sig_pattern, vr, value, val_length, description\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetPublicFeaturesBySignature	select\n  name, vr\nfrom dicom_element\nwhere tag = ?	{element_signature}	{name,vr}	{UsedInPhiSeriesScan,NotInteractive,ElementDisposition}	dicom_dd	Get Element Signature By Signature (pattern) and VR
GetVisualReviewStatusCountsById	select \n  distinct review_status, count(distinct series_instance_uid) as num_series\nfrom\n  image_equivalence_class\nwhere\n  visual_review_instance_id = ?\ngroup by review_status	{visual_review_instance_id}	{review_status,num_series}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
GetCountFilesToImportFromEdit	select\n  count(*) as num_files\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and subprocess_invocation_id = ?\n      intersect\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and subprocess_invocation_id = ?\n    ) as foo\n  )\n  and subprocess_invocation_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
AllVisibleSubjectsByCollection	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      project_name = ? and\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{collection}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
DistinctFileReportByCollectionSite	select distinct\n  project_name as collection, site_name as site, patient_id, study_instance_uid,\n  series_instance_uid, sop_instance_uid, dicom_file_type, modality, file_id, visibility\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\n  natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ?\norder by series_instance_uid	{project_name,site_name}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,dicom_file_type,modality,file_id,visibility}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
FindInconsistentStudyIgnoringStudyTimeIncludingPatientId	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join file_patient natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
GetPosdaSopsForCompareCollectionLike	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name like ? \n  and visibility is null	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
PatientStatusChange	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
SeriesListBySubjectNameByDateRange	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere \n  patient_id = ?\n  and visibility is null\n  and import_time > ? \n  and import_time < ?\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{patient_id,from,to}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy,backlog_round_history}	posda_files	Get List of Series by Subject Name
CtpFilesSummary	select\n distinct project_name as collection,\n trial_name,\n site_name as site,\n site_id,\n visibility,\n count(distinct file_id) as num_files\nfrom ctp_file\ngroup by \n  collection,\n  trial_name,\n  site,\n  site_id,\n  visibility\norder by\n  collection, trial_name, site, site_id, visibility	{}	{collection,trial_name,site,site_id,visibility,num_files}	{adding_ctp}	posda_files	Get Series in A Collection\n
GetContoursFromRoiId	select\n  roi_contour_id, contour_num, geometric_type, \n  number_of_points, sop_class as linked_image_sop_class,\n  sop_instance as linked_image_sop_instance, \n  frame_number as linked_image_frame_number\nfrom\n  roi_contour natural left join contour_image\nwhere roi_id = ?	{roi_id}	{roi_contour_id,contour_num,geometric_type,number_of_points,linked_image_sop_class,linked_image_sop_instance,linked_image_frame_number}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
PatientStatusChangeByPatient	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id = ?\norder by when\n	{patient_id}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Patient Id\n
ImageIdByFileId	select\n  distinct file_id, image_id\nfrom\n  file_image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id}	{by_file_id,image_id,posda_files}	posda_files	Get image_id for file_id \n
DuplicatePixelDataThatMatters	select image_id, count from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1;\n	{collection}	{image_id,count}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
TableSizePosdaFiles	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where\n  table_schema = 'public' or table_schema = 'dbif_config' or table_schema = 'dicom_conv'\norder by total_bytes desc	{}	{oid,table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_files	Get a list of collections and sites\n
LockDicomEditCompareDisposition	lock dicom_edit_compare_disposition\n	{}	{}	{adding_ctp,for_scripting}	posda_files	Lock table dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface.
DistinctFilesByTagAndValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ? and value = ?\norder by series_instance_uid, file\n	{tag,value}	{series_instance_uid,file,element_signature}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
GetSeriesWithOutImageByCollectionSite	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series\n  natural join file_sop_common\n  natural join file_patient\n  natural join ctp_file ctp\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and not exists (select image_id from file_image fi where ctp.file_id = fi.file_id)\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
GetSsVolumeReferencingKnownImages	select \n  project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\norder by collection, site, patient_id	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
FilesWithNoCtpByPatientId	select\n  distinct file_id\nfrom\n  file_patient p\nwhere\n  not exists(\n  select file_id from ctp_file c\n  where c.file_id = p.file_id\n)\nand patient_id = ?\n	{patient_id}	{file_id}	{adding_ctp}	posda_files	Get Series in A Collection\n
WhereSopSitsIntake	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	intake	Get Collection, Patient, Study Hierarchy in which SOP resides\n
DistinctSeriesBySubjectIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,intake}	intake	Get Series in A Collection, Site, Subject\n
SopsDupsInDifferentSeriesByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
ImportIntoFileStudy	insert into file_study\n  (file_id, study_instance_uid, study_date,\n   study_time, referring_phy_name, study_id,\n   accession_number, study_description, phys_of_record,\n   phys_reading, admitting_diag)\nvalues\n  (?, ?, ?,\n   ?, ?, ?,\n   ?, ?, ?,\n   ?, ?)\n	{file_id,study_instance_uid,study_date,study_time,referring_phy_name,study_id,accession_number,study_description,phys_of_record,phys_reading,admitting_diag}	{}	{reimport_queries}	posda_files	Get file path from id
GetUnreadInboxCount	select count(*) as count\nfrom user_inbox_content \nnatural join user_inbox \nwhere date_dismissed is null\n  and user_name = ?\n	{user_name}	{count}	{}	posda_queries	Get a count of unread messages from the user's inbox.
InboxContentAll	select\n user_name, user_inbox_content_id as id, operation_name,\n  current_status,\n  activity_id, brief_description,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural left join subprocess_invocation\n  natural left join spreadsheet_uploaded\n  natural left join activity_inbox_content natural left join\n  activity \norder by user_inbox_content_id desc	{}	{user_name,id,operation_name,current_status,activity_id,brief_description,when,file_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
StorageRootIdById	select root_path from file_storage_root where\nfile_storage_root_id = ?	{file_storage_root_id}	{root_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
UpdateFileIsPresent	update file_location set file_is_present = true where file_is_present is null	{}	{}	{adding_pixels_to_dicom_file}	posda_files	Default file_is_present to true
DciodvfyErrorsStringByErrorId	select                                                    \n  dciodvfy_error_id || '|' ||\n  error_type || '|' ||                                                                                                                                                                                                                   \n  coalesce(error_tag, '[null]') || '|' ||\n  coalesce(error_value, '[null]') || '|' ||\n  coalesce(error_subtype, '[null]') || '|' ||\n  coalesce(error_module, '[null]') || '|' ||\n  coalesce(error_reason, '[null]') || '|' ||\n  coalesce(error_index, '[null]') || '|' ||\n  coalesce(error_text, '[null]') as error_string\nfrom dciodvfy_error \nwhere  dciodvfy_error_id = ?	{dciodvfy_error_id}	{error_string}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
GetVisibleFilesByEquivalenceClass	select\n  file_id, visibility\nfrom ctp_file\nwhere visibility is null and file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    image_equivalence_class_id = ?\n)	{image_equivalence_class_id}	{file_id,visibility}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
DupSopsOnlyAfterDate	select distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest >= ?\nexcept\nselect distinct sop_instance_uid from (\nselect\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?	{collection,break_date,collection_1,break_date_1}	{sop_instance_uid}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date only after cut date
StudyConsistencyWithPatientId	select distinct\n  patient_id, study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(distinct file_id)\nfrom\n  file_study natural join file_patient natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  patient_id, study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{patient_id,study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency,study_consistency}	posda_files	Check a Study for Consistency\n
background_subprocesses_by_date_op_name	select \n  background_subprocess_id as bkgrnd_id, subprocess_invocation_id as invoc_id,\n  operation_name, command_line, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n  and when_script_ended is not null\n  and when_script_started > ? and when_script_started < ? and operation_name = ?\norder by when_script_started desc	{invoking_user,from,to,operation_name}	{bkgrnd_id,invoc_id,operation_name,command_line,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
SimplePhiReportByScanVr	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetSsReferencingUnknownImages	select\n  project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\nselect\n  distinct ss_file_id as file_id from \n(select\n  sop_instance_uid, ss_file_id \nfrom (\n  select \n    distinct linked_sop_instance_uid as sop_instance_uid, file_id as ss_file_id\n  from\n    file_roi_image_linkage\n  ) foo left join file_sop_common using(sop_instance_uid)\n  where\n  file_id is null\n) as foo\n)\norder by collection, site, patient_id, file_id\n	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetPosdaSimplePhiPrivateElements	select\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\nfrom element_seen\n\n	{}	{element_sig_pattern,vr,is_private,private_disposition,name_chain}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Get the relevant features of an element_signature in posda_phi_simple schema
AbortRound	update round\n  set round_aborted = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
PhiNonDicomScanStatusComplete	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   pndsi_end_time - pndsi_start_time as duration\nfrom\n  phi_non_dicom_scan_instance\nwhere pndsi_end_time is not null\norder by start_time	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,duration}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
AddBackgroundTimeAndRowsToBackgroundProcess	update background_subprocess set\n  when_background_entered = now(),\n  input_rows_processed = ?,\n  background_pid = ?\nwhere\n  background_subprocess_id = ?\n\n	{input_rows,background_pid,background_subprocess_id}	\N	{NotInteractive,used_in_background_processing}	posda_queries	N\no\nn\ne
TableSizePosdaPhiSimple	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_phi_simple	Get a list of collections and sites\n
GetFileIdAndVisibilityByDigest	select\n  f.file_id as id,\n  c.file_id as ctp_file_id,\n  c.visibility as visibility\nfrom\n  file f left join ctp_file c\n  using(file_id)\nwhere\n  f.file_id in (\n  select file_id\n  from\n     file\n  where\n     digest = ?\n)	{digest}	{id,ctp_file_id,visibility}	{NotInteractive,used_in_import_edited_files}	posda_files	Get file_id, and current visibility by digest\nFor use in scripts\nNot really intended for interactive use\n
PatientByImportEventIdHiddenFiles	select\n  distinct patient_id, count(distinct file_id) as num_files\nfrom file_patient\nwhere file_id in (\n  select distinct file_id\n  from file_import natural join import_event natural left join ctp_file\n  where import_event_id = ? and visibility = 'hidden'\n) group by patient_id order by patient_id	{import_event_id}	{patient_id,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
SelectPtInfoSummaryByCollection	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam, \n  count(*) as num_files\nfrom file_pt_image natural join file_patient natural join file_series natural join ctp_file \nwhere project_name = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  radiopharmaceutical,\n  total_dose,\n  half_life,\n  positron_fraction,\n  fov_shape,\n  fov_dim,\n  coll_type,\n  recon_diam\norder by patient_id	{collection}	{collection,site,patient_id,series_instance_uid,radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam,num_files}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
PatientsWithNoCtp	select\n  distinct patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\nwhere\n  not exists (select file_id from ctp_file c where sc.file_id = c.file_id)\ngroup by patient_id;	{}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,no_ctp_patients}	posda_files	Get Series in A Collection\n
files_to_copy_from_public	select \n  dp_site_name as site, \n  sop_instance_uid, \n  dicom_file_uri \nfrom general_image, trial_data_provenance\nwhere \n  general_image.trial_dp_pk_id = trial_data_provenance.trial_dp_pk_id and \n  trial_data_provenance.project = ? and\n  trial_data_provenance.dp_site_name = ?	{collection,site}	{site,sop_instance_uid,dicom_file_uri}	{meta,test,hello,query_tabs,bills_test}	public	Files to copy from Public (to Posda)
FilesInSeriesWithPositionPixelDig	select\n  distinct file_id, image_id, unique_pixel_data_id, ipp, instance_number\nfrom\n  file_series natural join file_image natural join ctp_file natural join file_sop_common\n  natural join image natural join image_geometry\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,image_id,unique_pixel_data_id,ipp,instance_number}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get file info from series for comparison of dup_series
UpdateCopyFromPublic	update copy_from_public\n  set when_file_rows_populated = now(),\n  num_file_rows_populated = ?,\n  status_of_copy = ?\nwhere\n  copy_from_public_id = ?	{num_file_rows_populated,status_of_copy,copy_id}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
LongestRunningNQueriesByDate	select * from (\nselect query_invoked_by_dbif_id as id, query_name, query_end_time - query_start_time as duration,\ninvoking_user, query_start_time, number_of_rows\nfrom query_invoked_by_dbif\nwhere query_end_time is not null and\nquery_start_time > ? and query_end_time < ?\norder by duration desc) as foo\nlimit ?	{from,to,n}	{id,query_name,duration,invoking_user,query_start_time,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
TagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which tags\n
GetFilesToImportFromEdit	select\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  to_file_path\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and subprocess_invocation_id = ?\n      intersect\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and subprocess_invocation_id = ?\n    ) as foo\n  )\n  and subprocess_invocation_id = ?\nlimit ?	{subprocess_invocation_id,subprocess_invocation_id_1,subprocess_invocation_id_2,limit}	{subprocess_invocation_id,from_file_digest,to_file_digest,to_file_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetSeriesInfoById	select\n  file_id,\n  modality,\n  series_instance_uid,\n  series_number,\n  laterality,\n  series_date,\n  series_time,\n  performing_phys,\n  protocol_name,\n  series_description,\n  operators_name,\n  body_part_examined,\n  patient_position,\n  smallest_pixel_value,\n  largest_pixel_value,\n  performed_procedure_step_id,\n  performed_procedure_step_start_date,\n  performed_procedure_step_start_time,\n  performed_procedure_step_desc, \n  performed_procedure_step_comments,\n  date_fixed\nfrom file_series\nwhere file_id = ?	{file_id}	{file_id,modality,series_instance_uid,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,performed_procedure_step_comments,date_fixed}	{reimport_queries}	posda_files	Get file path from id
GetBacklogControl	select\n  status, processor_pid,\n  idle_poll_interval,\n  last_service, pending_change_request,\n  source_pending_change_request,\n  request_time, num_files_per_round,\n  target_queue_size,\n  (now() - request_time) as time_pending\nfrom control_status\n	{}	{status,processor_pid,idle_poll_interval,last_service,pending_change_request,source_pending_change_request,request_time,num_files_per_round,target_queue_size,time_pending}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get control status from backlog database
GetUnkQualifiedCTQPByLikeCollectionSiteWithFIleCountAndLoadTimes	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files,\n  min(import_time) as earliest, max(import_time) as latest\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ? and site = ? and qualified is null\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified,num_files,earliest,latest}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
LinkAFEtoEditEvent	insert into dicom_edit_event_adverse_file_event(\n  dicom_edit_event_id, adverse_file_event_id\n) values (?, ?)\n	{dicom_edit_event_id,adverse_file_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert row linking adverse_file_edit_event to dicom_edit_event\nFor use in scripts\nNot really intended for interactive use\n
GetDciodvfyWarningWrongExpVr	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'WrongExplicitVr'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_comment = ?\n  and warning_value = ?\n  and warning_reason = ?\n 	{warning_tag,warning_desc,warning_comment,warning_value,warning_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
CreateSimpleElementSeen	insert into \n   element_seen(element_sig_pattern, vr)\n   values(?, ?)\n	{element_sig_pattern,vr}	{}	{NotInteractive,used_in_simple_phi_maint,used_in_phi_maint}	posda_phi_simple	Create a new Simple PHI scan
GetGeometricInfoIntake	select\n  sop_instance_uid, image_orientation_patient, image_position_patient,\n  pixel_spacing, i_rows, i_columns\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	intake	Get Geometric Information by Sop Instance UID from intake
GetSeriesVisibilityCountsBySeriesAndVisualReviewId	select\n  distinct series_instance_uid, coalesce(visibility, '<undef>'), modality,\n  count(distinct file_id) as num_files\nfrom file_series natural join ctp_file\nwhere file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    visual_review_instance_id = ? and series_instance_uid = ?\n)\ngroup by series_instance_uid, visibility, modality	{visual_review_instance_id,series_instance_uid}	{series_instance_uid,visibility,modality,num_files}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
CreateNonDicomEditCompareDisposition	insert into non_dicom_edit_compare_disposition(\n  subprocess_invocation_id, start_creation_time, current_disposition, process_pid, dest_dir\n)values (\n  ?, now(), 'Starting Up', ?, ?\n)	{subprocess_invocation_id,process_pid,dest_dir}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Create an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
EndTransactionPosda	commit\n	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	End a transaction in Posda files
background_subprocesses	select \n  background_subprocess_id as id, \n  operation_name, command_executed, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n and when_script_ended is not null\norder by when_script_started desc	{invoking_user}	{id,operation_name,command_executed,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
PublicFileListByCollection	select \n  distinct tdp.project as collection, s.patient_id, s.series_instance_uid, dicom_file_uri\nfrom\n  trial_data_provenance tdp, general_image i, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n  and tdp.project = ?	{collection}	{collection,patient_id,series_instance_uid,dicom_file_uri}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi}	public	Get Series in A Collection\n
CreatePhiNonDicomScanInstance	insert into phi_non_dicom_scan_instance(\n  pndsi_description,\n  pndsi_start_time,\n  pndsi_num_files,\n  pndsi_num_files_scanned\n) values (\n  ?, now(), ?, 0\n)	{description_of_scan,num_files}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
CountsByCollectionLikeSite	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n  ) and project_name like ?  and site_name = ? \ngroup by\n  collection, site, patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  collection, site, patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection_like,site}	{collection,site,patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
FilesInHierarchyBySeries	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
GetRoiCountsBySeriesInstanceUid	select \n   distinct sop_instance_uid, count(distinct roi_id)\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from file_sop_common natural join file_series\n  where series_instance_uid = ?\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
GetBackgroundButtonsByTag	select\n    background_button_id,\n    operation_name,\n    object_class,\n    button_text\nfrom background_buttons\nwhere tags && ?\n\n	{tags}	{background_button_id,operation_name,object_class,button_text}	{NotInteractive,used_in_process_popup}	posda_queries	
DistinctSeriesByCollectionLikeSeriesDescription	select \n  distinct collection, \n  site, patient_id, series_instance_uid, \n  series_description,\n  dicom_file_type, modality, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\n  from (\n    select\n     distinct project_name as collection,\n     site_name as site,\n     patient_id, \n     series_instance_uid, \n     series_description,\n     dicom_file_type, \n     modality, sop_instance_uid,\n     file_id\n    from \n     file_series\n     natural join dicom_file\n     natural join file_sop_common \n     natural join file_patient\n     natural join ctp_file\n  where\n    project_name = ? \n    and site_name = ? \n    and series_description like ?\n    and visibility is null\n) as foo\ngroup by collection, site, patient_id, \n  series_instance_uid, series_description, dicom_file_type, modality\n	{collection,site,description}	{collection,site,patient_id,series_instance_uid,series_description,dicom_file_type,modality,num_sops,num_files}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
CountsByCollectionSite	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
CreateComparePublicToPosdaInstance	insert into compare_public_to_posda_instance(\n  when_compare_started, status_of_compare, number_of_sops\n)values (\n  now(), 'Starting Up', ?\n)	{num_sops}	{}	{adding_ctp,for_scripting}	posda_files	Create an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
PixelDataDuplicateCounts	select\n  distinct pixel_digest, count(*)\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest	{}	{pixel_digest,count}	{pix_data_dups,pixel_duplicates}	posda_files	Find digest with counts of files\n
TableSizePosdaBacklog	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_backlog	Get a list of collections and sites\n
DicomFileTypes	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file natural join ctp_file\nwhere\n  visibility is null  \ngroup by dicom_file_type\norder by count desc	{}	{dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Dicom File Types with count of files in Posda\n
OneFileFromSop	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_sop_common\nwhere\n  sop_instance_uid = ? and visibility is null\nlimit 1\n	{sop_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
ListSrPosda	select \n  distinct project_name as collection, site_name as site,\n  patient_id, study_instance_uid, series_instance_uid,\n  file_id, root_path || '/' || rel_path as file_path\nfrom\n  dicom_file natural join file_patient natural join file_series\n  natural join file_study natural join ctp_file\n  join file_location using (file_id) natural join file_storage_root\nwhere\n  visibility is null and dicom_file_type like '%SR%' and\n  project_name like ?	{collection_like}	{collection,site,patient_id,study_instance_uid,series_instance_ui,file_id,file_path}	{meta,test,hello,query_tabs,bills_test,view_structured_reports}	posda_files	Add a filter to a tab
TagsSeenPrivate	select\n  element_signature, vr, is_private, private_disposition, name_chain\nfrom\n  element_signature\nwhere is_private\norder by element_signature, vr	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
UpdateNonDicomEditCompareDispositionStatus	update non_dicom_edit_compare_disposition set\n  current_disposition = ?,\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{current_disposition,subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Update status of an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
NewSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
InsertManifestRow	insert into ctp_manifest_row(\n file_id,\n cm_index,\n cm_collection,\n cm_site,\n cm_patient_id,\n cm_study_date,\n cm_series_instance_uid,\n cm_study_description,\n cm_series_description,\n cm_modality,\n cm_num_files ) values(\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n)	{file_id,cm_index,cm_collection,cm_site,cm_patient_id,cm_study_date,cm_series_instance_uid,cm_study_description,cm_series_description,cm_modality,""}	{}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
InboxContentByActivityIdWithCompletion	select\n user_name, user_inbox_content_id as id, operation_name,\n  when_script_started as when, when_script_ended as ended,\n  when_script_ended - when_script_started as duration,\n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  activity_inbox_content natural join user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural join subprocess_invocation\n  natural left join spreadsheet_uploaded\nwhere activity_id = ?\norder by when_script_started desc	{activity_id}	{user_name,id,operation_name,when,ended,duration,file_id,sub_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
GetFileIdVisibilityByImageEquivalenceClass	select \n  distinct file_id, visibility\nfrom\n  image_equivalence_class natural join image_equivalence_class_input_image natural join ctp_file\nwhere image_equivalence_class_id = ?	{image_equivalence_class_id}	{file_id,visibility}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
FilesInSeries	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
HideSeriesNotLikeWithModality	update ctp_file set visibility = 'hidden'\nwhere file_id in (\n  select\n    file_id\n  from\n    file_series\n  where\n    series_instance_uid in (\n      select\n         distinct series_instance_uid\n      from (\n        select\n         distinct\n           file_id, series_instance_uid, series_description\n        from\n           ctp_file natural join file_series\n        where\n           modality = ? and project_name = ? and site_name = ?and \n           series_description not like ?\n      ) as foo\n    )\n  )\n	{modality,collection,site,description_not_matching}	\N	{Update,posda_files}	posda_files	Hide series not matching pattern by modality\n
DistinctStudySeriesByCollection	select distinct study_instance_uid as study_uid, series_instance_uid as series_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct study_instance_uid, series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient natural join file_study\nwhere\n  project_name = ?\n  and visibility is null)\nas foo\ngroup by study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by study_uid, series_uid, patient_id, dicom_file_type, modality\n	{collection}	{study_uid,series_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi}	posda_files	Get Series in A Collection\n
GetAllQualifiedCTQPByLikeCollectionSiteWithFIleCountAndLoadTimes	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files,\n  min(import_time) as earliest, max(import_time) as latest\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ? and site = ?\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified,num_files,earliest,latest}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
PatientStudySeriesForFile	select\n  patient_id, study_instance_uid, series_instance_uid, root_path || '/' || rel_path as path\nfrom\n  file_patient natural join file_series natural join\n  file_study natural join file_location natural join file_storage_root\nwhere file_id = ?	{file_id}	{patient_id,study_instance_uid,series_instance_uid,path}	{activity_timepoint_support}	posda_files	Create An Activity Timepoint\n\n
GetNfilesToCopyOnly	select\n  sop_instance_uid,\n  copy_file_path \nfrom file_copy_from_public\nwhere copy_from_public_id =  ? and inserted_file_id is null \nlimit ?	{copy_from_public_id,count}	{sop_instance_uid,copy_file_path}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
CurrentPatientStatiiByCollectionSite	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_import_status\nfrom \n  ctp_file natural join file_patient natural left join patient_import_status\nwhere\n  visibility is null and project_name = ? and site_name = ?	{collection,site}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
DistinctFilesByScanTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
RecentUploadsTest1	select\n        project_name,\n        site_name,\n        dicom_file_type,\n        count(*),\n        (extract(epoch from now() - max(import_time)) / 60)::int as minutes_ago,\n        to_char(max(import_time), 'HH24:MI') as time\n\n    from (\n        select \n          project_name,\n          site_name,\n          dicom_file_type,\n          sop_instance_uid,\n          import_time\n\n        from \n          file_import\n          natural join import_event\n          natural join ctp_file\n          natural join dicom_file\n          natural join file_sop_common\n          natural join file_patient\n\n        where import_time > now() - interval '1' day\n          and visibility is null\n    ) as foo\n    group by\n        project_name,\n        site_name,\n        dicom_file_type\n    order by minutes_ago asc;	{}	{project_name,site_name,dicom_file_type,count,minutes_ago,time}	{files}	posda_files	Show files received by Posda in the past day.
SeriesWithDistinguishedDigests	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  ctp_file natural join\n  file_patient natural\n  join file_series natural\n  join file_sop_common\nwhere file_id in(\n  select file_id \n  from\n    file_image\n    join image using (image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  where digest in (\n    select distinct pixel_digest as digest \n    from distinguished_pixel_digests\n  )\n) group by collection, site, patient_id, series_instance_uid	{}	{collection,site,patient_id,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
ListOfSchemas	select\n distinct schema\nfrom queries\norder by schema	{}	{schema}	{AllCollections,schema}	posda_queries	Get a list of available queries
SimplePhiReportByScanVrPublicOnly	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\n  and not is_private\ngroup by element_sig_pattern, vr, value, tag_name	{scan_id,vr}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetPrivateTagFeaturesBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr,\n  pt_consensus_disposition as disposition\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr,disposition}	{DispositionReport,NotInteractive}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
GetNLocationsAndDigestsByFileStorageRootId	select\n  file_id, digest, rel_path\nfrom file_location natural join file\nwhere\n  file_storage_root_id = ?\nlimit ?	{file_storage_root_id,n}	{file_id,digest,rel_path}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
FindTagsInQueries	select\n  distinct tag from (\n  select name, unnest(tags) as tag\n  from queries) as foo\norder by tag	{}	{tag}	{meta,test,hello,query_tags}	posda_queries	Find all queries matching tag
LookingForMissingHeadNeckPetCT1	select \n  distinct patient_id, study_instance_uid, series_instance_uid, modality, \n  count(distinct file_id) as num_files, min(import_time) as first_load, max(import_time) as last_load\nfrom\n  file_patient natural join file_study \n  natural join file_series\n  join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere file_id in (      \n  select\n     distinct file_id\n  from\n    file_series join ctp_file using(file_id)\n    join file_sop_common using(file_id) \n    join file_import using (file_id)\n    join import_event using(import_event_id)\n  where \n    project_name = 'Head-Neck-PET-CT' and import_time > '2018-04-01'\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid, modality	{}	{patient_id,study_instance_uid,series_instance_uid,modality,num_files,first_load,last_load}	{meta,test,hello,bills_test,bills_ad_hoc_scripts,for_tracy}	posda_files	Add a filter to a tab
FindingStructureSetsForTest	select\n  distinct project_name as collection, patient_id, series_description, sop_instance_uid, file_id,\n  dicom_file_type\nfrom\n  ctp_file natural join dicom_file natural join file_study natural join file_series\n  natural join file_patient natural join file_sop_common\nwhere \n  dicom_file_type = 'RT Structure Set Storage' and visibility is null and project_name = 'Soft-tissue-Sarcoma'	{}	{collection,patient_id,file_id,dicom_file_type,series_description}	{"Test Case based on Soft-tissue-Sarcoma"}	posda_files	Find All of the Structure Sets In Soft-tissue-Sarcoma
GetComparePublicToPosdaInstanceId	select currval('compare_public_to_posda_insta_compare_public_to_posda_insta_seq') as id	{}	{id}	{radcomp}	posda_files	Add a filter to a tab
GetBacklogQueueSizeWithCollection	select\n distinct collection, count(*) as num_files\nfrom\n  request natural join submitter\nwhere\n  file_in_posda is false\ngroup by collection\n\n	{}	{collection,num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
SeriesListBySubjectName	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality, \n  dicom_file_type, \n  count(distinct file_id) as num_files\nfrom \n  file_patient natural join\n  file_series natural join\n  file_study natural join\n  dicom_file natural join\n  ctp_file\nwhere \n  patient_id = ?\n  and visibility is null\ngroup by \n  collection,\n  site,\n  patient_id,\n  study_instance_uid,\n  study_date,\n  study_description,\n  series_instance_uid,\n  series_date,\n  series_description,\n  modality,\n  dicom_file_type;	{patient_id}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,modality,dicom_file_type,num_files}	{find_series,for_tracy}	posda_files	Get List of Series by Subject Name
PhiSimpleScanStatus	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id desc\n	{}	{id,start_time,end_time,duration,description,to_scan,scanned,phi_status}	{tag_usage,simple_phi,scan_status}	posda_phi_simple	Status of PHI scans\n
HideEarlyFilesCSP	update ctp_file set visibility = 'hidden' where file_id in (\n  select min as file_id\n  from (\n    select\n      distinct sop_instance_uid, min, max, count\n    from (\n      select\n        distinct sop_instance_uid, min(file_id),\n        max(file_id),count(*)\n      from (\n        select\n          distinct sop_instance_uid, file_id\n        from\n          file_sop_common \n        where sop_instance_uid in (\n          select\n            distinct sop_instance_uid\n          from\n            file_sop_common natural join ctp_file\n            natural join file_patient\n          where\n            project_name = ? and site_name = ? \n            and patient_id = ? and visibility is null\n        )\n      ) as foo natural join ctp_file\n      where visibility is null\n      group by sop_instance_uid\n    )as foo where count > 1\n  ) as foo\n);\n	{collection,site,subject}	\N	{}	posda_files	Hide earliest submission of a file:\n  Note:    uses sequencing of file_id to determine earliest\n           file, not import_time\n
ActivityTimepointForOpenActivitiesByDescLike	select\n  activity_id, a.when_created as activity_created,\n  brief_description as activity_description, activity_timepoint_id,\n  t.when_created as timepoint_created, \n  comment, creating_user\nfrom\n  activity a join activity_timepoint t using(activity_id)\nwhere\n  a.when_closed is null and\n  brief_description like ?	{description_like}	{activity_id,activity_created,activity_description,activity_timepoint_id,timepoint_created,comment,creating_user}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_queries	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
DistinctSeriesByDicomFileType	select \n  distinct series_instance_uid, dicom_file_type, count(distinct file_id)\nfrom\n  file_series natural join dicom_file natural join ctp_file\nwhere\n  dicom_file_type = ? and\n  visibility is null  \ngroup by series_instance_uid, dicom_file_type	{dicom_file_type}	{series_instance_uid,dicom_file_type,count}	{find_series,dicom_file_type}	posda_files	List of Distinct Series By Dicom File Type\n
ShowQueryTabHierarchyWithCounts	select \n  query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\ngroup by query_tab_name, filter_name, tag\norder by \n  query_tab_name, filter_name, tag	{}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
CreateDciodvfyScanInstance	insert into dciodvfy_scan_instance(\n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time\n) values (\n  ?, ?, ?, 0, now()\n)	{type_of_unit,description_of_scan,number_units}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetPopupDefinition	select\n  command_line, input_line_format,\n  operation_name, operation_type,\n  tags\nfrom \n  spreadsheet_operation\nwhere\n  operation_name = ?\n	{operation_name}	\N	{NotInteractive,used_in_process_popup}	posda_queries	N\no\nn\ne
SimpleSeriesCountsByCollectioin	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(distinct file_id)as num_files,\n  sum(size) as num_bytes\nfrom\n  ctp_file natural join\n  file natural join\n  dicom_file natural join\n  file_patient natural join\n  file_series\nwhere\n  visibility is null and\n  project_name = ?\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality	{collection}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,num_files,num_bytes}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
WhereFilesInTimePointSit	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural left join\n  ctp_file\nwhere file_id in(\n  select file_id from activity_timepoint_file\n  where activity_timepoint_id = ?\n)	{activity_timepoint_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{posda_files,sops,BySopInstance,by_file}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
DistinctSopsInCollectionByStorageClass	select distinct sop_instance_uid, rel_path\nfrom\n  file_sop_common natural join file_location natural join file_storage_root\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_location natural join file_storage_root\n  where\n    project_name = ? and visibility is null and storage_class = ?\n) and current\norder by sop_instance_uid\n	{collection,storage_class}	{sop_instance_uid,rel_path}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctVisibleSopsAndFilesInSeriesWithPatAndStudy	select distinct\n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid, file_id\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\nwhere file_id in \n  (select\n    distinct file_id\n  from\n    file_series natural join file_sop_common natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null)\n	{series_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
GetXlsxToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'xlsx' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
StudiesInCollectionSite	select\n  distinct study_instance_uid\nfrom\n  file_study natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{project_name,site_name}	{study_instance_uid}	{find_studies}	posda_files	Get Studies in A Collection, Site\n
GetToday	select \n  date_trunc('day',now()) as today\n 	{}	{today}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
GetBacklogQueueSize	select\n count(*) as num_files\nfrom\n  request\nwhere\n  file_in_posda is false \n\n	{}	{num_files}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get size of queue  in PosdaBacklog
GetDoseReferencingNoPlan	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose natural join file_dose  where\nrt_dose_referenced_plan_uid is null)	{collection}	{collection,site,patient_id,sop_instance_uid,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
ContourTypesByRoi	select\n  distinct geometric_type,\n  count(distinct roi_contour_id) as num_contours,\n  sum(number_of_points) as total_points\nfrom\n roi_contour\nwhere roi_id = ?\ngroup by geometric_type	{roi_id}	{geometric_type,num_contours,total_points}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
AllPatientDetailsWithNoCtp	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n not exists (select file_id from ctp_file c where c.file_id = f.file_id)\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
FilesInCollectionSiteForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{by_collection_site,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
AddPidToSubprocessInvocation	update subprocess_invocation set\n  process_pid = ?\nwhere\n  subprocess_invocation_id = ?\n	{pid,subprocess_invocation_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add a pid to a subprocess_invocation row\n\nused in DbIf after subprocess invoked
GetListCollectionPrios	select collection, file_count as priority\nfrom collection_count_per_round\norder by collection\n\n	{}	{collection,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Get a list of all collections defined in backlog with priorities.
StudiesWithMultiplePatientIds	select\n  distinct study_instance_uid,\n  patient_id\nfrom\n  file_study natural join file_patient natural join ctp_file                                                      \nwhere study_instance_uid in (                                                                                                                                                        \n  select distinct study_instance_uid from (                                                                                                                                                                                    \n     select * from (\n        select distinct study_instance_uid, count(*) from (\n          select distinct study_instance_uid, patient_id\n          from file_study natural join file_patient natural join ctp_file\n          where project_name = ? and visibility is null\n        ) as foo group by study_instance_uid\n      ) as foo where count > 1\n   ) as foo\n) and\nvisibility is null	{collection}	{study_instance_uid,patient_id}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
GetDciodvfyErrorMayNotBePres	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'MayNotBePresent'\n  and error_tag = ?\n  and error_reason = ?	{error_tag,error_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
GetFilesNotImportedInDicomFileCompare	select\n  count(*)\nfrom\n  dicom_edit_compare\nwhere \n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and edit_command_file_id = ?\n      except\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and edit_command_file_id = ?\n\n    ) as foo\n  )\n  and edit_command_file_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{count}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get Files hidden but replacement not imported
CountsByCollectionSiteExcludingSeriesByDescription	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null and\n  series_description not like ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,series_description_exclusion_pattern}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
background_emails	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ? and name = 'Email'\norder by when_invoked desc	{invoking_user}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
GetLoadPathByImportEventIdAndFileId	select file_name from file_import where file_id = ? and import_event_id = ?	{file_id,import_event_id}	{file_name}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
DistinctSeriesByCollectionSiteModality	select distinct series_instance_uid, dicom_file_type, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? and site_name = ? and modality = ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,modality}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
ListOfUncategorizedDciodvfyWarnings	select distinct warning_text, count(*)  as num_occurances from dciodvfy_warning\nwhere\n  warning_type = 'Uncategorized'\ngroup by \nwarning_text	{}	{warning_text,num_occurances}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy uncategorized warnings in DB
InsertActivityTimepointFile	insert into activity_timepoint_file(\n  activity_timepoint_id, file_id\n) values (\n  ?, ?\n)	{actiity_id,file_id}	{}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
FilesIdsInSeriesWithVisibilityAndCollection	select\n  file_id, project_name as collection, visibility\nfrom\n  ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_id,collection,visibility}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
SeriesFileCount	select\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join\n  ctp_file\nwhere \n    series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
FindQueryMatching	select\n  distinct name\nfrom\n  queries\nwhere\n  query ~ ?\norder by name	{query_matching}	{name}	{meta,test,hello}	posda_queries	Find all queries with name matching arg
SeriesVisualReviewResultsByCollectionSiteStatusVisible	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetBackgroundReportFilename	select root_path || '/' || rel_path as filename\nfrom file\nnatural join file_location\nnatural join file_storage_root\nwhere file_id = ?\n	{file_id}	{filename}	{}	posda_files	Get the filename of a background report, by file_id
CountsCollectionDateRangeBySubject	select\n  distinct\n    patient_id,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id\norder by\n  patient_id\n	{from,to,collection}	{patient_id,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
AllPixelInfoByBitDepth	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and bits_allocated = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
SubjectsWithModalityByCollectionSite	select\n  distinct patient_id, count(*) as num_files\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere\n  modality = ? and project_name = ? and site_name = ?\ngroup by patient_id\norder by patient_id\n	{modality,project_name,site_name}	{patient_id,num_files}	{FindSubjects}	posda_files	Find All Subjects with given modality in Collection, Site\n
InsertIntoFileRoiImageLinkage	insert into file_roi_image_linkage(\n  file_id,\n  roi_id,\n  linked_sop_instance_uid,\n  linked_sop_class_uid,\n  contour_file_offset,\n  contour_length,\n  contour_digest,\n  num_points,\n  contour_type\n) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?\n)	{file_id,roi_id,linked_sop_instance_uid,linked_sop_class_uid,contour_file_offset,contour_length,contour_digest,num_points,contour_type}	{}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
SopsDupsInDifferentSeriesByLikeCollection	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name like ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
RoundInfoById	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id = ?\norder by round_id, collection	{round_id}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of round by id
CreateVisualReviewInstance	insert into visual_review_instance(\n  visual_review_reason,\n  visual_review_scheduler,\n  visual_review_num_series,\n  when_visual_review_scheduled\n) values (\n  ?, ?, ?, now()\n)	{visual_review_reason,visual_review_scheduler,visual_review_num_series}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Create a visual review instance
SeriesNotLikeWithModality	select\n   distinct series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     file_id, series_instance_uid, series_description\n  from\n     ctp_file natural join file_series\n  where\n     modality = ? and project_name = ? and site_name = ? and \n     series_description not like ? and visibility is null\n) as foo\ngroup by series_instance_uid, series_description\n	{modality,collection,site,description_not_matching}	{series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern by modality\n
SeriesListByCollectionSiteModalityVisualReviewStatus	select \n  distinct\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and\n  review_status = ?\n  and modality = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\n	{project_name,site_name,review_status,modality}	{dicom_file_type,modality,review_status,num_series,num_files,series_instance_uid}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetNonDicomEditCompareToFiles	select \n  path,\n  file_id,\n  collection,\n  visibility\nfrom \n  (\n    select to_file_path as path, to_file_digest as digest\n    from non_dicom_edit_compare\n    where subprocess_invocation_id = ?\n  ) as foo natural left join\n  file natural left join non_dicom_file	{subprocess_invocation_id}	{path,file_id,collection,visibility}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Before import:\n       There should be no file_id (i.e. file has not been imported)  And there should be no collection.\n       (i.e. normally file_id, collection, and visibility are all null).
CloseDicomFileEditEvent	update dicom_edit_event\n  set time_completed = now(),\n  report_file = ?,\n  notification_sent = ?\nwhere\n  dicom_edit_event_id = ?	{report_file_id,notify,dicom_edit_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Increment edits done in dicom_edit_event table\nFor use in scripts\nNot really intended for interactive use\n
SeriesVisualReviewResultsByCollectionSiteSummary	select \n  distinct\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and visibility is null\ngroup by\n  dicom_file_type,\n  modality,\n  review_status\n	{project_name,site_name}	{dicom_file_type,modality,review_status,num_series,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SeriesByLikeDescriptionAndCollection	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and series_description like ?\n	{collection,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection matching Series Description\n
LatestActivityTimepointsForActivity	select\n  activity_id, a.when_created as activity_created,\n  brief_description as activity_description, activity_timepoint_id,\n  t.when_created as timepoint_created, \n  comment, creating_user\nfrom\n  activity a join activity_timepoint t using(activity_id)\nwhere\n  a.when_closed is null and\n  activity_id = ?\norder by activity_timepoint_id desc limit 1	{activity_id}	{activity_id,activity_created,activity_description,activity_timepoint_id,timepoint_created,comment,creating_user}	{activity_timepoint_support}	posda_queries	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
FilesByModalityByCollectionSiteDateRange	select\n  distinct patient_id, modality, series_instance_uid, sop_instance_uid, \n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom\n  file_patient natural join file_series natural join file_sop_common natural join ctp_file\n  natural join file_location natural join file_storage_root\n  join file_import using(file_id) join import_event using(import_event_id)\nwhere\n  modality = ? and\n  project_name = ? and \n  site_name = ? and\n  import_time > ? and import_time < ? and\n  visibility is null\ngroup by patient_id, modality, series_instance_uid, sop_instance_uid, path	{modality,collection,site,from,to}	{patient_id,modality,series_instance_uid,sop_instance_uid,path,earliest,latest}	{FindSubjects,intake,FindFiles}	posda_files	Find All Files with given modality in Collection, Site
SubjectCountByCollectionSite	select\n  distinct\n    patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id \norder by\n  patient_id\n	{collection,site}	{patient_id,count}	{counts}	posda_files	Counts query by Collection, Site\n
IntakeFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{intake,used_in_simple_phi}	intake	List of all Series By Collection, Site on Intake\n
ReviewEditsBySiteCollectionLike	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ? and project_name like ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site,CollectionLike}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
GetSubprocessLines	select\n  line\nfrom subprocess_lines\nwhere\n  subprocess_invocation_id = ?\norder by line_number\n	{subprocess_invocation_id}	{line}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
OneFileInSeries	select\n  distinct root_path || '/' || rel_path as file\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\nlimit 1\n	{series_instance_uid}	{file}	{by_series,find_files,used_in_simple_phi}	posda_files	Get files in a series from posda database\n
DistinctStudySeriesByCollectionSite	select distinct study_instance_uid as study_uid, series_instance_uid as series_uid, patient_id, dicom_file_type, modality, count(*)\nfrom (\nselect distinct study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality from (\nselect\n   distinct study_instance_uid, series_instance_uid, patient_id, modality, sop_instance_uid,\n   file_id, dicom_file_type\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient natural join file_study\nwhere\n  project_name = ? and site_name = ?\n  and visibility is null)\nas foo\ngroup by study_instance_uid, series_instance_uid, patient_id, sop_instance_uid, dicom_file_type, modality)\nas foo\ngroup by study_uid, series_uid, patient_id, dicom_file_type, modality\n	{collection,site}	{study_uid,series_uid,patient_id,dicom_file_type,modality,count}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi}	posda_files	Get Series in A Collection\n
CollectionSiteWithDicomFileTypesNotProcessed	select \n  distinct project_name as collection, site_name as site, dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by project_name, site_name, dicom_file_type	{}	{collection,site,dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Collection, Site, Dicom File Types which have unprocessed DICOM files\n
PublicFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{public,used_in_simple_phi}	public	List of all Series By Collection, Site on Intake\n
GetNonDicomEditCompareDisposition	select\n  num_edits_scheduled,\n  num_compares_with_diffs,\n  num_compares_without_diffs,\n  current_disposition,\n  dest_dir\nfrom\n  non_dicom_edit_compare_disposition\nwhere\n  subprocess_invocation_id = ?\n  	{subprocess_invocation_id}	{num_edits_scheduled,num_compares_with_diffs,num_compares_without_diffs,current_disposition,dest_dir}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Retrieve entries from patient_mapping table
MarkDicomFileAsNotHavingPixelData	update dicom_file set has_pixel_data = false where file_id = ?	{file_id}	{}	{adding_pixels_to_dicom_file}	posda_files	see name
SimplePublicPhiReportSelectedVR	select \n  distinct element_sig_pattern as element, vr, value, tag_name, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  not is_private and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element_sig_pattern, vr, value, tag_name\norder by vr, element_sig_pattern, value	{scan_id}	{element,vr,value,tag_name,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
TotalsByDateRange	select distinct\n\tproject_name,\n\tsite_name,\n\n\tcount(distinct patient_id) as num_subjects,\n\tcount(distinct study_instance_uid) as num_studies,\n\tcount(distinct series_instance_uid) as num_series,\n\tcount(distinct sop_instance_uid) as total_files\nfrom\n\timport_event\n\tnatural join file_import\n\tnatural join ctp_file\n\tnatural join file_study\n\tnatural join file_series\n\tnatural join file_sop_common\n\tnatural join file_patient\n\nwhere\n\tvisibility is null\n\tand import_time between ? and ? \n\ngroup by\n\tproject_name,\n\tsite_name\n	{from,to}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{AllCollections,DateRange,Kirk,Totals,count_queries,end_of_month}	posda_files	Get posda totals by date range\n\n**WARNING:**  This query can run for a **LONG** time if you give it a large date range.\nIt is intended for short date ranges (i.e. "What came in last night?" or "What came in last month?")\n
ApiImportEvents	select\n  import_event_id, import_comment, import_time, import_close_time, count(distinct file_id) as num_images\nfrom \n  import_event natural join file_import\nwhere\n  import_comment like ?\ngroup by import_event_id, import_comment, import_time, import_close_time	{import_comment_like}	{import_event_id,import_comment,import_time,import_close_time,num_images}	{downloads_by_date,import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
ListOfPrivateElementsWithNullDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ? and private_disposition is null\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
PrivateTagCountValueList	select \n  distinct element_signature, vr, value, private_disposition as disposition, count(*) as num_files\nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr, value, private_disposition\norder by element_signature, vr, value	{}	{vr,value,element_signature,num_files,disposition}	{postgres_status,PrivateTagKb,NotInteractive}	posda_phi	Get List of Private Tags with All Values\n
dicom_files_with_no_ctp_file	select distinct patient_id, dicom_file_type, modality, count(distinct file_id) as num_files\nfrom dicom_file d natural join file_patient natural join file_series\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) \ngroup by patient_id, dicom_file_type, modality	{}	{patient_id,dicom_file_type,modality,num_files}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
GetNonDicomFileById	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  file_id = ?	{file_id}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
FinalizeVisualReviewScheduling	update visual_review_instance set\n  when_visual_review_sched_complete = now()\nwhere\n  visual_review_instance_id = ?	{visual_review_instance_id}	{}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Get Id of Visual Review Instance
RoiInfoByFileIdWithCounts	select\n  distinct roi_id, for_uid, linked_sop_instance_uid,\n  max_x, max_y, max_z,\n  min_x, min_y, min_z,\n  roi_name, roi_description , roi_interpreted_type,\n  count(*) as num_contours\nfrom\n  roi natural join file_roi_image_linkage \nwhere file_id = ?\ngroup by \n  roi_id, for_uid, linked_sop_instance_uid,\n  max_x, max_y, max_z,\n  min_x, min_y, min_z,\n  roi_name,\n  roi_description, roi_interpreted_type	{file_id}	{roi_id,for_uid,linked_sop_instance_uid,max_x,max_y,max_z,min_x,min_y,min_z,roi_name,roi_description,roi_interpreted_type,num_contours}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
PatientStudySeriesFileHierarchyByCollectionSiteExt	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(*)\nfrom\n  file_study natural join\n  dicom_file natural join\n  ctp_file natural join\n  file_series natural join \n  file_patient natural join\n  file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\ngroup by\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,count}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
FindFilesInStudyWithDescriptionByStudyUID	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency}	posda_files	Find SopInstanceUID and Description for All Files In Study\n
VisibleImagesWithDetailsAndFileIdByVisualId	select \n  distinct patient_id, study_instance_uid, series_instance_uid, sop_instance_uid, modality, \n  file_id\nfrom \n  file_patient natural join file_study natural join file_series natural join \n  file_sop_common natural join ctp_file\nwhere series_instance_uid in (\n  select\n    distinct series_instance_uid\n  from\n    image_equivalence_class natural join file_series natural join\n    image_equivalence_class_input_image natural join dicom_file natural join ctp_file\n  where\n    visual_review_instance_id = ? \n)\nand visibility is null	{visual_review_instance_id}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality,file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetSsVolume	select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n	{sop_instance_uid}	{for_uid,study_instance_uid,series_instance_uid,sop_class_uid,sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
VisualReviewStatusDetailsOld	select \n  distinct image_equivalence_class_id, series_instance_uid, processing_status, review_status\nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image natural join dicom_file\nwhere \n  visual_review_instance_id = ? and processing_status = ? and \n  (review_status= ?  or review_status is null)  and dicom_file_type = ?	{visual_review_instance_id,processing_status,review_status,dicom_file_type}	{image_equivalence_class_id,series_instance_uid,processing_status,review_status}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
SimplePhiReportAllRelevantPrivateOnlyWithMetaQuotes	select \n  distinct '<' || element_sig_pattern || '>'  as element,\n  vr, '<' || value || '>' as q_value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na', 'o', 'h')\ngroup by element_sig_pattern, vr, value, description, disp\norder by vr, element	{scan_id}	{element,vr,q_value,description,disp,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
GetCtpFileRow	select file_id from ctp_file where file_id = ?	{file_id}	{file_id}	{meta,test,hello,query_tabs,bills_test}	posda_files	See if ctp_file_row exists
TagsSeenPrivateWithCount	select\n  distinct element_signature, \n  vr, \n  private_disposition, \n  name_chain, \n  count(distinct value) as num_values\nfrom\n  element_signature natural left join\n  scan_element natural left join\n  seen_value\nwhere is_private\ngroup by element_signature, vr, private_disposition, name_chain\norder by element_signature, vr	{}	{element_signature,vr,private_disposition,name_chain,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
GetSpreadsheetInfoForRadcompDisp	select\n  distinct patient_id,\n  study_instance_uid as study_uid, \n  series_instance_uid as series_uid,\n  baseline_date - diagnosis_date + interval '1 day' as shift,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file,\n  patient_mapping\nwhere\n  patient_id = to_patient_id and\n  ctp_file.project_name = ? and ctp_file.visibility is null\ngroup by\n  patient_id, study_uid, series_uid, shift	{collection}	{patient_id,study_uid,series_uid,num_files,shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
GetElementDispositionVR	select\n  element_signature_id, element_signature, vr, private_disposition as disposition, name_chain\nfrom\n  element_signature\nwhere\n  element_signature = ? and vr = ?\n	{element_signature,vr}	{element_signature_id,element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
GetPixelDescriptorByDigest	select\n  samples_per_pixel, \n  number_of_frames, \n  pixel_rows,\n  pixel_columns,\n  bits_stored,\n  bits_allocated,\n  high_bit, \n  file_offset,\n  root_path || '/' || rel_path as path\nfrom\n  image\n  natural join unique_pixel_data\n  natural join pixel_location\n  join file_location using (file_id)\n  join file_storage_root using (file_storage_root_id)\nwhere digest = ?\nlimit 1	{pixel_digest}	{samples_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,file_offset,path}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
GetFileSizeAndPathById	select\n  root_path || '/' || rel_path as path,\n  size\nfrom\n  file_storage_root natural join file_location natural join file \nwhere file_id = ?	{file_id}	{path,size}	{radcomp}	posda_files	Add a filter to a tab
RoundSummary1	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null \ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
GetNonDicomConversionInfoById	select\n  root_path || '/' || rel_path as path,\n  non_dicom_file.file_type,\n  file_sub_type,\n  collection, site, subject, visibility, size,\n  date_last_categorized\nfrom\n  file_storage_root natural join file_location natural join non_dicom_file join file using(file_id)\nwhere file_id = ?	{file_id}	{path,file_type,file_sub_type,collection,site,subject,visibility,size,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
TagsNotInAnyFilter	select\n  distinct tag\nfrom(\n  select unnest(tags) as tag\n  from queries\n) as tag_q\nwhere tag not in (select tag\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\n) 	{}	{tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
BackgroundProcessStatsWithInvokerLikeComand	select\n  distinct operation_name, command_executed, invoking_user as invoker, \n  max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null and operation_name like ?\ngroup by operation_name, command_executed, invoker	{operation_name_like}	{operation_name,command_executed,invoker,longest,shortest,avg,times_invoked,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
GetEditStatusByDisposition	select\n  subprocess_invocation_id as id,\n  start_creation_time, end_creation_time - start_creation_time as duration,\n  number_edits_scheduled as to_edit,\n  number_compares_with_diffs as changed,\n  number_compares_without_diffs as not_changed,\n  current_disposition as disposition,\n  dest_dir\nfrom\n  dicom_edit_compare_disposition\nwhere \n  current_disposition like ?\norder by start_creation_time desc	{disposition}	{id,start_creation_time,duration,to_edit,changed,not_changed,disposition,dest_dir}	{adding_ctp,find_patients,series_selection,check_edits,testing_edit_objects,edit_status}	posda_files	Get List of visible patients with CTP data
AllSubjectsWithNoStatus	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere\n  patient_id in (\n    select \n      distinct patient_id\n    from\n      file_patient p\n    where\n       not exists (\n         select\n           patient_id\n         from\n            patient_import_status s\n         where\n            p.patient_id = s.patient_id\n       )\n  ) \n  and visibility is null\ngroup by patient_id, project_name, site_name\norder by project_name, site_name, patient_id\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	All Subjects With No Patient Import Status\n
GetSpreadsheetInfoForRadcompDispWithModality	select\n  distinct patient_id,\n  study_instance_uid as study_uid, \n  series_instance_uid as series_uid,\n  modality,\n  baseline_date - diagnosis_date + interval '1 day' as shift,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file,\n  patient_mapping\nwhere\n  patient_id = to_patient_id and\n  ctp_file.project_name = ? and ctp_file.visibility is null\ngroup by\n  patient_id, study_uid, series_uid, modality, shift	{collection}	{patient_id,study_uid,series_uid,modality,num_files,shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
RecordReportInsertion	insert into report_inserted(\n  report_file_in_posda, report_rows_generated, background_subprocess_id\n)values(\n  ?, ?, ?\n)	{posda_id_of_report_file,rows_in_report,background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Record the upload of a report file by a background subprocess\n\nused in a background subprocess when a report file is uploaded
GetOpenActivities	select\n  activity_id, brief_description, when_created, who_created, when_closed\nfrom activity\nwhere when_closed is null\n\n	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
GetVisualReviewInstanceInfo	select \n  visual_review_reason\nfrom\n  visual_review_instance\nwhere\n  visual_review_instance_id = ?	{visual_review_instance_id}	{visual_review_reason}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of Series By Visual Review Id and Status\n
SummaryOfImportsFromEditByDateRange	select\n  distinct import_type, min(import_time) as earliest,\n  max(import_time) as latest, count(distinct import_event_id) as num_imports,\n  sum(num_files) as total_files\nfrom (\n  select * from (\n    select distinct import_event_id, import_time, import_type, import_comment, count(distinct file_id) as num_files\n    from import_event natural join file_import\n    where import_time > ? and import_time < ?\n    group by import_event_id, import_time, import_type, import_comment\n    order by import_time desc\n  ) as foo\n  where num_files > 1 and import_comment like '%dicom_edit_compare%'\n) as foo \ngroup by import_type;	{from,to}	{import_type,earliest,latest,num_imports,total_files}	{downloads_by_date,import_events}	posda_files	Counts query by Collection, Site\n
NullPatientAgeByCollection	select\n  file_id, root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location natural join ctp_file natural join file_patient\nwhere\n  project_name = ? and visibility is null and patient_age is null	{collection}	{file_id,path}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
GetValuesByEleVr	select\n  distinct value\nfrom\n  element_signature\n  join scan_element using(element_signature_id)\n  join seen_value using (seen_value_id)\nwhere\n  element_signature = ? and vr = ?\n	{element_signature,vr}	{value}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get All  values in posda_phi by element, vr
ElementsWithMultipleVRs	select element_signature, count from (\n  select element_signature, count(*)\n  from (\n    select\n      distinct element_signature, vr\n    from\n      scan_event natural join series_scan\n      natural join scan_element natural join element_signature\n      natural join equipment_signature\n    where\n      scan_event_id = ?\n  ) as foo\n  group by element_signature\n) as foo\nwhere count > 1\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	List of Elements with multiple VRs seen\n
SeriesWithRGB	select\n  distinct series_instance_uid\nfrom\n  image natural join file_image\n  natural join file_series\n  natural join ctp_file\nwhere\n  photometric_interpretation = 'RGB'\n  and visibility is null\n	{}	{series_instance_uid}	{find_series,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
ActivityStuffMoreBySubprocessInvocationId	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere subprocess_invocation_id = ?	{subprocess_invocation_id}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
UpdateEquivalenceClassProcessingStatus	update image_equivalence_class\nset processing_status = ?\nwhere image_equivalence_class_id = ?\n	{processing_status,image_equivalence_class_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
TotalsByDateRangeAndCollection	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? and project_name = ?\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time,project_name}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{DateRange,Kirk,Totals,end_of_month}	posda_files	Get posda totals by date range\n
FilePathByFileId	select\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{path}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,used_in_file_import_into_posda,reimport_queries}	posda_files	Get file path from id
FilesSeriesSopsVisibilityInTimepoint	select \n  file_id, patient_id, study_instance_uid, series_instance_uid, sop_instance_uid, visibility\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\n  natural join ctp_file\nwhere file_id in (\n  select file_id from activity_timepoint where activity_timepoint_id = ?)	{activity_timepoint_id}	{file_id,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,visibility}	{compare_series}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
PossiblyRunningSubprocesses	select\n  subprocess_invocation_id, command_line, invoking_user,\n  when_invoked, now() - when_invoked as duration\nfrom\n  subprocess_invocation natural left join background_subprocess\nwhere\n  when_background_entered is null and subprocess_invocation_id != 0 and\n  scrash is null and process_pid is null\norder by subprocess_invocation_id	{}	{subprocess_invocation_id,command_line,invoking_user,when_invoked,duration}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
FinalizeNonDicomEditCompareDisposition	update non_dicom_edit_compare_disposition set\n  end_creation_time = now(),\n  last_updated = now(),\n  current_disposition = 'Comparisons Complete'\nwhere\n  subprocess_invocation_id = ?\n	{subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Update an entry in dicom_edit_compare_disposition to indicate its done.\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
SubjectCountsDateRangeSummaryByCollectionSiteDateRange	select \n  distinct patient_id,\n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join file_patient natural join file_import natural join import_event\n  natural join file_sop_common\nwhere\n  project_name = ? and site_name = ? and import_time > ? and\n  import_time < ?\ngroup by patient_id\norder by patient_id	{collection,site,from,to}	{patient_id,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
AAA_import_test_query1	select '2492183' as file_id\nunion\nselect '4372774' as file_id\n	{}	{file_id}	{AllCollections,DateRange,Kirk,Totals,count_queries,end_of_month}	posda_files	Get posda totals by date range\n\n**WARNING:**  This query can run for a **LONG** time if you give it a large date range.\nIt is intended for short date ranges (i.e. "What came in last night?" or "What came in last month?")\n(Ignore this line, it is a test!)\n
TableSizePosdaQueries	select *, pg_size_pretty(total_bytes) AS total\n    , pg_size_pretty(index_bytes) AS INDEX\n    , pg_size_pretty(toast_bytes) AS toast\n    , pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n  SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM (\n      SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME\n              , c.reltuples AS row_estimate\n              , pg_total_relation_size(c.oid) AS total_bytes\n              , pg_indexes_size(c.oid) AS index_bytes\n              , pg_total_relation_size(reltoastrelid) AS toast_bytes\n          FROM pg_class c\n          LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n          WHERE relkind = 'r'\n  ) a\n) a where table_schema = 'public' order by total_bytes desc	{}	{table_schema,table_name,row_estimate,total_bytes,index_bytes,total,toast_bytes,index,toast,table}	{AllCollections,postgres_stats,table_size}	posda_queries	Get a list of collections and sites\n
AllPatientDetailsWithNoCtpLike	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n not exists (select file_id from ctp_file c where c.file_id = f.file_id)\n and patient_id like ?\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{patient_id_like}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	Get Series in A Collection\n
GetGeometricInfo	select \n  distinct sop_instance_uid, iop as image_orientation_patient,\n  ipp as image_position_patient,\n  pixel_spacing,\n  pixel_rows as i_rows,\n  pixel_columns as i_columns\nfrom\n  file_sop_common join \n  file_patient using (file_id) join\n  file_image using (file_id) join \n  file_series using (file_id) join\n  file_study using (file_id) join\n  image using (image_id) join\n  file_image_geometry using (file_id) join\n  image_geometry using (image_geometry_id) \nwhere \n  sop_instance_uid = ?\n	{sop_instance_uid}	{sop_instance_uid,image_orientation_patient,image_position_patient,pixel_spacing,i_rows,i_columns}	{LinkageChecks,BySopInstance}	posda_files	Get Geometric Information by Sop Instance UID from posda
PatientStudySeriesHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetListOfUnprocessedStructureSets	select\n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location\nwhere file_id in (\n  select distinct file_id\n  from dicom_file df natural join ctp_file\n  where \n  dicom_file_type = 'RT Structure Set Storage'\n  and visibility is null and has_no_roi_linkages is null\n  and not exists (\n    select file_id from file_roi_image_linkage r where r.file_id = df.file_id\n  )\n) 	{}	{file_id,path}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
GetModuleToTableArgs	select *\nfrom \n  dicom_tag_parm_column_table natural left join tag_preparation\nwhere posda_table_name = ?	{table_name}	{tag_cannonical_name,tag,posda_table_name,column_name,preparation_description}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
DuplicateCtpFile	select\n  distinct project_name as collection,\n  site_name as site,\n  dicom_file_type,\n  count(distinct file_id) as num_files,\n  min(import_time) as first,\n  max(import_time) as last,\n  count(*) as num_imports,\n  max(import_time) - min(import_time) as duration\nfrom\n   ctp_file natural join dicom_file natural join file_import natural join import_event\nwhere file_id in (\n  select file_id from (\n    select distinct file_id, count(*) from dicom_file group by file_id \n  ) as foo where count > 1\n) group by collection, site, dicom_file_type order by collection, site;	{}	{collection,site,dicom_file_type,num_files,first,last,num_imports,duration}	{AllCollections,queries}	posda_files	Get a list of available queries
DistinctSeriesByCollectionIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality	{project_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake}	intake	Get Series in A Collection\n
DistinctVisibleFileReportByPatientCollectionSite	select distinct\n  project_name as collection, site_name as site, patient_id, study_instance_uid,\n  series_instance_uid, sop_instance_uid, dicom_file_type, modality, file_id\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\n  natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and patient_id = ? and visibility is null\norder by series_instance_uid	{project_name,site_name,patient_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,dicom_file_type,modality,file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
MarkEquivalenceClassForRetry	update image_equivalence_class set\n  processing_status = 'ReadyToProcess',\n  review_status = null\nwhere image_equivalence_class_id = ?	{image_equivalence_class_id}	{}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
RecordFileConversion	insert into non_dicom_conversion(from_file_id, to_file_id, conversion_event_id)\nvalues(?, ?, ?)	{from_file_id,to_file_id,conversion_event_id}	{}	{radcomp}	posda_files	Add a filter to a tab
GetHiddenToFiles	select \n  f.file_id as file_id,\n  c.visibility as visibility \nfrom\n  dicom_edit_compare dec,\n  file f,\n  ctp_file c\nwhere\n  dec.to_file_digest = f.digest and\n  f.file_id = c.file_id and \n  c.visibility is not null and\n  dec.subprocess_invocation_id = ?	{subprocess_invocation_id}	{file_id,visibility}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert edit_event\nFor use in scripts\nNot really intended for interactive use\n
BackgroundProcessStats	select\n  distinct command_executed, max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  count(distinct invoking_user) as num_invokers,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null\ngroup by command_executed\norder by last desc, times_invoked desc	{}	{command_executed,longest,shortest,avg,times_invoked,num_invokers,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
ComplexDuplicatePixelDataNew	select distinct project_name as collection,\nsite_name as site,\npatient_id as patient,\nseries_instance_uid, count(distinct file_id) as num_files\nfrom\nctp_file natural join file_patient\nnatural join file_series where file_id in (\nselect file_id from \nfile_image join image using(image_id) \njoin unique_pixel_data using (unique_pixel_data_id)\nwhere digest in (\nselect distinct pixel_digest as digest from (\nselect\n  distinct pixel_digest, count(*) as num_pix_dups\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest) as foo\nwhere num_pix_dups = ?))\ngroup by collection, site, patient, series_instance_uid\norder by num_files desc	{num_pix_dups}	{collection,site,patient,series_instance_uid,num_files}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
GetFileIdByFileId	select\n  file_id\nfrom\n  file\nwhere\n  file_id = ?\n	{file_id}	{file_id}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
GetModuleToPosdaTable	select * from dicom_module_to_posda_table	{}	{dicom_module_name,create_row_query,table_name}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
FilesInSeriesForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a series\n
ClosedPlanarContoursWithoutLinksByFile	select\n  distinct roi_id,\n  roi_name\nfrom\n  file_structure_set natural join\n  structure_set natural join\n  roi natural join \n  roi_contour r\nwhere\n  file_id =? and \n  geometric_type = 'CLOSED_PLANAR' and \n  not exists (\n    select roi_contour_id from contour_image ci where ci.roi_contour_id = r.roi_contour_id\n  )	{file_id}	{roi_id,roi_name}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
FinalizeDciodvfyUnitScan	update dciodvfy_unit_scan set\n  num_errors_in_unit = ?,\n  num_warnings_in_unit = ?,\n  end_time = now()\nwhere\n  dciodvfy_unit_scan_id = ?\n 	{num_errors_in_unit,num_warnings_in_unit,unit_scan_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan row
ListOpenActivitiesWithItems	select\n  distinct activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  count(distinct user_inbox_content_id) as num_items\nfrom\n  activity natural join activity_inbox_content\nwhere when_closed is null\ngroup by activity_id, brief_description, when_created, who_created\norder by activity_id desc	{}	{activity_id,brief_description,when_created,who_created,num_items}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
SeriesVisualReviewResultsByCollectionSiteVisible	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
AllQueryTabs	select \n   distinct  query_tab_name\nfrom\n  query_tabs	{}	{query_tab_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
PatientStudySeriesFileHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
GetSopModalityPathDigest	select \n  sop_instance_uid, modality,\n  root_path || '/' || rel_path as path,\n  digest\nfrom\n  file natural join file_series natural join file_sop_common natural join file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid,modality,path,digest}	{bills_test,comparing_posda_to_public}	posda_files	get sop_instance, modality, and path to file by file_id
GetSopOfSsReferenceByPlan	select\n  distinct ss_referenced_from_plan as sop_instance_uid\nfrom\n  plan natural join file_plan\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid}	{LinkageChecks,used_in_plan_linkage_check}	posda_files	Get Plan Reference Info for RTDOSE by file_id\n
AddTagToQuery	update queries\nset tags = array_append(tags, ?)\nwhere name = ?	{tag,name}	{}	{query_tags,meta,test,hello}	posda_queries	Add a tag to a query
GetConversionId	select currval('conversion_event_conversion_event_id_seq') as id	{}	{id}	{radcomp}	posda_files	Add a filter to a tab
PixelInfoByImageId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  image natural join unique_pixel_data natural join pixel_location\n  natural join file_location natural join file_storage_root\nwhere image_id = ?\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
CountsByCollectionDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
StudyNickname	select\n  project_name, site_name, subj_id, study_nickname\nfrom\n  study_nickname\nwhere\n  study_instance_uid = ?\n	{study_instance_uid}	{project_name,site_name,subj_id,study_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular study uid\n
GetPublicTagDispositionBySignature	select\n  disposition\nfrom public_tag_disposition\nwhere tag_name = ?\n	{signature}	{disposition}	{DispositionReport,NotInteractive}	posda_public_tag	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
DistinctPatientStudySeriesByCollectionDateRange	select distinct\n  patient_id, \n  study_instance_uid,\n  series_instance_uid, \n  dicom_file_type,\n  modality, \n  count(distinct file_id) as num_files\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_study\n  natural join file_series\n  natural join file_patient\n  natural join file_import\n  natural join import_event\nwhere\n  project_name = ? and\n  visibility is null and\n  import_time > ?\n  and import_time < ?\ngroup by\n  patient_id, \n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality\n  	{collection,from,to}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series}	posda_files	Get Series in A Collection\n
InsertIntoNonDicomAttachments	insert into non_dicom_attachments(\n  non_dicom_file_id,\n  dicom_file_id,\n  patient_id,\n  manifest_uid,\n  study_instance_uid,\n  series_instance_uid,\n  manifest_date,\n  version\n)values(\n  ?, ?, ?, ?, ?, ?, ?, ?\n)\n	{non_dicom_file_id,dicom_file_id,patient_id,manifest_uid,study_instance_uid,series_instance_uid,manifest_date,version}	{}	{radcomp}	posda_files	Add a filter to a tab
GetDicomEditCompareToFiles	select \n  path,\n  file_id,\n  project_name,\n  visibility\nfrom \n  (\n    select to_file_path as path, to_file_digest as digest\n    from dicom_edit_compare\n    where subprocess_invocation_id = ?\n  ) as foo natural left join\n  file natural left join ctp_file	{subprocess_invocation_id}	{path,file_id,project_name,visibility}	{adding_ctp,for_scripting}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
GetPlansReferencingBadSS	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan  where\nnot exists (select sop_instance_uid from file_sop_common fsc where p.ss_referenced_from_plan \n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetPhiNonDicomScanId	select\n  currval('phi_non_dicom_scan_instance_phi_non_dicom_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
VisualReviewStatusWithCollectionById	select \n  distinct project_name as collection, site_name as site, \n  series_instance_uid, review_status, modality, series_description,\n  series_date, count(distinct image_equivalence_class_id) as num_equiv_classes, \n  count(distinct file_id) as num_files\nfrom\n  visual_review_instance natural join image_equivalence_class natural join\n  image_equivalence_class_input_image natural join\n  file_series natural join ctp_file\nwhere\n  visual_review_instance_id = ? and review_status = ? and visibility is null\ngroup by collection, site, series_instance_uid, review_status, modality, series_description, series_date;	{visual_review_instance_id,review_status}	{collection,site,series_instance_uid,review_status,modality,series_description,series_date,num_equiv_classes,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
VisibilityChangeEventsByCollectionWithoutFurtherBreakdown	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
GetDatasetStart	select\n  data_set_start\nfrom\n  file_meta\nwhere\n  file_id = ?	{file_id}	{data_set_start}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
SeriesWithMultiplePatientIds	select\n  distinct series_instance_uid,\n  patient_id\nfrom\n  file_series natural join file_patient natural join ctp_file                                                      \nwhere series_instance_uid in (                                                                                                                                                        \n  select distinct series_instance_uid from (                                                                                                                                                                                    \n     select * from (\n        select distinct series_instance_uid, count(*) from (\n          select distinct series_instance_uid, patient_id\n          from file_series natural join file_patient natural join ctp_file\n          where project_name = ? and visibility is null\n        ) as foo group by series_instance_uid\n      ) as foo where count > 1\n   ) as foo\n) and\nvisibility is null	{collection}	{series_instance_uid,patient_id}	{by_study,consistency,series_consistency}	posda_files	Find Inconsistent Studies\n
PhiScanStatusInProcess	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned,\n  (((now() - scan_started) / num_series_scanned) * (num_series_to_scan -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series_to_scan as float)) * 100.0 as percentage\nfrom\n  scan_event\nwhere\n   num_series_to_scan > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned,percentage,projected_completion}	{tag_usage,obsolete}	posda_phi	Status of PHI scans\n
GetDoseReferencingGoodPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d  natural join file_dose  where\nexists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference known SOPs\n\n
GetSopsInSeriesforLGCP	select\n  sop_instance_uid, file_id, for_uid\nfrom \n  file_series natural join file_for natural join ctp_file\n  natural join file_sop_common\nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{sop_instance_uid,file_id,for_uid}	{"Curation of Lung-Fused-CT-Pathology"}	posda_files	Get SOP instance uid, file_id, and path for each file in series
CreateRound	insert into round(\n  round_created\n) values (\n  now()\n)\n	{}	{}	{NotInteractive,Backlog}	posda_backlog	Create a row in round table to record files_imported in this round
ImportsLikeType	select\n  distinct import_type, import_comment, import_time,\n  sum(num_files) as total_files\nfrom (\n  select * from (\n    select\n      distinct import_event_id, import_time, import_type, import_comment, count(distinct file_id) as num_files \n    from\n      import_event natural join file_import\n    where import_time > ? and import_time < ?\n    group by import_event_id, import_time, import_type, import_comment order by import_time desc\n  ) as foo\n  where num_files > 1 and import_type like ?\n) as foo\ngroup by import_type, import_time, import_comment	{from,to,type_like}	{import_type,import_comment,import_time,total_files}	{downloads_by_date,import_events}	posda_files	Counts query by Collection, Site\n
GetSsReferencingKnownImagesByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere file_id in (\n  select\n    distinct ss_file_id as file_id \n  from (\n    select\n      sop_instance_uid, ss_file_id \n    from (\n      select \n        distinct\n           linked_sop_instance_uid as sop_instance_uid,\n           file_id as ss_file_id\n      from\n        file_roi_image_linkage\n    ) foo left join file_sop_common using(sop_instance_uid)\n    join ctp_file using(file_id)\n  where\n    visibility is null\n  ) as foo\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of RTSTRUCT which reference known SOPs by Collection\n\n
SeriesForPhi	select \n  series_instance_uid \nfrom \n  series_scan_instance\nwhere series_scan_instance_id in (\n  select series_scan_instance_id from (\n    select * from element_value_occurance \n    where\n      phi_scan_instance_id = ? and\n      element_seen_id in (\n        select element_seen_id from element_seen\n        where element_sig_pattern = ?\n      ) and \n      value_seen_id in (\n        select value_seen_id from value_seen\n        where value = ?\n      )\n  ) as foo\n)	{scan_id,element_sig_pattern,value}	{series_instance_uid}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
background_subprocesses_by_date	select \n  background_subprocess_id as bkgrnd_id, subprocess_invocation_id as invoc_id,\n  operation_name, command_line, invoking_user, when_script_started\nfrom\n  background_subprocess natural left join subprocess_invocation where invoking_user = ?\n  and when_script_ended is not null\n  and when_script_started > ? and when_script_started < ?\norder by when_script_started desc	{invoking_user,from,to}	{bkgrnd_id,invoc_id,operation_name,command_line,invoking_user,when_script_started}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
CurrentPatientStatii	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  patient_import_status\nfrom \n  ctp_file natural join file_patient natural left join patient_import_status\nwhere \n  visibility is null	{}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
AllPixelInfoByPhotometricInterp	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and photometric_interpretation = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
GetPatientMapping	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  diagnosis_date,\n  baseline_date,\n  date_shift,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom\n  patient_mapping\n  	{}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
SeriesNickname	select\n  project_name, site_name, subj_id, series_nickname\nfrom\n  series_nickname\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{project_name,site_name,subj_id,series_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular series uid\n
GetFileVisibilityByDigest	select distinct file_id,  visibility from file natural join ctp_file where digest = ?	{digest}	{file_id,visibility}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get current visibility by file_id\n
ActivityStuffMoreByUser	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere invoking_user = ?\norder by subprocess_invocation_id desc\n	{user}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
ListOfUncategorizedDciodvfyErrors	select distinct error_text, count(*)  as num_occurances from dciodvfy_error\nwhere\n  error_type = 'Uncategorized'\ngroup by \nerror_text	{}	{error_text,num_occurances}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy uncategorized warnings in DB
PatientIdAndMappingByNonDicomFileId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom \n  patient_mapping pm, non_dicom_file ndf\nwhere\n  pm.from_patient_id = ndf.subject and\n  file_id = ?	{file_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root,computed_shift}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
SeriesWithDuplicatePixelDataThatMatters	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom \n  file_series natural join file_image\n  natural join file_patient\n  natural join ctp_file\nwhere \n  visibility is null \n  and image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n) group by collection, site, patient_id, series_instance_uid\n	{collection}	{collection,site,series_instance_uid,patient_id,num_files}	{pixel_duplicates}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
AllPatientDetailsWithNoCtpByImportEvent	select\n  distinct \n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series f\nwhere\n not exists (select file_id from ctp_file c where c.file_id = f.file_id)\n and file_id in (select file_id from file_import where import_event_id = ?)\ngroup by\n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  patient_id, study_date,\n  modality\n	{import_event_id}	{patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details}	posda_files	List patient details without CTP, selected by import event\n
FindingImageProblemCT	select\n  distinct dicom_file_type, project_name,  \n  patient_id, min(import_time), max(import_time), count(distinct file_id) \nfrom\n  ctp_file natural join dicom_file natural join\n  file_patient natural join file_import natural join \n  import_event \nwhere file_id in (\n  select file_id \n  from (\n    select file_id, image_id \n    from ctp_file natural join file_series left join file_image using(file_id)\n    where modality = 'CT' and project_name = 'Exceptional-Responders' and file_id in (\n      select\n         distinct file_id from file_import natural join import_event natural join dicom_file\n      where import_time > '2018-09-17'\n    )\n  ) as foo where image_id is null\n) \nand visibility is null\ngroup by dicom_file_type, project_name, patient_id\norder by patient_id	{}	{dicom_file_type,project_name,patient_id,min,max,count}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
DistinctSopsInCollectionIntake	select\n  distinct i.sop_instance_uid\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
StudiesInPublicHnsccWithMostCtAndRt	select\n patient_id, study_instance_uid, num_images as num_cts\nfrom (\n  select \n    distinct i.patient_id, t.study_instance_uid,\n    s.series_instance_uid, \n    t.study_desc, series_desc, count(*) as num_images\n  from \n    general_image i, trial_data_provenance tdp, general_series s, study t\n  where\n    i.study_pk_id = t.study_pk_id and i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n    i.general_series_pk_id = s.general_series_pk_id and tdp.project = 'HNSCC' and\n    modality = 'CT' and t.study_desc = 'RT SIMULATION' \n  group by series_instance_uid\n) as foo order by num_images desc	{}	{patient_id,study_instance_uid,num_cts}	{meta,test,hello,query_tabs,bills_test}	public	Name says it all
PatientIdByNonDicomFileId	select subject from non_dicom_file where file_id = ?	{file_id}	{subject}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
QueryByName	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\nwhere name = ?\n	{name}	{name,description,query,tags}	{AllCollections,queries}	posda_queries	Get a list of available queries
GetDoseReferencingBadPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d natural join file_dose  where\nnot exists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,dose_linkages}	posda_files	Get list of RTDOSE which reference unknown SOPs\n\n
GetNotQualifiedCTQPByLikeCollectionSiteWithFIleCount	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id)\nwhere collection like ? and site = ? and not qualified\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified,num_files}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
SeriesConsistencyExtended	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  count(*)\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join image_geometry using (image_id)\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, dicom_file_type, modality, series_number, laterality,\n  series_date, image_type, iop, pixel_rows, pixel_columns,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,dicom_file_type,modality,laterality,series_number,series_date,image_type,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,iop,pixel_rows,pixel_columns}	{by_series,consistency}	posda_files	Check a Series for Consistency (including Image Type)\n
ImportEvents	select\n  distinct import_event_id, import_time,  count(distinct file_id) as num_files\nfrom\n  import_event natural join file_import\nwhere\n  import_type = 'single file import' and \n  import_time > ? and import_time < ?\ngroup by import_event_id, import_time	{from,to}	{import_event_id,import_time,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
GetFilePathPublicBySopInst	select\n  dicom_file_uri\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{dicom_file_uri}	{posda_files,sops,BySopInstance}	public	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
SeriesReport	select \n  file_id, sop_instance_uid, modality, cast(instance_number as int) inst_num, iop, ipp\nfrom \n  file_series natural join file_sop_common \n  left join file_image_geometry using(file_id) \n  left join image_geometry using(image_geometry_id)\nwhere file_id in (\n  select \n  file_id from file_series natural join ctp_file\n  where series_instance_uid = ?\n    and visibility is null\n) order by inst_num;	{series_instance_uid}	{file_id,modality,inst_num,iop,ipp,sop_instance_uid}	{by_series_instance_uid,duplicates,posda_files,sops,series_report}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
SeriesForFile	select series_instance_uid from file_series where file_id = ?	{file_id}	{series_instance_uid}	{activity_timepoint_support}	posda_files	Create An Activity Timepoint\n\n
ListOfQueriesPerformedAllWithLatestAndCountAndUser	select\n  distinct invoking_user, query_name,\n  max(query_start_time) as last_invocation, \n  count(query_invoked_by_dbif_id) as num_invocations,\n  sum(query_end_time - query_start_time) as total_query_time,\n  avg(query_end_time - query_start_time) as avg_query_time\nfrom \n  query_invoked_by_dbif\ngroup by invoking_user, query_name\norder by last_invocation  desc	{}	{invoking_user,query_name,last_invocation,num_invocations,total_query_time,avg_query_time}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
FinalizeDicomEditCompareDisposition	update dicom_edit_compare_disposition set\n  end_creation_time = now(),\n  current_disposition = 'Comparisons Complete'\nwhere\n  subprocess_invocation_id = ?\n	{subprocess_invocation_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition to indicate its done.\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
SeriesVisualReviewResultsByCollectionSiteStatusNotGoodExtended	select\n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  series_modality as modality,\n  review_status,\n  num_files\nfrom (\nselect \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality as series_modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status != 'Good'\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\n) as foo\n  join file_series using (series_instance_uid)\n  join file_study using (file_id) \n  join file_patient using(file_id)\n  join ctp_file using(file_id)\nwhere\n  visibility is null\norder by patient_id, study_instance_uid, series_instance_uid\n	{project_name,site_name}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
PatientStatusCountsByCollection	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere project_name = ? and visibility is null\ngroup by collection, status\n	{collection}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
InsertFileFrameOfRef	insert into file_for(file_id, for_uid, position_ref_indicator) values(?, ?, ?)	{file_id,for_uid,position_ref_indicator}	{}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
UpdateElementDispositionOnly	update element_signature set \n  private_disposition = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{private_disposition,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
IntakeCountsOld	select\n        p.patient_id as PID,\n        i.image_type as ImageType,\n        s.modality as Modality,\n        count(i.sop_instance_uid) as Images,\n        t.study_date as StudyDate,\n        t.study_desc as StudyDescription,\n        s.series_desc as SeriesDescription,\n        s.series_number as SeriesNumber,\n        t.study_instance_uid as StudyInstanceUID,\n        s.series_instance_uid as SeriesInstanceUID,\n        q.manufacturer as Mfr,\n        q.manufacturer_model_name as Model,\n        q.software_versions,\n        c.reconstruction_diameter as ReconstructionDiameter,\n        c.kvp as KVP,\n        i.slice_thickness as SliceThickness\n     from\n        general_image i,\n        general_series s,\n        study t,\n        patient p,\n        trial_data_provenance tdp,\n        general_equipment q,\n        ct_image c\n     where\n        i.general_series_pk_id = s.general_series_pk_id and\n        s.study_pk_id = t.study_pk_id and\n        s.general_equipment_pk_id = q.general_equipment_pk_id and\n        t.patient_pk_id = p.patient_pk_id and\n        p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n        tdp.project = ? and\n        tdp.dp_site_name = ? and\n        c.image_pk_id = i.image_pk_id\n    group by p.patient_id, i.image_type, s.series_instance_uid, t.study_instance_uid\n	{collection,site}	{PID,Modality,Images,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,ImageType,ReconstructionDiameter,KVP,SliceThickness}	{intake}	intake	List of all Files Images By Collection, Site\n
GetCurrentPosdaFileId	select  currval('file_file_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of created file row
InsertSendEvent	insert into dicom_send_event(\n  destination_host, destination_port,\n  called_ae, calling_ae,\n  send_started, invoking_user,\n  reason_for_send, number_of_files,\n  is_series_send, series_to_send\n)values(\n  ?, ?,\n  ?, ?,\n  now(), ?,\n  ?, ?,\n  true, ?\n)\n	{host,port,called,calling,who,why,num_files,series}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Create a DICOM Series Send Event\nFor use in scripts.\nNot meant for interactive use\n
ClearPublicDispositions	delete from public_disposition where\n  sop_class_uid = ? and name = ?\n\n	{sop_class_uid,name}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Clear all public dispositions for a give sop_class and name
SubjectsWithDupSopsByCollection	select\n  distinct collection, site, subj_id, \n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id, sop_instance_uid, import_time\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_import\n    natural join import_event\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection}	{collection,site,subj_id,num_sops,num_files,earliest,latest}	{dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
WhichSeriesInCollectionSiteAreNotVisuallyReviewed	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n   series_instance_uid,\n  dicom_file_type,\n  modality,\n  'Not submitted for review' as review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series ser natural join\n  file_patient natural join  \n  ctp_file\nwhere\n  project_name = ? and\n  site_name = ?\n  and visibility is null\n  and not exists (\n    select * from image_equivalence_class iec\n    where iec.series_instance_uid = ser.series_instance_uid\n  )\ngroup by\n  collection, site, patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{collection,site}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
GetScanEventById	select * from scan_event where scan_event_id = ?\n	{scan_id}	{scan_event_id,scan_started,scan_ended,scan_status,scan_description,num_series_to_scan,num_series_scanned}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetNonDicomFileTypeSubTypeCollectionSiteSubjectById	select \n  file_type,\n  file_sub_type,\n  collection,\n  site,\n  subject\nfrom \n  non_dicom_file\nwhere file_id = ?	{file_id}	{file_type,file_sub_type,collection,site,subject}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get stuff from non_dicom_file by id\n
VisibilityChangeEventsBySeries	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere series_instance_uid = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{series_instance_uid}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
DistinctSeriesByCollectionModality	select distinct series_instance_uid, patient_id, dicom_file_type, modality, count(distinct file_id) as num_files\n from file_series natural join file_sop_common\n   natural join ctp_file natural join dicom_file natural join file_patient\nwhere\n  project_name = ? and modality = ?\n  and visibility is null\ngroup by series_instance_uid, patient_id, dicom_file_type, modality	{collection,modality}	{series_instance_uid,patient_id,dicom_file_type,modality,num_files}	{by_collection,find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy,edit_files}	posda_files	Get Series in A Collection\n
CountsByCollection	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection\n
VisibleSeriesVisualReviewResultsByCollectionSiteStatus	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
RoundSummaryWithCollectionDateRange	select\n  distinct round_id, collection,\n  round_start, \n  round_end - round_start as duration, \n  round_end\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_start > ? and round_end < ?\ngroup by \n  round_id, collection, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,collection,round_start,duration,round_end}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
ListOfCollectionsBySite	select \n    distinct project_name as collection, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and site_name = ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{site}	{collection,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
ActivityTimepointsForActivityWithFileCount	select\n  distinct activity_id, a.when_created as activity_created,\n  brief_description as activity_description, activity_timepoint_id,\n  t.when_created as timepoint_created, \n  comment, creating_user, count(distinct file_id) as file_count\nfrom\n  activity a join activity_timepoint t using(activity_id)\n  left join activity_timepoint_file using (activity_timepoint_id)\nwhere\n  activity_id = ?\ngroup by activity_id, a.when_created, brief_description,\n  activity_timepoint_id, t.when_created, comment, creating_user\norder by t.when_created desc	{activity_id}	{activity_id,activity_created,activity_description,activity_timepoint_id,timepoint_created,comment,creating_user,file_count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_queries	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetStructureSetVolumeByFileId	select\n  distinct sop_instance\nfrom\n  ss_volume natural join ss_for natural join file_structure_set\nwhere file_id = ?	{file_id}	{sop_instance}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of SOP's linked in SS\n\n
VisualReviewSeriesByIdReviewStatusProcessingStatusAndDicomFileType	select \n  distinct image_equivalence_class_id, series_instance_uid\nfrom\n  visual_review_instance natural join image_equivalence_class natural join\n  image_equivalence_class_input_image natural join dicom_file natural join \n  file_series natural join ctp_file\nwhere\n  visual_review_instance_id = ? and review_status = ? and processing_status = ? and dicom_file_type = ?\n	{visual_review_instance_id,review_status,processing_status,dicom_file_type}	{image_equivalence_class_id,series_instance_uid}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
FileReportByImportEvent	select\n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, study_date, study_description, series_instance_uid,\n  modality, series_date, dicom_file_type, count(distinct file_id) as num_files\nfrom\n  file_import natural join file_patient natural join file_series natural join\n  file_study natural join dicom_file natural left join ctp_file\nwhere\n  import_event_id = ?\ngroup by\n  collection, site, patient_id, study_instance_uid, study_date,\n  study_description, series_instance_uid, modality, series_date, dicom_file_type;	{import_event_id}	{collection,site,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,modality,series_date,dicom_file_type,num_files}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
DispositonsSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  private_disposition as disposition\nfrom\n  element_seen\nwhere\n  is_private\norder by element_sig_pattern\n	{}	{id,element_sig_pattern,vr,tag_name,disposition}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
GetMaxProcessedFileId	select\n  max(file_id) as file_id\nfrom\n  file\nwhere\n  is_dicom_file is not null\n	{}	{file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
UpdateSeriesFinished	update scan_event \nset scan_status = 'finished',\n  scan_ended = now()\nwhere scan_event_id = ?	{scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update status to finished in scan event\n
IsThisSeriesNotVisuallyReviewed	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  'Not submitted for review' as review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series ser natural join \n  ctp_file\nwhere\n  series_instance_uid = ?\n  and visibility is null\n  and not exists (\n    select * from image_equivalence_class iec\n    where iec.series_instance_uid = ser.series_instance_uid\n  )\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{series_instance_uid}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
FilesInSeriesForApplicationOfPrivateDispositionIntake	select\n  i.dicom_file_uri as path, i.sop_instance_uid, s.modality\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.series_instance_uid = ?	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,intake}	intake	Get path, sop_instance_uid, and modality for all files in a series\n
FilesInSeriesForApplyingPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, sop_instance_uid, \n  modality\nfrom\n  file_location natural join file_storage_root\n  natural join ctp_file\n  natural join file_sop_common natural join file_series\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{SeriesSendEvent,by_series,find_files,ApplyDisposition}	posda_files	Get Sop Instance UID, file_path, modality for all files in a series
LongestRunningNQueries	select * from (\nselect query_invoked_by_dbif_id as id, query_name, query_end_time - query_start_time as duration,\ninvoking_user, query_start_time, number_of_rows\nfrom query_invoked_by_dbif\nwhere query_end_time is not null\norder by duration desc) as foo\nlimit ?	{n}	{id,query_name,duration,invoking_user,query_start_time,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
GetElementByPrivateDisposition	select\n  element_signature, private_disposition as disposition\nfrom\n  element_signature\nwhere\n  is_private and private_disposition = ?\n	{private_disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Private Elements By Disposition
ToFilesFilesImportedByEditId	select\n  count(distinct file_id) as files_imported\nfrom (\n    select distinct file_id from file f, dicom_edit_compare dec\n     where f.digest = dec.to_file_digest and \n        subprocess_invocation_id = ?\n  ) as foo\n	{subprocess_invocation_id}	{files_imported}	{adding_ctp,find_patients,series_selection,check_edits,edit_status}	posda_files	Get List of visible patients with CTP data
GetCTQP	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id	{}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
IntakePatientsByCollectionSite	select\n  distinct p.patient_id as PID, count(distinct i.image_pk_id) as num_images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by PID\n	{collection,site}	{PID,num_images}	{intake}	intake	List of all Files Images By Collection, Site\n
GetStudyInfoById	select\n  file_id,\n  study_instance_uid,\n  study_date,\n  study_time,\n  referring_phy_name,\n  study_id,\n  accession_number,\n  study_description,\n  phys_of_record,\n  phys_reading,\n  admitting_diag\nfrom file_study\nwhere file_id = ?	{file_id}	{file_id,study_instance_uid,study_date,study_time,referring_phy_name,study_id,accession_number,study_description,phys_of_record,phys_reading,phys_reading,admitting_diag}	{reimport_queries}	posda_files	Get file path from id
DciodvfyErrorIdByValue	select \n  distinct dciodvfy_error_id\nfrom \n  dciodvfy_error\nwhere\n  error_value = ?	{error_value}	{dciodvfy_error_id}	{tag_usage,dciodvfy}	posda_phi_simple	find dciodvfy_error_id by contents of error_value
GetActivityTimepointId	select currval('activity_timepoint_activity_timepoint_id_seq') as id	{}	{id}	{by_collection,activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
ReOpenActivity	update activity set\n  when_closed = null\nwhere\n  activity_id = ?	{activity_id}	{}	{activity_timepoint_support,activity_support}	posda_queries	Close an activity\n\n
GetWinLev	select\n  window_width, window_center, win_lev_desc, wl_index\nfrom\n  file_win_lev natural join window_level\nwhere\n  file_id = ?\norder by wl_index desc;\n	{file_id}	{window_width,window_center,win_lev_desc,wl_index}	{by_file_id,posda_files,window_level}	posda_files	Get a Window, Level(s) for a particular file \n
GetNfilesToCopy	select\n  c.sop_instance_uid,\n  c.replace_file_id,\n  c.copy_file_path\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is null) and \n  (inserted_file_id is null)\nlimit ?	{copy_from_public_id,count}	{sop_instance_uid,replace_file_id,copy_file_path}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
ShowQueryTabHierarchyByTabWithQueries	select\n  query_tab_name, filter_name, tag, query_name\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n) as foo\nnatural join(\n  select name as query_name, unnest(tags) as tag\nfrom queries\n) as fie\norder by filter_name, tag, query_name	{query_tab_name}	{query_tab_name,filter_name,tag,query_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
VisibilityChangesByCollectionSite	select\n  distinct project_name as collection, \n  site_name as site,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and site_name = ?\ngroup by \n  collection, site, user_name, prior_visibility, new_visibility,\n  time, reason_for\norder by time, collection, site	{collection,site}	{collection,site,user_name,prior_visibility,new_visibility,time,reason_for,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
FindInconsistentStudyIgnoringStudyTime	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
InsertIntoPatientMappingBaselineNoBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  diagnosis_date,\n  baseline_date) values (\n  ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,diagnosis_date,baseline_date}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with no batch and diagnosis_date, and baseline_date
CreateNonDicomFileById	insert into non_dicom_file(\n  file_id, file_type, file_sub_type, collection, site, subject, date_last_categorized\n)values(\n  ?, ?, ?, ?, ?, ?, now()\n)\n	{file_id,file_type,file_sub_type,collection,site,subject}	{}	{radcomp}	posda_files	Add a filter to a tab
GetSeriesFileCountsByPatientId	select\n  series_instance_uid, modality, dicom_file_type, count(distinct sop_instance_uid) as num_sops\nfrom\n  file_series natural join file_patient natural join \n  dicom_file natural join file_sop_common\nwhere\n  patient_id = ?\ngroup by series_instance_uid, modality, dicom_file_type\n	{patient_id}	{series_instance_uid,modality,dicom_file_type,num_sops}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Counts in file_series by patient_id\n\n
DoesDoseReferenceNoPlan	select\n  file_id\nfrom\n  rt_dose  natural join file_dose\nwhere\n  rt_dose_referenced_plan_uid is null\n  and file_id = ?	{file_id}	{file_id}	{"Structure Sets",sops,LinkageChecks,used_in_dose_linkage_check}	posda_files	Return a row if file references no plan\n\n
CreateSeenValue	insert into seen_value(value)values(?)	{value}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Seen Value
AreVisibleFilesMarkedAsBadOrUnreviewedInSeriesExperiment	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  visibility,\n  file_id\nfrom \n  dicom_file natural join \n  file_series natural join \n  file_patient natural join\n  ctp_file natural join \n(\n  select file_id, review_status, processing_status\n  from\n    image_equivalence_class_input_image natural join\n    image_equivalence_class join\n    ctp_file using(file_id)\n  where\n    series_instance_uid = ?\n) as foo\n\n	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,visibility,file_id}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
RoundStatsWithCollectionForDateRange	select\n  distinct collection, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, time order by time desc, collection	{interval,from,to}	{collection,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
ListOfQueriesPerformedByUserWithLatestAndCount	select\n  query_name,\n  max(query_start_time) as last_invocation, \n  count(query_invoked_by_dbif_id) as num_invocations,\n  sum(query_end_time - query_start_time) as total_query_time,\n  avg(query_end_time - query_start_time) as avg_query_time\nfrom \n  query_invoked_by_dbif\nwhere invoking_user = ?\ngroup by query_name\norder by last_invocation  desc	{user}	{query_name,last_invocation,num_invocations,total_query_time,avg_query_time}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
AllManifestsBySite	select\n  distinct file_id, import_time, size, root_path || '/' || l.rel_path as path, i.file_name as alt_path\nfrom\n  file_location l join file_storage_root using(file_storage_root_id) \n  join file_import i using (file_id) natural join file join import_event using(import_event_id)\nwhere\n  file_id in (\n    select distinct file_id from ctp_manifest_row where cm_site = ?\n  )	{site}	{file_id,import_time,size,path,alt_path}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
InsertAdverseFileEvent	insert into adverse_file_event(\n  file_id, event_description, when_occured\n) values (?, ?, now())\n	{file_id,event_description}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert adverse_file_event row\nFor use in scripts\nNot really intended for interactive use\n
SetLoadPathByImportEventIdAndFileId	update file_import set file_name = ? where file_id = ? and import_event_id = ?	{file_name,file_id,import_event_id}	{}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
GetPosdaSopCountByPatientId	select\n  distinct patient_id,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  patient_id = ? \n  and visibility is null\ngroup by patient_id	{patient_id}	{patient_id,num_sops}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
GetNonDicomFileIdTypeAndPathByCollectionSite	select\n  file_id, non_dicom_file.file_type as file_type, file_sub_type,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location natural join non_dicom_file\nwhere\n  collection = ? and site = ?\n  and visibility is null	{collection,site}	{file_id,file_type,file_sub_type,path}	{NotInteractive,non_dicom_phi}	posda_files	Create a dciodvfy_scan_instance row
DupSopsWithConflictingPixels	select distinct sop_instance_uid, count\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1	{}	{sop_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
WhereFileSitsExt	select distinct\n  project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || file_location.rel_path as path,\n  date_trunc('day',  min(import_time)) as earliest_import_day,\n  date_trunc('day', max(import_time)) as latest_import_day\nfrom\n  dicom_file natural join\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  file_import natural join\n  import_event \n  natural left join ctp_file\n  join file_location using(file_id)\n  natural join file_storage_root\nwhere file_id = ?\ngroup by \n  project_name, site_name, visibility,\n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid, sop_class_uid, modality, dicom_file_type, path	{file_id}	{collection,site,visibility,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,path,earliest_import_day,latest_import_day}	{posda_files,sops,BySopInstance,by_file}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
SeriesEquipmentByValueSignature	select\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\norder by value, element_signature, vr\n	{scan_id,value,tag_signature}	{series_instance_uid,value,vr,element_signature,equipment_signature}	{tag_usage}	posda_phi	List of series, values, vr seen in scan with equipment signature\n
RowsInDicomFileWithNoPixelInfoRecent	select \n  file_id, root_path || '/' || rel_path as path\nfrom dicom_file natural join file_location natural join file_storage_root\nwhere has_pixel_data is null \norder by file_id desc limit ?	{num_rows}	{file_id,path}	{adding_pixels_to_dicom_file}	posda_files	List of files (id, path) which are dicom_files with undefined pixel info
VisibleFilesByCollectionSitePatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and\n  visibility is null\norder by collection, site, patient_id\n\n	{collection,site,patient_id}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
CountRowsInDicomFileWithUnpopulatedPixelInfo	select \n count(*) from dicom_file where has_pixel_data is null	{}	{count}	{adding_pixels_to_dicom_file}	posda_files	count rows in dicom_file with unpopulated pixel info
RoundCountsByCollection2DateRange	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end - round_start as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and round_start > ? and round_end < ?\norder by round_id, collection	{collection,from,to}	{round_id,collection,num_dups,round_created,round_start,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
CtWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'CT Image Storage' and \n  visibility is null and\n  modality != 'CT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
ImportEventsWithTypeAndPatientId	select\n  distinct import_event_id, import_time,  import_type, count(distinct file_id) as num_files\nfrom\n  import_event natural join file_import natural join file_patient\nwhere\n  import_type = 'multi file import' and \n  patient_id like ?\ngroup by import_event_id, import_time, import_type	{patient_id_like}	{import_event_id,import_time,import_type,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
CreateBackgroundSubprocessParam	insert into background_subprocess_params(\n  background_subprocess_id,\n  param_index,\n  param_value\n) values (\n  ?, ?, ?\n)	{background_subprocess_id,param_index,param_value}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess_params table\n\nUsed by background subprocess
ActivityStuffMoreWithEmailByUserDateRange	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere invoking_user = ? and background_subprocess_report.name = 'Email'\n  and when_script_started >= ? and when_script_ended <=?\norder by subprocess_invocation_id desc\n	{user,from,to}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
ShowFilesHiddenByCollectionSite	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  reason_for as reason,\n  prior_visibility as before,\n  new_visibility as after,\n  user_name as user,\n  count(distinct file_id) as num_files,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest\nfrom \n  file_visibility_change natural join\n  file_patient natural join\n  ctp_file\nwhere\n  project_name = ? and site_name = ?\ngroup by\n   collection, site, \n   patient_id,\n   reason, before, after, user_name\norder by\n  earliest, patient_id	{collection,site}	{collection,site,patient_id,reason,before,after,user,num_files,earliest,latest}	{old_hidden}	posda_files	Show Files Hidden By User Date Range
InsertFileLocation	insert into file_location(\n  file_id, file_storage_root_id, rel_path\n) values ( ?, ?, ?)	{file_id,file_storage_root_id,rel_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
GetDciodvfyWarningQuestionable	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'QuestionableValue'\n  and warning_reason = ?\n  and warning_tag = ?\n  and warning_index = ?\n 	{warning_reason,warning_tag,warning_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
VisibleColSiteWithCtpLikeSite	select\n  distinct project_name as collection, site_name as site, count(*) as num_files\nfrom ctp_file\nwhere visibility is null and project_name like ?\ngroup by collection, site order by collection	{pattern}	{collection,site,num_files}	{adding_ctp,find_patients,series_selection,ctp_col_site,select_for_phi}	posda_files	Get List of visible patients with CTP data
WhereSeriesSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
InsertFileCopyFromPublicRow	insert into file_copy_from_public(\n  copy_from_public_id, sop_instance_uid, replace_file_id, copy_file_path\n) values (\n  ?, ?, ?, ?\n)	{copy_from_public_id,sop_instance_uid,replace_file_id,copy_file_path}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
GetPatientMappingByCollection	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  '<' || diagnosis_date || '>' as diagnosis_date,\n  '<' || baseline_date || '>' as baseline_date,\n  '<' || date_trunc('year', diagnosis_date) || '>' as year_of_diagnosis,\n  baseline_date - diagnosis_date as computed_shift\nfrom\n  patient_mapping\nwhere collection_name = ?\n  	{collection_name}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,year_of_diagnosis,computed_shift}	{adding_ctp,for_scripting,patient_mapping,"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Retrieve entries from patient_mapping table
CtSeriesWithCtImageInfoByCollection	select\n  distinct series_instance_uid, count(distinct file_id) as num_files\nfrom file_series natural join file_ct_image natural join ctp_file\nwhere kvp is not null and visibility is null and project_name = ? group by series_instance_uid	{collection}	{series_instance_uid,num_files}	{populate_posda_files,bills_test,ct_image_consistency}	posda_files	Get CT Series with CT Image Info by collection\n\n
FromDigestToDigestFromDicomEditCompare	select \n  from_file_digest, to_file_digest\nfrom\n  dicom_edit_compare\nwhere\n  subprocess_invocation_id = ?	{subprocess_invocation_id}	{from_file_digest,to_file_digest}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
MsrkEquivalenceClassForRetry	update image_equivalence_class set\n  processing_status = 'ReadyToProcess',\n  review_status = null\nwhere image_equivalence_class_id = ?	{image_equivalence_class_id}	{}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetSopModalityPath	select \n  sop_instance_uid, modality,\n  root_path || '/' || rel_path as path\nfrom\n  file_series natural join file_sop_common natural join file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid,modality,path}	{bills_test,comparing_posda_to_public}	posda_files	get sop_instance, modality, and path to file by file_id
BackgroundProcessStatsNew	select\n  distinct operation_name, max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  count(distinct invoking_user) as num_invokers,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null\ngroup by operation_name\norder by last desc, times_invoked desc	{}	{operation_name,longest,shortest,avg,times_invoked,num_invokers,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
InsCTQP	insert into clinical_trial_qualified_patient_id(\n  collection, site, patient_id, qualified\n) values (\n  ?, ?, ?, ?\n)\n	{collection,site,patient_id,qualified}	{}	{activity_timepoint_support}	posda_files	Create An Activity Timepoint\n\n
InsertIntoDicomEditCompare	insert into dicom_edit_compare(\n  edit_command_file_id,\n  from_file_digest,\n  to_file_digest,\n  short_report_file_id,\n  long_report_file_id\n) values ( ?, ?, ?, ?, ?)	{edit_command_file_id,from_file_digest,to_file_digest,short_report_file_id,long_report_file_id}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
SeriesConsistency	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments,\n  count(*)\nfrom\n  file_series natural join ctp_file\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,modality,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{by_series,consistency,series_consistency}	posda_files	Check a Series for Consistency\n
CtImageDataConsistencyAcrossSeries	select \n  distinct kvp, scan_options, data_collection_diameter, reconstruction_diameter,\n  dist_source_to_detect, dist_source_to_pat,gantry_tilt, table_height,\n  rotation_dir, exposure_time, exposure, filter_type, generator_power, convolution_kernal,\n  count(distinct file_id) as num_files\nfrom file_ct_image where file_id in (\n  select file_id from file_series natural join ctp_file where series_instance_uid = ?\n)\ngroup by\n  kvp, scan_options, data_collection_diameter, reconstruction_diameter,\n  dist_source_to_detect, dist_source_to_pat,gantry_tilt, table_height,\n  rotation_dir, exposure_time, exposure, filter_type, generator_power, convolution_kernal\n	{series_instance_uid}	{kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,table_height,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,num_files}	{populate_posda_files,ct_image_consistency}	posda_files	Get CT Series with CT Image Info by collection\n\n
ActivityStuffMoreWithEmailForAll	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere background_subprocess_report.name = 'Email'\norder by subprocess_invocation_id desc\n	{}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
PosdaImagesByCollectionSite	select distinct\n  patient_id as "PID",\n  modality as "Modality",\n  sop_instance_uid as "SopInstance",\n  study_date as "StudyDate",\n  study_description as "StudyDescription",\n  series_description as "SeriesDescription",\n  study_instance_uid as "StudyInstanceUID",\n  series_instance_uid as "SeriesInstanceUID",\n  manufacturer as "Mfr",\n  manuf_model_name as "Model",\n  software_versions\nfrom\n  file_patient natural join file_series natural join\n  file_sop_common natural join file_study natural join\n  file_equipment natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n	{collection,site}	{PID,Modality,SopInstance,StudyDate,StudyDescription,SeriesDescription,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
SeriesVisualReviewResultsByLikeCollectionSiteSummary	select \n  distinct\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name like  ? and\n  visibility is null\ngroup by\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\n	{project_name}	{dicom_file_type,modality,review_status,processing_status,num_series,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetDciodvfyErrorId	select currval('dciodvfy_error_dciodvfy_error_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a id of newly created dciodvfy_error row
GetSsByCollection	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n select distinct file_id from file_structure_set\n)\nand project_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDciodvfyErrorBadVm	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'BadValueMultiplicity'\n  and error_tag = ?\n  and error_value = ?\n  and error_index = ?\n  and error_module = ?\n	{error_tag,error_value,error_index,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
AreVisibleFilesMarkedAsBadOrUnreviewedInSeriesTest	select \n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom (\n  select \n    distinct project_name as collection,\n    site_name as site,\n    patient_id,\n    series_instance_uid,\n    dicom_file_type,\n    modality,\n    review_status,\n    processing_status,\n    visibility,\n    file_id\n  from \n    dicom_file natural join \n    file_series natural join \n    file_patient natural join\n    ctp_file natural join \n  (\n    select file_id, review_status, processing_status\n    from\n      image_equivalence_class_input_image natural join\n      image_equivalence_class join\n      ctp_file using(file_id)\n    where\n      series_instance_uid = ?\n  ) as foo\n) as foo\nwhere\n  visibility is null \ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\n	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,visibility,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
DeleteLastTagFromQuery	update queries \n  set tags = tags[1:(array_upper(tags,1) -1)]\nwhere name = ?	{name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
GetDciodvfyUnitScanWarningId	select currval('dciodvfy_unit_scan_warning_dciodvfy_unit_scan_warning_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
ShowAllVisibilityChangesBySeriesInstance	select\n  distinct\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for,\n  count (distinct file_id) as num_files\nfrom\n   file_visibility_change \nwhere file_id in (\n  select distinct file_id \n  from file_series\n  where series_instance_uid = ?\n)\ngroup by user_name, time_of_change,\n  prior_visibility, new_visibility, reason_for\norder by time_of_change	{series_instance_uid}	{user_name,time_of_change,prior_visibility,new_visibility,reason_for,num_files}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
StudySeriesForFile	select study_instance_uid, series_instance_uid from file_series natural join file_study where file_id = ?	{file_id}	{study_instance_uid,series_instance_uid}	{activity_timepoint_support}	posda_files	Create An Activity Timepoint\n\n
RoundStatsForDateRange	select\n  date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request\nwhere time_received > ? and time_received < ?\ngroup by time order by time desc	{interval,from,to}	{time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
ValuesWithVrTagAndCount	select\n    distinct vr, value, element_signature, private_disposition, count(*)  as num_files\nfrom\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\nwhere\n    scan_event_id = ?\ngroup by value, element_signature, vr, private_disposition\n	{scan_id}	{vr,value,element_signature,private_disposition,num_files}	{tag_usage,PrivateTagKb}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetSimpleValuesByEleVr	select\n  distinct value\nfrom\n  element_seen\n  join element_value_occurance using(element_seen_id)\n  join value_seen using(value_seen_id)\nwhere element_sig_pattern = ? and vr = ?\n	{tag,vr}	{value}	{tag_values}	posda_phi_simple	Find Values for a given tag, vr in posda_phi_simple\n
GetSeriesWithImageByCollectionSitePatient	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and \n  site_name = ? and \n  patient_id = ? and\n  visibility is null\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,patient_id}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
TagsInMultipleTagFilters	select distinct tag, count(*) as num_locations\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\ngroup by tag\norder by num_locations desc	{}	{tag,num_locations}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
SeriesInHierarchyBySeries	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
RTDOSEWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Dose Storage' and \n  visibility is null and\n  modality != 'RTDOSE'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
ImportEventsWithMultiFileLikePatientId	select\n  distinct import_event_id, import_time,  import_type, patient_id, count(distinct file_id) as num_files\nfrom\n  import_event natural join file_import natural join file_patient\nwhere\n  import_type = 'multi file import' and \n  import_time > ? and import_time < ?\ngroup by import_event_id, import_time, import_type, patient_id	{from,to}	{import_event_id,import_time,import_type,patient_id,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
SimpleCountQuery	select\n  distinct\n    patient_id, dicom_file_type, modality,\n    study_instance_uid, series_instance_uid,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\nwhere\n  project_name = ?  and site_name = ? and visibility is null\ngroup by\n  patient_id, dicom_file_type, modality,\n  study_instance_uid, series_instance_uid\norder by\n  patient_id, study_instance_uid, series_instance_uid,\n  modality\n	{collection,site}	{patient_id,dicom_file_type,modality,study_instance_uid,series_instance_uid,num_sops,num_files}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
PatientsWithEditedFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common\nwhere file_id in (\n  select \n    distinct file_id \n  from \n    file f natural join dicom_edit_compare dec\n  where\n    f.digest = dec.to_file_digest and subprocess_invocation_id in (\n      select distinct subprocess_invocation_id\n      from dicom_edit_compare_disposition\n      where current_disposition like 'Import Complete%'\n    )\n)\ngroup by collection, site, patient_id\norder by collection, site, patient_id	{}	{collection,site,patient_id,num_sops,num_files}	{adding_ctp,for_scripting,patient_queries}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
GetSlopeIntercept	select\n  slope, intercept, si_units\nfrom\n  file_slope_intercept natural join slope_intercept\nwhere\n  file_id = ?\n	{file_id}	{slope,intercept,si_units}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
CreateDciodvfyUnitScanWarning	insert into dciodvfy_unit_scan_warning(\n  dciodvfy_scan_instance_id,\n  dciodvfy_unit_scan_id,\n  dciodvfy_warning_id\n)values (?, ?, ?)	{" dicodvfy_scan_instance_id",dciodvfy_unit_scan_id,dciodvfy_warning_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan_error row
WhatHasComeInRecentlyByCollectionLikeAndFileInPosdaCount	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files, count(distinct posda_file_id) as num_files_in_posda,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\nand collection like ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to,collection_like}	{collection,site,time,number_of_files,num_files_in_posda,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
NumEquipSigsForPrivateTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
GetElementSignatureId	select currval('element_signature_element_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan,ElementDisposition}	posda_phi	Get current value of ElementSignatureId Sequence\n
InsertFilePosdaReturnID	insert into file( digest, size, processing_priority, ready_to_process) values ( ?, ?, 1, false) on conflict  do nothing returning file_id;	{digest,size}	{file_id}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Insert a file without locking the table
TagsSeenSimplePrivateWithCount	select \n  distinct element_sig_pattern,\n  vr,\n  private_disposition, tag_name,\n  count(distinct value) as num_values\nfrom\n  element_seen natural left join\n  element_value_occurance\n  natural left join value_seen\nwhere\n  is_private \ngroup by element_sig_pattern, vr, private_disposition, tag_name\norder by element_sig_pattern;	{}	{element_sig_pattern,vr,private_disposition,tag_name,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
GetImageGeoBySop1	select\n  iop, ipp, for_uid, series_instance_uid\nfrom\n  image_geometry natural join file_image_geometry natural join file_series\nwhere\n  file_id in \n  (\n    select \n      file_id \n    from\n      file_sop_common natural join ctp_file\n    where\n      sop_instance_uid = ? and visibility is null\n  )	{sop_instance_uid}	{iop,ipp,for_uid,series_instance_uid}	{LinkageChecks,BySopInstance}	posda_files	Get Geometric Information by Sop Instance UID from posda
PixDupsByCollecton	select \n  distinct series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_series \nwhere \n  project_name = ? and visibility is null\n  and file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) \ngroup by series_instance_uid\norder by count desc;\n	{collection}	{series_instance_uid,count}	{pix_data_dups}	posda_files	Counts of duplicate pixel data in series by Collection\n
PatientStudySeriesHierarchyByCollectionSiteWithCounts	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,num_files}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
DismissInboxItem	\nupdate user_inbox_content\nset date_dismissed = now()\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{}	{}	posda_queries	Set the date_dismissed value on an Inbox item
ListOfAvailableQueriesByNameLike	select schema, name, description, tags from (\n  select\n    schema, name, description,\n    array_to_string(tags, ',') as tags\n  from queries\n) as foo\nwhere name like ?\norder by name	{name_like}	{schema,name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
FilesInHierarchyByPatient	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  study_date,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_patient natural join ctp_file\n  where\n    patient_id = ? and visibility is null\n)\ngroup by collection, site, patient_id, \n  study_instance_uid, series_instance_uid, study_date\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{patient_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,study_date,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
LockErrors	lock table dciodvfy_error	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
SummaryOfSeriesInUnhiddenBadEquivalenceClasses	select distinct project_name as collection, site_name as site, patient_id, series_instance_uid, modality, dicom_file_type, count(distinct file_id) as num_files from\nctp_file natural join file_patient natural join file_series natural join dicom_file where file_id in (\nselect distinct file_id from file_sop_common natural join ctp_file where visibility is null and sop_instance_uid in (\nselect sop_instance_uid from file_sop_common where file_id in (\nselect distinct file_id from image_equivalence_class natural join image_equivalence_class_input_image where visual_review_instance_id = ? and review_status = 'Bad' ))) group by collection, site, patient_id, series_instance_uid, modality, dicom_file_type	{visual_review_instance_id}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_status}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
AllManifestsByCollectionLike	select\n  distinct file_id, import_time, size, root_path || '/' || l.rel_path as path, i.file_name as alt_path\nfrom\n  file_location l join file_storage_root using(file_storage_root_id) \n  join file_import i using (file_id) natural join file join import_event using(import_event_id)\nwhere\n  file_id in (\n    select distinct file_id from ctp_manifest_row where cm_collection like ?\n  )	{collection_like}	{file_id,import_time,size,path,alt_path}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
ReviewEditsByTimeSpan	select\n  distinct project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere\n  time_of_change > ? and time_of_change < ?\ngroup by\n  project_name,\n  site_name,\n  series_instance_uid,\n  new_visibility,\n  reason_for	{from,to}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series over a time range
FirstFileInSeriesPosda	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo)\nlimit 1\n	{series_instance_uid}	{path}	{by_series,UsedInPhiSeriesScan}	posda_files	First files in series in Posda\n
PixelTypesWithSlopeCT	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\n  natural join file_slope_intercept natural join slope_intercept\nwhere\n  modality = 'CT'\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\norder by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,modality,slope,intercept,count}	{}	posda_files	Get distinct pixel types\n
SelectPtInfoSummary	select \n  distinct pti_radiopharmaceutical as radiopharmaceutical, \n  pti_radionuclide_total_dose as total_dose,\n  pti_radionuclide_half_life as half_life,\n  pti_radionuclide_positron_fraction as positron_fraction, \n  pti_fov_shape as fov_shape,\n  pti_fov_dimensions as fov_dim,\n  pti_collimator_type as coll_type,\n  pti_reconstruction_diameter as recon_diam, \n  count(*) as num_files\nfrom file_pt_image \ngroup by \n  radiopharmaceutical,\n  total_dose,\n  half_life,\n  positron_fraction,\n  fov_shape,\n  fov_dim,\n  coll_type,\n  recon_diam	{}	{radiopharmaceutical,total_dose,half_life,positron_fraction,fov_shape,fov_dim,coll_type,recon_diam,num_files}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
PixelInfoByFileId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  f.file_id = ? and pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
DupSopsByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, sop_instance_uid\n\n	{collection,site,from,to}	{collection,site,subj_id,sop_instance_uid,num_files}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
PublicSeriesByCollectionMetadata	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions,\n   count( i.sop_instance_uid) as Images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  tdp.project = ? \ngroup by PID, StudyDate, Modality\n	{collection}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions,Images}	{public}	public	List of all Series By Collection, Site on Public with metadata\n
ActivityStuffMoreByUserByDateRange	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere invoking_user = ? and when_script_started >= ? and when_script_ended <= ?\norder by subprocess_invocation_id desc\n	{user,from,to}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
SeriesSopsForCollectionSiteReport	select \n  distinct project_name as collection, site_name as site, count(distinct patient_id) as num_subjects,\n  count(distinct series_instance_uid) as num_series, count(distinct sop_instance_uid) as num_images\nfrom\n  ctp_file natural join file_patient natural join file_series natural join file_sop_common natural join file_image\nwhere visibility is null\ngroup by collection, site\norder by num_images desc	{}	{collection,site,num_subjects,num_series,num_images}	{AllCollections,q_stats}	posda_files	Get a list of collections and sites\n
ProjectCompletion	select\n  ((now() - ?) / ?) * (cast(? as float) - cast(? as float)) + now() as projected_completion	{start_time,num_done_1,num_to_do,num_done_2}	{projected_completion}	{bills_test}	posda_phi_simple	Status of PHI scans\n
DciodvfyErrorsBySeriesAndScanInstance	select\n  dciodvfy_error_id,\n  error_type,\n  error_tag,\n  error_value,\n  error_subtype,\n  error_module,\n  error_reason,\n  error_index,\n  error_text\nfrom dciodvfy_error \nwhere  dciodvfy_error_id in (\n  select distinct dciodvfy_error_id\n  from (\n    select\n      distinct unit_uid, dciodvfy_error_id\n    from\n      dciodvfy_unit_scan\n      natural join dciodvfy_unit_scan_error\n    where\n      dciodvfy_scan_instance_id = ? and unit_uid =?\n  )\n as foo\n)	{dciodvfy_scan_instance_id,series_instance_uid}	{dciodvfy_error_id,error_type,error_tag,error_value,error_subtype,error_module,error_reason,error_index,error_text}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
SsSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  roi natural join file_structure_set join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_structure_set \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
RoundCountsByCollection	select \n  round_id, num_requests\nfrom round natural join round_counts\nwhere collection = ?	{collection}	{round_id,num_requests}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
DismissInboxContenIItem	update user_inbox_content\nset date_dismissed = now(),\ncurrent_status = 'dismissed'\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{}	{}	posda_queries	Set the date_dismissed value on an Inbox item
RecordElementDispositionChange	insert into element_signature_change(\n  element_signature_id, when_sig_changed,\n  who_changed_sig, why_sig_changed,\n  old_disposition, new_disposition,\n  old_name_chain, new_name_chain\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?,\n  ?, ?\n)\n	{element_signature_id,who_changed_sig,why_sig_changed,old_disposition,new_disposition,old_name_chain,new_name_chain}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Record a change to Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
FindingImageProblemWithSeries	select\n  distinct dicom_file_type, project_name,  \n  patient_id, series_instance_uid, min(import_time), max(import_time), count(distinct file_id) \nfrom\n  ctp_file natural join dicom_file natural join file_series natural join\n  file_patient natural join file_import natural join \n  import_event \nwhere file_id in (\n  select file_id \n  from (\n    select file_id, image_id \n    from pixel_location left join image using(unique_pixel_data_id)\n    where file_id in (\n      select\n         distinct file_id from file_import natural join import_event natural join dicom_file\n      where import_time > '2018-09-17'\n    )\n  ) as foo where image_id is null\n) and visibility is null\n group by dicom_file_type, project_name, patient_id, series_instance_uid\norder by patient_id	{}	{dicom_file_type,project_name,patient_id,series_instance_uid,min,max,count}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
MarkPrivateTags	update element_seen set\n  is_private = true\nwhere\n  is_private is null and \n  element_sig_pattern like '%"%'\n	{}	{id,element_sig_pattern,vr,tag_name,disp}	{tag_usage,simple_phi,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
GetPatientMappingByPatientId	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  uid_root,\n  diagnosis_date,\n  baseline_date,\n  date_shift,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom\n  patient_mapping\nwhere\n  to_patient_id = ?\n  	{patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,uid_root,diagnosis_date,baseline_date,date_shift,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
SeeIfDigestIsAlreadyKnownDistinguished	select count(*) from distinguished_pixel_digests where pixel_digest = ?	{pixel_digest}	{count}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
LockWarnings	lock table dciodvfy_warning	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
CreateEquivalenceInputClass	insert into image_equivalence_class_input_image(\n  image_equivalence_class_id,  file_id\n) values (\n  ?, ?\n)\n	{image_equivlence_class_id,file_id}	{}	{consistency,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
SeriesWithDupSopsByCollectionSiteNew	select\n  distinct collection, site, subj_id, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id,  series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,series_instance_uid,num_sops,num_files}	{"ACRIN-FMISO-Brain Duplicate Elimination",dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesInStudyForEdit	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_study\n  natural join file_sop_common\nwhere\n  study_instance_uid = ? and visibility is null\n	{study_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
AddHocQueryForHeadNeckPETCT	select\n  distinct patient_id, study_instance_uid as study_uid, series_instance_uid as series_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_study natural join file_series natural join ctp_file\nwhere\n  patient_id in\n   ('HN-CHUM-050', 'HN-CHUM-052', 'HN-CHUM-054', 'HN-CHUM-056', 'HN-CHUM-030', 'HN-CHUM-034')\n  and visibility is null\ngroup by patient_id, study_uid, series_uid	{}	{patient_id,study_uid,series_uid,num_files}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
GetDciodvfyScanInstanceId	select currval('dciodvfy_scan_instance_dciodvfy_scan_instance_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
GetSimpleValueSeen	select\n  value_seen_id as id\nfrom \n  value_seen\nwhere\n  value = ?	{value}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
SeriesEquivalenceClassNoByProcessingStatus	select \n  distinct series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image\nwhere\n  processing_status = ?\ngroup by series_instance_uid, equivalence_class_number\norder by series_instance_uid, equivalence_class_number	{processing_status}	{series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
CountsByCollectionDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetFilesWithNoSeriesInfoByCollection	select\n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location\nwhere file_id in (\nselect \n  distinct file_id\nfrom \n ctp_file c\nwhere\n  project_name = ? and \n  visibility is null and \n  not exists (\n    select\n      file_id \n    from\n      file_series s \n    where\n      s.file_id = c.file_id\n  )\n)	{collection}	{file_id,path}	{reimport_queries,dicom_file_type}	posda_files	Get file path from id
SeriesFileByCollectionWithNoEquivalenceClass	select distinct\n  series_instance_uid\nfrom\n  file_series s\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\n  and not exists (\n    select \n      series_instance_uid\n   from\n      image_equivalence_class e\n   where\n      e.series_instance_uid = s.series_instance_uid\n )	{collection}	{series_instance_uid}	{equivalence_classes}	posda_files	Construct list of series in a collection where no image_equivalence_class exists
CreateScanEvent	insert into scan_event(\n  scan_started, scan_status, scan_description,\n  num_series_to_scan, num_series_scanned\n) values (\n  now(), 'In Process', ?,\n  ?, 0\n)\n\n	{description,num_series_to_scan}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
GetScanInstanceById	select\n  phi_scan_instance_id,\n  start_time,\n  end_time,\n  description,\n  num_series,\n  num_series_scanned,\n  file_query\nfrom \n  phi_scan_instance\nwhere phi_scan_instance_id = ?	{phi_scan_instance_id}	{phi_scan_instance_id,start_time,end_time,description,num_series,num_series_scanned,file_query}	{adding_ctp,for_scripting,scan_status}	posda_phi_simple	Get a query_scan_instance by instance_id
GetBasicImageGeometry	select\n  iop, ipp\nfrom\n  file_series\n  join file_image using (file_id)\n  join image_geometry using (image_id)\nwhere \n  series_instance_uid = ?	{series_instance_uid}	{iop,ipp}	{NotInteractive,used_in_import_edited_files,used_in_check_circular_view}	posda_files	Get file_id, and current visibility by digest\nFor use in scripts\nNot really intended for interactive use\n
IntakeSeriesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Series By Collection, Site on Intake\n
ListOfPrivateElementsValues	select\n  distinct value\nfrom\n  scan_element natural join seen_value\nwhere\n  element_signature_id = ?\norder by value\n	{element_signature_id}	{value}	{ElementDisposition}	posda_phi	Get List of Values for Private Element based on element_signature_id
IntakePatientStudySeriesHierarchyByCollectionSite	select\n  p.patient_id as patient_id,\n  t.study_instance_uid as study_instance_uid,\n  s.series_instance_uid as series_instance_uid\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  s.study_pk_id = t.study_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{intake,Hierarchy}	intake	Patient, study, series hierarchy by Collection, Site on Intake\n
PatientStudySeriesHierarchyByCollection	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy
VisibilityChangeEventsByCollectionWithModality	select \n  distinct project_name as collection,\n  site_name as site,\n  modality,\n  date_trunc('day', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, modality, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,modality,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
ImageFrameOfReferenceBySeriesPublic	select\n  distinct frame_of_reference_uid as for_uid,\n  count(distinct sop_instance_uid) as num_files\nfrom\n  general_image i, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and s.series_instance_uid = ?\ngroup by frame_of_reference_uid;	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	public	Get list of plan which reference unknown SOPs\n\n
MakeBacklogReadyForProcessing	update control_status\n  set status = 'waiting to go inservice'\n	{}	{}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Mark Backlog as ready for Processor
GetStudyByFileId	select file_id from file_study where file_id = ?	{file_id}	{file_id}	{bills_test,posda_db_populate}	posda_files	Add a filter to a tab
SummaryOfFromFiles	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  study_date,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  visibility,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  ctp_file natural join\n  file_patient natural join\n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  dicom_file\nwhere file_id in (\n  select\n    file_id \n  from\n    file f, dicom_edit_compare dec \n  where\n    f.digest = dec.from_file_digest and dec.subprocess_invocation_id = ?\n  )\ngroup by collection, site, patient_id, study_date, study_instance_uid, series_instance_uid, \n  dicom_file_type, modality, visibility\norder by collection, site, patient_id, study_date, study_instance_uid, modality	{subprocess_invocation_id}	{collection,site,patient_id,study_date,study_instance_uid,series_instance_uid,dicom_file_type,modality,visibility,num_sops,num_files}	{adding_ctp,for_scripting}	posda_files	Get a list of to files from the dicom_edit_compare table for a particular edit instance, with file_id and visibility\n\nNB: Normally there should be no file_id (i.e. file has not been imported)
StartTransactionPosda	begin\n	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Start a transaction in Posda files
RawFilesFromDate	select \n  file_type, max(file_id) as max_file_id, min(file_id) as min_file_id, \n  count(*) as num_files, max(size) as largest, min(size) as smallest,\n  sum(size) as total_size, avg(size) as avg_size\nfrom file\nwhere file_id in (\n  select\n    file_id from (\n      select\n        distinct file_id, date_trunc(?, min(import_time)) as load_week\n      from\n        file_import natural join import_event\n      group by file_id\n  ) as foo\n  where\n    load_week >=? and load_week <  (now() + interval '24:00:00')\n) \ngroup by file_type	{date_type,from}	{file_type,max_file_id,min_file_id,num_files,largest,smallest,total_size,avg_size}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
AllProcessedManifestsByCollectionLikeWithDate	select\n  distinct file_id, import_time as date, cm_collection, cm_site,  sum(cm_num_files) as total_files\nfrom\n  ctp_manifest_row natural join file_import natural join import_event\nwhere\n  cm_collection like ?\ngroup by file_id, date, cm_collection, cm_site	{collection_like}	{file_id,date,cm_collection,cm_site,total_files}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
GetCollectionCodes	select\n collection_name, collection_code\nfrom\n  collection_codes\n  	{}	{collection_name,collection_code}	{adding_ctp,for_scripting}	posda_files	Retrieve entries from patient_mapping table
GetVisibleFilesBySeriesAndVisualReviewId	select\n  file_id\nfrom ctp_file\nwhere visibility is null and file_id in (\n  select\n    file_id\n  from\n    image_equivalence_class natural join image_equivalence_class_input_image\n  where\n    visual_review_instance_id = ? and series_instance_uid = ?\n)	{visual_review_instance_id,series_instance_uid}	{file_id}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
SimplePhiReportAllRelevantPrivateOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na')\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,disp,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
AreVisibleFilesMarkedAsBadOrUnreviewedInSeries	select \n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom (\n  select \n    distinct project_name as collection,\n    site_name as site,\n    patient_id,\n    series_instance_uid,\n    dicom_file_type,\n    modality,\n    review_status,\n    processing_status,\n    visibility,\n    file_id\n  from \n    dicom_file natural join \n    file_series natural join \n    file_patient natural join\n    ctp_file natural join \n  (\n    select file_id, review_status, processing_status\n    from\n      image_equivalence_class_input_image natural join\n      image_equivalence_class join\n      ctp_file using(file_id)\n    where\n      series_instance_uid = ?\n  ) as foo\n) as foo\nwhere\n  visibility is null and \n  review_status != 'Good' and\n  review_status != 'PassThrough'\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\n	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,visibility,file_id}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
GetPublicSopsForCompare	select\n  i.patient_id,\n  i.study_instance_uid,\n  s.series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  s.modality,\n  i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and tdp.project = ?\n  and i.general_series_pk_id = s.general_series_pk_id	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_uri}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
LockFilePosda	LOCK file in ACCESS EXCLUSIVE mode	{}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
AllPixelInfoByModality	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_series \n  where visibility is null and modality = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
GetActivityInfo	select\n  activity_id, brief_description, when_created, who_created, when_closed\nfrom \n  activity\nwhere\n  activity_id = ?\n\n	{activity_id}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
InsertNewRootPath	insert into file_storage_root  (root_path, current, storage_class) values ( ? , true, 'imported from File List Importer') returning file_storage_root_id 	{root_path}	{file_storage_root_id}	{Universal}	posda_files	Checks for the local environment's ID for a certain root path. Used by python_import_csv_filelist.py to insert file info into local development environments for files physically stored and referenced in internal posda production. \n\n(import list will have the root path for a file in prod, this will find the local id for that path)
GetSopOfPlanReferenceByDose	select\n  distinct rt_dose_referenced_plan_uid as sop_instance_uid,\n  rt_dose_referenced_plan_class as sop_class_uid\nfrom\n  rt_dose natural join file_dose\nwhere\n  file_id = ?	{file_id}	{sop_instance_uid,sop_class_uid}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Get Plan Reference Info for RTDOSE by file_id\n
AgesAndStudyDates	select\n  distinct patient_id, study_date, patient_age, count(distinct series_instance_uid) as num_series\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file\nwhere\n  project_name = ? and visibility is null\ngroup by\n  patient_id, study_date, patient_age order by patient_id	{collection}	{patient_id,study_date,patient_age,num_series}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
HowManyFilesToCopyInCopyFromPublic	select\n  count(*) as num_to_copy\nfrom file_copy_from_public\nwhere\n  copy_from_public_id = ? and\n  inserted_file_id is null	{copy_from_public_id}	{num_to_copy}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
SubjectCountsDateRangeSummaryByCollectionSiteSubject	select \n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  study_date, \n  min(import_time) as from,\n  max(import_time) as to,\n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom \n  ctp_file natural join \n  file_sop_common natural join\n  file_study natural join\n  file_series natural join\n  file_patient natural join \n  file_import natural join \n  import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null and patient_id = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, study_date\norder by patient_id, study_date	{collection,site,patient_id}	{patient_id,study_instance_uid,series_instance_uid,study_date,from,to,num_files,num_sops}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
DuplicateDownloadsBySubject	select count(*) from (\n  select\n    distinct file_id, count(*)\n  from file_import\n  where file_id in (\n    select\n      distinct file_id\n    from \n      file_patient natural join ctp_file\n    where\n      patient_id = ? and project_name = ? \n      and site_name = ? and visibility is null\n  )\n  group by file_id\n) as foo\nwhere count > 1\n	{subject_id,project_name,site_name}	{count}	{by_subject,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
GetNumPixDups	select distinct num_pix_dups, count(*) as num_pix_digs\nfrom (\nselect\n  distinct pixel_digest, count(*) as num_pix_dups\nfrom (\n   select \n       distinct unique_pixel_data_id, pixel_digest, project_name,\n       site_name, patient_id, count(*) \n  from (\n    select\n      distinct unique_pixel_data_id, file_id, project_name,\n      site_name, patient_id, \n      unique_pixel_data.digest as pixel_digest \n    from\n      image join file_image using(image_id)\n      join ctp_file using(file_id)\n      join file_patient fq using(file_id)\n      join unique_pixel_data using(unique_pixel_data_id)\n    where visibility is null\n  ) as foo \n  group by \n    unique_pixel_data_id, project_name, pixel_digest,\n    site_name, patient_id\n) as foo \ngroup by pixel_digest) as foo\ngroup by num_pix_dups\norder by num_pix_digs desc	{}	{num_pix_dups,num_pix_digs}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
SimplePhiReportSelectedVR	select \n  distinct element_sig_pattern as element, vr, value, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element_sig_pattern, vr, value;	{scan_id}	{element,vr,value,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
SendEventsByReason	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
DuplicateDownloadsByCollection	select distinct patient_id, series_instance_uid, count(*)\nfrom file_series natural join file_patient\nwhere file_id in (\n  select file_id from (\n    select\n      distinct file_id, count(*)\n    from file_import\n    where file_id in (\n      select\n        distinct file_id\n      from \n        file_patient natural join ctp_file\n      where\n        project_name = ? \n        and site_name = ? and visibility is null\n    )\n    group by file_id\n  ) as foo\n  where count > 1\n)\ngroup by patient_id, series_instance_uid\norder by patient_id\n	{project_name,site_name}	{series_instance_uid,count}	{by_collection,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
SimplePhiReportAllPrivateOnly	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,disp,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetNonDicomFilesByPatientId	select \n  file_id, non_dicom_file.file_type, file_sub_type, \n  collection, site, subject, visibility, date_last_categorized,\n  size, digest, root_path || '/' || rel_path as path\nfrom\n  non_dicom_file join file using (file_id) natural join file_location natural join file_storage_root\nwhere\n  visibility is null\n  and subject = ?\n	{patient_id}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,size,digest,path}	{radcomp}	posda_files	Add a filter to a tab
AddHocQuery3	select distinct series_instance_uid, body_part_examined, count(distinct file_id) as num_files from file_series where file_id in (\nselect distinct file_id from import_event natural join file_import natural left join ctp_file where import_event_id in (9535631, 9543872, 9535664) and visibility is null) group by series_instance_uid, body_part_examined\n	{}	{series_instance_uid,body_part_examined,num_files}	{meta,test,hello,bills_test,bills_ad_hoc_scripts}	posda_files	Add a filter to a tab
SopNickname	select\n  project_name, site_name, subj_id, sop_nickname, modality,\n  has_modality_conflict\nfrom\n  sop_nickname\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{project_name,site_name,subj_id,sop_nickname,modality,has_modality_conflict}	{}	posda_nicknames	Get a nickname, etc for a particular SOP Instance  uid\n
StudyHierarchyByStudyUIDWithAcessionNoAndNumFiles	select distinct\n  study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  modality,\n  '<' || accession_number || '>' as accession_number,\n  count(distinct sop_instance_uid) as num_files\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_sop_common\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_description,\n  series_instance_uid, series_description, modality,accession_number\norder by accession_number	{study_instance_uid}	{study_instance_uid,study_description,series_instance_uid,series_description,modality,accession_number,num_files}	{by_study,Hierarchy}	posda_files	Show List of Study Descriptions, Series UID, Series Descriptions, and Count of SOPS for a given Study Instance UID
DifferentDupSopsReceivedBetweenDatesByCollection	select * from (\nselect\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n) as foo where num_sops != num_files\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
InsertRoundCollection	insert into round_collection(\n  round_id, collection,\n  num_entered, num_failed,\n  num_dups\n) values (\n  ?, ?,\n  ?, ?,\n  ?\n)\n	{round_id,collection,num_entered,num_failed,num_dups}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_collection
ReportOnStudiesWithSomeMissingStudyDates	select\n  distinct patient_id, study_instance_uid, study_date, study_description, series_instance_uid,series_date,\n  series_description, dicom_file_type, modality, count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_study natural join file_series natural join dicom_file\nwhere file_id in (\n select file_id from file_study natural join activity_timepoint_file \n where activity_timepoint_id = ? and study_instance_uid in (\n    select distinct study_instance_uid from (\n      select distinct study_date, study_instance_uid\n      from ctp_file natural join file_series natural join file_study natural join activity_timepoint_file\n      where activity_timepoint_id = ? and visibility is null\n    ) as foo \n    where study_date is null\n  )\n)\ngroup by\n  patient_id, study_instance_uid, study_date, study_description, series_instance_uid, series_date,\n  series_description, dicom_file_type, modality\norder by patient_id, modality	{activity_timepoint_id,activity_timepoint_id_1}	{patient_id,study_instance_uid,study_date,study_description,series_instance_uid,series_date,series_description,dicom_file_type,modality,num_files}	{Exceptional-Responders_NCI_Oct2018_curation,New_HNSCC_Investigation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
GetPosdaFileCreationRoot	select file_storage_root_id, root_path from file_storage_root where current and storage_class = 'created'	{}	{file_storage_root_id,root_path}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get the file_storage root for newly created files
GetInboxItem	select\n\tcurrent_status,\n\tstatuts_note,\n\tdate_entered,\n\tdate_dismissed,\n\tfile_id\nfrom user_inbox_content\nnatural join background_subprocess_report\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{current_status,status_note,date_entered,date_dismissed,file_id}	{}	posda_queries	Get the details of a single Inbox item.
DistinctVisibleSeriesByCollectionSite	select distinct series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_series natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
FilesInSeriesForApplicationOfPrivateDisposition	select\n  distinct root_path || '/' || rel_path as path, \n  sop_instance_uid, modality\nfrom\n  file_location natural join file_storage_root \n  natural join ctp_file natural join file_series\n  natural join file_sop_common\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition}	posda_files	Get path, sop_instance_uid, and modality for all files in a series\n
GetMaxStudyDate	select\n   max(study_date) as study_date\nfrom \n  file_patient natural join ctp_file natural join file_study\nwhere\n  patient_id = ?	{patient_id}	{study_date}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
FilesInSeriesForApplicationOfPrivateDispositionPublic	select\n  i.dicom_file_uri as path, i.sop_instance_uid, s.modality\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.series_instance_uid = ?	{series_instance_uid}	{path,sop_instance_uid,modality}	{find_files,ApplyDisposition,intake}	public	Get path, sop_instance_uid, and modality for all files in a series\n
PatientByImportEventIdVisibleFiles	select\n  distinct patient_id, count(distinct file_id) as num_files\nfrom file_patient\nwhere file_id in (\n  select distinct file_id\n  from file_import natural join import_event natural left join ctp_file\n  where import_event_id = ? and visibility is null\n) group by patient_id order by patient_id	{import_event_id}	{patient_id,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
GetPublicCopyInfoBySop	select dicom_file_uri, tdp.project, dp_site_name as site_name, dp_site_id as site_id\nfrom general_image i, trial_data_provenance tdp \nwhere tdp.trial_dp_pk_id = i.trial_dp_pk_id and sop_instance_uid = ?	{sop_instance_uid}	{dicom_file_uri,project,site_name,site_id}	{bills_test,copy_from_public}	public	Add a filter to a tab
SeriesWithMoreThanNEquivalenceClasses	select series_instance_uid, count from (\nselect distinct series_instance_uid, count(*) from image_equivalence_class group by series_instance_uid) as foo where count > ?	{count}	{series_instance_uid,count}	{find_series,equivalence_classes,consistency}	posda_files	Find Series with more than n equivalence class
WhereSopSitsPublic	select distinct\n  tdp.project as collection,\n  tdp.dp_site_name as site,\n  p.patient_id,\n  i.study_instance_uid,\n  i.series_instance_uid\nfrom\n  general_image i,\n  patient p,\n  trial_data_provenance tdp\nwhere\n  sop_instance_uid = ?\n  and i.patient_pk_id = p.patient_pk_id\n  and i.trial_dp_pk_id = tdp.trial_dp_pk_id\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	public	Get Collection, Patient, Study Hierarchy in which SOP resides\n
GetCTQPByLikeCollectionSite	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id\nwhere collection like ? and site = ?	{collection_like,site}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
DuplicateSopsInSeriesExperimentalSub	select \n    distinct sop_instance_uid, min(file_id) as first_f, max(file_id) as last_f\n  from\n     file_series natural join file_sop_common natural join ctp_file\n  where\n     series_instance_uid = ? and visibility is null\n  group by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,first_f,last_f}	{by_series,dup_sops,"ACRIN-FMISO-Brain Duplicate Elimination"}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
GetPosdaSopsForCompareLikeCollectionEqualSite	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name like ? and site_name = ?\n  and visibility is null	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
GetAllQualifiedCTQPByLikeCollectionWithFileCountAndLoadTimesOnlySinceDate	select * from (select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files, count (distinct sop_instance_uid) as num_sops,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join file_sop_common using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ?\ngroup by collection, site, patient_id, qualified) as foo where earliest_day >= ? 	{collection_like,from}	{collection,site,patient_id,qualified,num_files,num_sops,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
InsertVisibilityChange	insert into file_visibility_change(\n  file_id, user_name, time_of_change,\n  prior_visibility, new_visibility, reason_for\n)values(\n  ?, ?, now(),\n  ?, ?, ?\n)\n	{file_id,user_name,prior_visibility,new_visibility,reason}	{}	{ImageEdit,NotInteractive}	posda_files	Insert Image Visibility Change\n\n
IsFileProcessed	select is_dicom_file is not null as processed\nfrom file\nwhere file_id = ?\n	{file_id}	{processed}	{}	posda_files	\n
CreateSimpleSeriesScanInstance	insert into series_scan_instance(\nscan_instance_id, series_instance_uid, start_time\n)values(?, ?, now())	{scan_instance_id,series_instance_uid}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
FileIdsVisibleInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
DicomFileTypesNotProcessedAll	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d\nwhere\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
GetElemenSeenIdBySigVr	select element_seen_id\nfrom element_seen\nwhere element_sig_pattern = ? and vr = ?	{element_sig_pattern,vr}	{element_seen_id}	{NotInteractive,ElementDisposition,phi_maint}	posda_phi_simple	Get List of Private Elements By Disposition
GetReferencedButUnknownSsSops	select\n  sop_instance_uid, \n  ss_referenced_from_plan as ss_sop_instance_uid \nfrom \n  plan p natural join file_plan join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    p.ss_referenced_from_plan  = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,ss_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
ShowQueryTabHierarchy	select \n  query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\ngroup by query_tab_name, filter_name, tag\norder by \n  query_tab_name, filter_name, tag	{}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
DistinctSeriesByImportEvent	select\n  distinct project_name as collection, site_name as site, \n  patient_id, patient_name, study_instance_uid, series_instance_uid, \n  dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_patient natural join file_study natural join file_series natural join dicom_file\n  natural left join ctp_file\nwhere\n  file_id in (\n    select distinct file_id from file_import where import_event_id = ?\n  )\ngroup by collection, site, patient_id, patient_name,\n  study_instance_uid, series_instance_uid, dicom_file_type, modality	{import_event_id}	{collection,site,patient_id,patient_name,study_instance_uid,series_instance_uid,dicom_file_type,modality,count}	{select_for_phi,visual_review_selection}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
DiskSpaceByCollection	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  where project_name = ?\n  )\ngroup by project_name\n	{collection}	{collection,total_bytes}	{by_collection,posda_files,storage_used}	posda_files	Get disk space used by collection\n
TagsSeenSimplePrivateWithCountAndNullDisp	select \n  distinct element_sig_pattern,\n  vr,\n  private_disposition, tag_name,\n  count(distinct value) as num_values\nfrom\n  element_seen natural left join\n  element_value_occurance\n  natural left join value_seen\nwhere\n  is_private and private_disposition is null\ngroup by element_sig_pattern, vr, private_disposition, tag_name\norder by element_sig_pattern;	{}	{element_sig_pattern,vr,private_disposition,tag_name,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi_simple	Get all the data from tags_seen in posda_phi_simple database\n
CreateSimplePhiScanRow	insert into phi_scan_instance(\ndescription, num_series, start_time, num_series_scanned,file_query\n)values(?, ?,now(), 0,?)	{description,num_series,file_query}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
FindStudiesWithMatchingDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description = ?\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection,description}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
SeriesVisualReviewResultsExtendedByCollectionSiteStatus	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  equivalence_class_number,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join\n  file_patient natural join\n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  equivalence_class_number\norder by\n  series_instance_uid	{project_name,site_name,status}	{collection,site,series_instance_uid,patient_id,dicom_file_type,modality,review_status,num_files,equivalence_class_number}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
SeriesEquivalenceClassResults	select\n  distinct series_instance_uid,\n  equivalence_class_number, \n  review_status,\n  count(distinct file_id) as files_in_class\nfrom\n  image_equivalence_class\n  natural join image_equivalence_class_input_image\nwhere series_instance_uid in (\n  select \n    distinct series_instance_uid\n  from\n    ctp_file\n    natural join file_series \n    join image_equivalence_class using(series_instance_uid) \n  where project_name = ? and visibility is null and review_status = ?\n) group by\n   series_instance_uid,\n   equivalence_class_number,\n   review_status\norder by series_instance_uid, equivalence_class_number	{project_name,status}	{series_instance_uid,equivalence_class_number,review_status,files_in_class}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DuplicateSopsWithLastLoadDateByCollection	select\n  distinct sop_instance_uid, file_id, max(import_time) latest\nfrom file_location join file_import using(file_id) join import_event using (import_event_id)  \n  join file_sop_common using(file_id) join ctp_file using (file_id)\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(distinct file_id)\n    from file_sop_common natural join ctp_file\n    where project_name = ? and visibility is null group by sop_instance_uid\n    ) as foo\n  where count > 1\n  ) and visibility is null\ngroup by sop_instance_uid, file_id	{collection}	{collection}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
DistinctSeriesBySubject	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and project_name = ? \n  and site_name = ? and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,count}	{by_subject,find_series}	posda_files	Get Series in A Collection, Site, Subject\n
DistinctVisibleFileReportByCollectionSite	select distinct\n  project_name as collection, site_name as site, patient_id, study_instance_uid,\n  series_instance_uid, sop_instance_uid, dicom_file_type, modality, file_id\nfrom\n  file_patient natural join file_study natural join file_series natural join file_sop_common\n  natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\norder by series_instance_uid	{project_name,site_name}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,dicom_file_type,modality,file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
CreateNonDicomPathValueOccurance	insert into non_dicom_path_value_occurrance(\n  non_dicom_path_seen_id,\n  value_seen_id,\n  non_dicom_file_scan_id\n) values (\n  ?, ?, ?\n)	{non_dicom_path_seen_id,value_seen_id,non_dicom_file_scan_id}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
PatientByImportEventId	select\n  distinct patient_id, visibility, count(distinct file_id) as num_files\nfrom file_patient natural left join ctp_file\nwhere file_id in (\n  select distinct file_id\n  from file_import natural join import_event \n  where import_event_id = ?\n) group by patient_id, visibility order by patient_id, visibility	{import_event_id}	{patient_id,visibility,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
StartTransaction	begin	{}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
CreateEquipmentSignature	insert into equipment_signature(equipment_signature)values(?)\n	{equipment_signature}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create New Equipment Signature Id
SimplePhiReportByScanVrPrivateOnly	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, private_disposition as disposition,\n  count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ?\n  and is_private\ngroup by element_sig_pattern, vr, value, tag_name, private_disposition	{scan_id,vr}	{element,vr,value,description,disposition,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetRoiList	select \n   roi_id, roi_num ,roi_name\nfrom \n  roi natural join structure_set natural join file_structure_set \n  join file_sop_common using(file_id)\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{roi_id,roi_num,roi_name}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of ROI's in a structure Set\n\n
RtstructSopsByCollectionSiteDateRange	select distinct\n  sop_instance_uid\nfrom\n  file_series natural join ctp_file natural join file_sop_common\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and site_name = ?\n  and visibility is null and import_time > ? and \n  import_time < ?\n  and modality = 'RTSTRUCT'	{collection,site,from,to}	{sop_instance_uid}	{Hierarchy,apply_disposition,hash_unhashed}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetPlansReferencingGoodSS	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from plan p natural join file_plan  where\nexists (select sop_instance_uid from file_sop_common fsc where p.ss_referenced_from_plan \n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetRoundId	select  currval('round_round_id_seq') as id\n	{}	{file_id}	{NotInteractive,Backlog}	posda_backlog	Get posda file id of created round row
ChangeEquivalenceClassStatus	update image_equivalence_class set\n  review_status = ?,\n  processing_status = ?\nwhere\n  image_equivalence_class_id = ?	{review_status,processing_status,image_equivalence_class_id}	{}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
DicomEditCompareDispositionStatus	select \n  subprocess_invocation_id as id, \n  current_disposition as status,\n  date_trunc('minute', start_creation_time) as started_at,\n  date_trunc('second', last_updated - start_creation_time) as run_time,\n  date_trunc('second', now() - last_updated) as since_update, \n  process_pid as pid,\n  number_edits_scheduled as total_edits,\n  number_edits_scheduled - (number_compares_with_diffs + number_compares_without_diffs) as remaining\nfrom\ndicom_edit_compare_disposition	{}	{id,status,started_at,run_time,since_update,pid,total_edits,remaining}	{adding_ctp,for_scripting}	posda_files	Status of entries in dicom_edit_comparison
SsRoiForsBySopInstance	select \n  distinct for_uid\nfrom\n  roi natural join file_structure_set\nwhere\n  file_id in (\n    select file_id \n    from file_sop_common natural join ctp_file\n    where sop_instance_uid = ? and visibility is null\n  )	{sop_instance_uid}	{for_uid}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetSeriesWithSignatureByCollectionSiteDateRange	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection,site,from,to}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature,phi_review}	posda_files	Get a list of Series with Signatures by Collection\n
UpdateElementDispositionSimple	update\n  element_seen\nset\n  private_disposition = ?\nwhere\n  element_seen_id = ?	{disp,id}	{}	{tag_usage,used_in_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
FindStructureSets	select\n  distinct dicom_file_type, project_name,  \n  patient_id, min(import_time), max(import_time), count(distinct file_id) \nfrom\n  ctp_file natural join dicom_file natural join\n  file_patient natural join file_import natural join \n  import_event \nwhere file_id in (\n  select file_id \n  from (\n    select file_id, image_id \n    from ctp_file natural join file_series left join file_image using(file_id)\n    where modality = 'CT' and project_name = 'Exceptional-Responders' and file_id in (\n      select\n         distinct file_id from file_import natural join import_event natural join dicom_file\n      where import_time > '2018-09-17'\n    )\n  ) as foo where image_id is null\n) \nand visibility is null\ngroup by dicom_file_type, project_name, patient_id\norder by patient_id	{}	{dicom_file_type,project_name,patient_id,min,max,count}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
GetDciodvfyErrorUnrecogPub	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedPublicTag'\n  and error_tag = ?\n	{error_tag}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'UnrecognizedPublicTag'
GetSeriesWithSignatureIntake	select\n  distinct  s.series_instance_uid,\n  concat(\n    COALESCE(e.manufacturer, ''), \n    '_',\n    COALESCE(e.manufacturer_model_name, ''),\n     '_',\n    COALESCE(e.software_versions, '') \n  ) as signature\nfrom\n  general_series s, general_equipment e\nwhere\n  s.general_equipment_pk_id = e.general_equipment_pk_id and\n  s.general_series_pk_id in (\n    select\n      distinct i.general_series_pk_id\n    from\n      general_image i, trial_data_provenance tdp\n    where\n      i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n      tdp.project = ? and tdp.dp_site_name = ?\n  )	{collection,site}	{series_instance_uid,signature}	{signature}	intake	Get a list of Series with Signatures by Collection Intake\n
GetFileIdVisibilityBySeriesInstanceUid	select distinct file_id, visibility\nfrom file_series natural left join ctp_file\nwhere series_instance_uid = ?	{series_instance_uid}	{file_id,visibility}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
GetAllQualifiedCTQPByLikeCollectionWithFileCountAndLoadTimesSinceDate	select * from (select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ?\ngroup by collection, site, patient_id, qualified) as foo where latest_day >= ? 	{collection_like,from}	{collection,site,patient_id,qualified,num_files,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
PixelDataIdByFileId	select\n  distinct file_id, image_id, unique_pixel_data_id\nfrom\n  file_image natural join image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id}	{by_file_id,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
FindStudiesWithNullDescriptionByCollection	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null and study_description is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Studies by Collection with Null Study Description\n
IntakeImagesByCollectionSiteSubj	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.dicom_file_uri as FilePath,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ? and\n  p.patient_id = ?\n	{collection,site,patient_id}	{PID,Modality,SopInstance,FilePath}	{SymLink,intake}	intake	List of all Files Images By Collection, Site\n
PixelInfoBySeries	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from file_series natural join ctp_file\n  where series_instance_uid = ? and visibility is null\n)\n	{series_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for all files in a series\n
GetFilesNotHiddenInDicomFileCompare	select\n  distinct from_file_digest\nfrom\n  dicom_edit_compare\nwhere\n  from_file_digest in \n  (\n    select from_file_digest from \n    (\n      select distinct from_file_digest \n      from dicom_edit_compare dec, file f natural join ctp_file\n      where dec.from_file_digest = f.digest and visibility is null and edit_command_file_id = ?\n      except\n      select from_file_digest from dicom_edit_compare dec\n      where not exists\n      (\n        select file_id from file f where dec.to_file_digest = f.digest\n       ) \n       and edit_command_file_id = ?\n    ) as foo\n  )\n  and edit_command_file_id = ?\n	{command_file_id,command_file_id_1,command_file_id_2}	{from_file_digest}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get Files not hidden but replacement imported
RoundSummary1AvoidingCrash	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups)\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null \ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Summary of rounds
FindInconsistentSeriesExtended	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    image_type, count(*)\n  from\n    file_series natural join ctp_file\n    left join file_image using(file_id)\n    left join image using(image_id)\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, image_type,\n    modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series Extended to include image type\n
PhiNonDicomScanStatus	select \n   phi_non_dicom_scan_instance_id as id,\n   pndsi_description as description,\n   pndsi_start_time as start_time,\n   pndsi_num_files as num_files_to_scan,\n   pndsi_num_files_scanned as num_files_scanned,\n   pndsi_end_time as end_time\nfrom\n  phi_non_dicom_scan_instance\norder by start_time\n	{}	{id,description,start_time,num_files_to_scan,num_files_scanned,end_time}	{tag_usage,non_dicom_phi_status}	posda_phi_simple	Status of PHI scans\n
GetTheBaseCtSeriesForLGCP	select\n  patient_id, series_instance_uid, count(distinct file_id) as num_files\nfrom \n  file_series natural join file_patient natural join ctp_file\nwhere series_instance_uid in (\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.983508919695337135620677418685',\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.170224599052836213374813274674',\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.124599233476878991434251967746',\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.122505729234908340647352438768',\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.246380096059125471917249164954',\n '1.3.6.1.4.1.14519.5.2.1.5826.1402.199118463594923165410399883739')\n and visibility is null\ngroup by patient_id, series_instance_uid	{}	{patient_id,series_instance_uid,num_files}	{"Curation of Lung-Fused-CT-Pathology"}	posda_files	Get the list of series which serve as a basis for fixing SOP instance UID's in Lung-Fused-CT-Pathology
RoiInfoByFileIdWithCountsAndOffsets	select\n  roi_id, for_uid, linked_sop_instance_uid,\n  max_x, max_y, max_z,\n  min_x, min_y, min_z,\n  roi_name, roi_description , roi_interpreted_type,\n  contour_file_offset + coalesce (data_set_start, 0) as contour_real_file_offset,\n  contour_length,\n  root_path || '/' || rel_path as path\nfrom\n  roi natural join file_roi_image_linkage natural join file_location natural join file_storage_root natural join file_meta\nwhere file_id = ?\n	{file_id}	{roi_id,for_uid,linked_sop_instance_uid,max_x,max_y,max_z,min_x,min_y,min_z,roi_name,roi_description,roi_interpreted_type,contour_real_file_offset,contour_length,path}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
GetNonDicomFilesByCollection	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  collection = ? and\n  visibility is null\n	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
ConflictingDispositions	select\n  element_sig_pattern, vr, tag_name, private_disposition\n from \n  element_seen \nwhere element_sig_pattern in (\n  select \n    distinct element_sig_pattern \n  from (\n    select \n      distinct element_sig_pattern, count(distinct private_disposition) \n    from element_seen \n    group by element_sig_pattern \n    order by count desc\n  ) as foo \n  where count > 1\n) order by element_sig_pattern;	{}	{element_sig_pattern,vr,tag_name,private_disposition}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
CreateCopyFromPublicEntry	insert into copy_from_public(\n  who, why, when_row_created, status_of_copy\n) values (\n  ?, ?, now(), ?\n)	{who,why,status_of_copy}	{}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
TagsSeenPrivateWithCountNullDisp	select\n  distinct element_signature, \n  vr, \n  private_disposition, \n  name_chain, \n  count(distinct value) as num_values\nfrom\n  element_signature natural left join\n  scan_element natural left join\n  seen_value\nwhere is_private and private_disposition is null\ngroup by element_signature, vr, private_disposition, name_chain\norder by element_signature, vr	{}	{element_signature,vr,private_disposition,name_chain,num_values}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
FileStorageRootSummary	select \n  distinct file_storage_root_id,\n  root_path,\n  storage_class,\n  count(distinct file_id) as num_files\nfrom\n  file_storage_root\n  natural join file_location\ngroup by file_storage_root_id, root_path, storage_class;	{}	{file_storage_root_id,root_path,storage_class,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
ListOfPrivateElementsWithDispositions	select\n  element_signature, vr , private_disposition as disposition, element_signature_id, name_chain\nfrom\n  element_signature\nwhere\n  is_private\norder by element_signature\n	{}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
FindPotentialDistinguishedPixelDigests	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  digest as pixel_digest,\n  pixel_rows,\n  pixel_columns,\n  bits_allocated,\n  count(*)\nfrom\n  ctp_file\n  natural join file_patient\n  natural join file_series\n  natural join file_image\n  natural join dicom_file\n  join image using (image_id)\n  join unique_pixel_data using(unique_pixel_data_id)\nwhere\n  file_id in \n  (select \n    distinct file_id \n  from\n    file_image \n  where\n    image_id in\n    (select\n       image_id from \n       (select\n         distinct image_id, count(distinct file_id) \n       from\n         file_image \n       group by image_id\n       ) as foo\n     where count > 10\n  )\n) and visibility is null \ngroup by collection, site, patient_id, series_instance_uid,\nmodality, dicom_file_type,\ndigest, pixel_rows, pixel_columns, bits_allocated\norder by digest, collection, site, patient_id\n\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,pixel_digest,pixel_rows,pixel_columns,bits_allocated,count}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
PixelTypesWithNoGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration\nfrom\n  image i where image_id not in (\n    select image_id from image_geometry g where g.image_id = i.image_id\n  )\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get pixel types with no geometry\n
LockNonDicomEditCompareDisposition	lock non_dicom_edit_compare_disposition\n	{}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Lock table non_dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface.
FileIdsByActivityTimepointId	select\n file_id\nfrom\n  activity_timepoint_file\nwhere\n  activity_timepoint_id = ?	{activity_timepoint_id}	{file_id}	{activity_timepoint_support}	posda_queries	Get files in an activity_timepoint
PatientStudySeriesEquivalenceClassNoByProcessingStatus	select \n  distinct patient_id, study_instance_uid, series_instance_uid, equivalence_class_number, count(*) \nfrom \n  image_equivalence_class natural join image_equivalence_class_input_image natural join\n  file_study natural join file_series natural join file_patient\nwhere\n  processing_status = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number\norder by patient_id, study_instance_uid, series_instance_uid, equivalence_class_number	{processing_status}	{patient_id,study_instance_uid,series_instance_uid,equivalence_class_number,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
FileIdByPixelType	select\n  distinct file_id\nfrom\n  image natural join file_image\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  (pixel_representation = ?  or pixel_representation is null) and\n  (planar_configuration = ? or planar_configuration is null)\nlimit 100	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{file_id}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
CountOfFilesRemainingToBeHiddenByScanInstance	select\n  count(distinct file_id) as num_files\nfrom\n  file_sop_common natural\n  join ctp_file\nwhere\n  visibility is null and\n  sop_instance_uid in (\n    select\n      sop_instance_uid\n    from\n      file_sop_common\n      where file_id in (\n          select\n            distinct file_id\n          from\n             image_equivalence_class natural join\n             image_equivalence_class_input_image\n           where\n             visual_review_instance_id = ? and\n             review_status = 'Bad'\n        )\n     )	{visual_review_instance_id}	{num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_status}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
RoundSummary1ByDateRange	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and round_end > ? and round_end < ?\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{from,to}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
GetDciodvfyWarningRetiredAttr	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'RetiredAttribute'\n  and warning_tag = ?\n  and warning_desc = ?	{warning_tag,warning_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warnings row where warning_type = GetDciodvfyWarningRetiredAttr
ShowAllVisibilityChangesBySopInstance	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from file_sop_common\n  where sop_instance_uid = ?\n)\norder by time_of_change	{sop_instance_uid}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
AllPrivateDispositions	select \n  distinct element_sig_pattern, vr, tag_name, element_seen_id, private_disposition\nfrom \n  element_seen\nwhere\n  is_private\norder by element_sig_pattern,vr	{}	{element_sig_pattern,tag_name,vr,element_seen_id,private_disposition}	{tag_usage,used_in_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
DuplicateSOPInstanceUIDs	select\n  sop_instance_uid, min(file_id) as first,\n  max(file_id) as last, count(*)\nfrom file_sop_common\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n      where project_name = ? and site_name = ? and patient_id = ?\n    ) as foo natural join ctp_file\n    where visibility is null\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by sop_instance_uid;\n	{collection,site,subject}	{sop_instance_uid,first,last,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetDciodvfyWarningAttrSpecWithValue	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'AttributeSpecificWarningWithValue'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_value = ?\n\n\n  	{warning_tag,warning_desc,warning_value}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = AttributeSpecificWarningWithValue
ShowQueryTabHierarchyByTabWithQueryCounts	select distinct query_tab_name, filter_name, tag, count(distinct query_name) as num_queries\nfrom(\nselect\n  query_tab_name, filter_name, tag, query_name\nfrom (\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n) as foo\nnatural join(\n  select name as query_name, unnest(tags) as tag\nfrom queries\n) as fie\n) as foo\ngroup by query_tab_name, filter_name, tag\norder by filter_name, tag	{query_tab_name}	{query_tab_name,filter_name,tag,num_queries}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
QueryArgsByQueryId	select\n  arg_index as num, arg_name as name, arg_value as value\nfrom\n  dbif_query_args\nwhere\n  query_invoked_by_dbif_id = ?\norder by arg_index	{id}	{num,name,value}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
GetNonDicomPathSeen	select\n  non_dicom_path_seen_id \nfrom\n  non_dicom_path_seen\nwhere\n  non_dicom_file_type = ? and\n  non_dicom_path = ?	{file_type,path}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
WhereSeriesSitsQuick	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n  limit 1\n)	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{by_series_instance_uid,posda_files,sops,used_in_simple_phi}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
DiskSpaceByCollectionSummaryWithDups	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file natural join file_import\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
GetFileVisibility	select distinct visibility from ctp_file where file_id = ?	{file_id}	{visibility}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get current visibility by file_id\n
PatientIdMappingByPatientId	select\n  from_patient_id, to_patient_id, to_patient_name, collection_name, site_name,\n  batch_number, diagnosis_date, baseline_date, date_shift, uid_root\nfrom \n  patient_mapping\nwhere\n  from_patient_id = ?	{from_patient_id}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,uid_root}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_files	Simple Phi Report with Meta Quotes
InsertIntoNonDicomEditCompareFixed	insert into non_dicom_edit_compare(\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  report_file_id,\n  to_file_path\n) values ( ?, ?, ?, ?, ?)	{subprocess_invocation_id,from_file_digest,to_file_digest,report_file_id,to_file_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda,public_posda_counts,non_dicom_edit}	posda_files	Lock the file table in posda_files
GetDciodvfyWarningAttrSpec	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'AttributeSpecificWarning'\n  and warning_tag = ?\n  and warning_desc= ?	{warning_tag,warning_desc}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_warning row where subtype = AttributeSpecificWarning
GetPatientInfoById	select\n  file_id,\n  patient_name,\n  patient_id,\n  id_issuer,\n  dob,\n  sex,\n  time_ob,\n  other_ids\n  other_name,\n  ethnic_group,\n  comments\nfrom file_patient\nwhere file_id = ?	{file_id}	{file_id,modality,series_instance_uid,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments,performed_procedure_step_comments,date_fixed}	{reimport_queries}	posda_files	Get file path from id
CreateCtpFileRow	insert into ctp_file(\n  file_id, project_name, site_name, site_id, file_visibility, batch, study_year\n) values (\n  ?, ?, ?, ?, ?, ?, ?\n)	{file_id,project_name,site_name,site_id,file_visibility,batch,study_year}	{}	{meta,test,hello,query_tabs,bills_test}	posda_files	create ctp_file row
InsertIntoDicomEditCompareFixed	insert into dicom_edit_compare(\n  subprocess_invocation_id,\n  from_file_digest,\n  to_file_digest,\n  short_report_file_id,\n  long_report_file_id,\n  to_file_path\n) values ( ?, ?, ?, ?, ?, ?)	{subprocess_invocation_id,from_file_digest,to_file_digest,short_report_file_id,long_report_file_id,to_file_path}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda,public_posda_counts}	posda_files	Lock the file table in posda_files
AddFilterToTab	insert into query_tabs_query_tag_filter(query_tab_name, filter_name, sort_order)\nvalues(?, ?, ?)	{query_tab_name,filter_name,sort_order}	{}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
PixelTypesWithGeoRGB	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop, count(distinct image_id) as num_images\nfrom\n  image natural left join image_geometry\nwhere\n  photometric_interpretation = 'RGB'\ngroup by photometric_interpretation,\n  samples_per_pixel, bits_allocated, bits_stored, high_bit, pixel_representation,\n  planar_configuration, iop\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop,num_images}	{find_pixel_types,image_geometry,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
CreateActivityTimepoint	insert into activity_timepoint(\n  activity_id, when_created, who_created, comment, creating_user\n) values (\n  ?, now(), ?, ?, ?\n)	{actiity_id,who_created,comment,creating_user}	{}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
RoundStatsWithSubjByCollectionForDateRange	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ? and collection = ?\ngroup by collection, site, subj, time order by time desc, collection	{interval,from,to,collection}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
PatientStudySeriesFileHierarchyByCollectionSite	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  modality\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,modality}	{Hierarchy}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series, with Modality of file
CreateNonDicomFileScanInstance	insert into non_dicom_file_scan(\n  phi_non_dicom_scan_instance_id,\n  file_type,\n  file_in_posda,\n  posda_file_id\n) values (\n  ?, ?, true, ?\n)	{phi_non_dicom_scan_instance_id,file_type,posda_file_id}	{}	{NotInteractive,non_dicom_phi}	posda_phi_simple	Create a dciodvfy_scan_instance row
AllManifestsByCollection	select\n  distinct file_id, import_time, size, root_path || '/' || l.rel_path as path, i.file_name as alt_path\nfrom\n  file_location l join file_storage_root using(file_storage_root_id) \n  join file_import i using (file_id) natural join file join import_event using(import_event_id)\nwhere\n  file_id in (\n    select distinct file_id from ctp_manifest_row where cm_collection = ?\n  )	{collection}	{file_id,import_time,size,path,alt_path}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
InsertInitialDicomDD	insert into dicom_element(tag, name, keyword, vr, vm, is_retired, comments)\nvalues (?,?,?,?,?,?,?)	{tag,name,keyword,vr,vm,is_retired,comments}	{}	{Insert,NotInteractive,dicom_dd}	dicom_dd	Insert row into dicom_dd database
VolumeReferencedByStruct	select \n  distinct for_uid, study_instance_uid, series_instance_uid, count(distinct sop_instance) as num_sops\nfrom\n  ss_volume natural join ss_for natural join file_structure_set\nwhere\n  file_id = ?\ngroup by\n  for_uid, study_instance_uid, series_instance_uid	{file_id}	{for_uid,study_instance_uid,series_instance_uid,num_sops}	{"Test Case based on Soft-tissue-Sarcoma"}	posda_files	Find All of the Structure Sets In Soft-tissue-Sarcoma
FirstFileForSopPosda	select\n  root_path || '/' || rel_path as path,\n  modality\nfrom \n  file_location natural join file_storage_root\n  natural join file_sop_common\n  natural join file_series\n  natural join ctp_file\nwhere\n  sop_instance_uid = ? and visibility is null\nlimit 1	{sop_instance_uid}	{path,modality}	{by_series,UsedInPhiSeriesScan}	posda_files	First files in series in Posda\n
GetAllInboxItems	select\n  user_inbox_content_id,\n  background_subprocess_report_id,\n  current_status,\n  date_entered\nfrom user_inbox_content \nnatural join user_inbox\nwhere user_name = ?\norder by date_entered desc\n	{user_name}	{user_inbox_content_id,background_subprocess_report_id,current_status,date_entered}	{}	posda_queries	Get a list of all messages from the user's inbox.
GetDciodvfyWarningUnrecogTag	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'UnrecognizedTag'\n  and warning_tag = ?\n  and warning_comment = ?\n 	{warning_tag,warning_comment}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
DupReport	select\n  distinct collection,\n  sum(num_entered) num_files,\n  sum(num_dups) num_dups,\n  (cast(sum(num_dups) as float)/cast((sum(num_entered) + sum(num_dups)) as float))*100.0 as\n   percent_dups\nfrom\n  round_collection\ngroup by collection\norder by percent_dups desc	{}	{collection,num_files,num_dups,percent_dups}	{Backlog,"Backlog Monitor",backlog_analysis_reporting_tools}	posda_backlog	Report on Percentage of duplicates by collection
InsertActivityInboxContent	insert into activity_inbox_content(\n activity_id, user_inbox_content_id\n) values (\n  ?, ?\n)\n	{activity_id,user_inbox_content_id}	{}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
GetPosdaSopsForCompare	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name = ? \n  and visibility is null	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
DistinctSopsInCollectionSiteIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	intake	Get Distinct SOPs in Collection with number files\n
DuplicateSOPInstanceUIDsByCollectionWithoutHidden1	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo natural join ctp_file\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{receive_reports}	posda_files	Return a count of visible duplicate SOP Instance UIDs\n
GetDciodvfyErrorAttrSpec	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributeSpecificError'\n  and error_tag = ?\n  and error_subtype= ?	{error_tag,error_subtype}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_errors row where subtype = AttributeSpecificError
UploadCountsBetweenDatesByCollection	select distinct \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid,\n  count(*)\nfrom\n  ctp_file natural join file_study\n  natural join file_series\n  natural join file_patient\nwhere file_id in (\n  select file_id\n  from\n    file_import natural join import_event\n    natural join ctp_file\n  where\n    import_time > ? and import_time < ? \n    and project_name = ?\n)\ngroup by\n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, \n  study_instance_uid, series_instance_uid\n 	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{receive_reports}	posda_files	Counts of uploads received between dates for a collection\nOrganized by Subject, Study, Series, count of files_uploaded\n
RelinquishBacklogControl	update control_status\nset status = 'idle',\n  processor_pid =  null,\n  pending_change_request = null,\n  source_pending_change_request = null,\n  request_time = null	{}	{}	{NotInteractive,Backlog}	posda_backlog	relese control of posda_backlog
missing file_study	select distinct patient_id, dicom_file_type, series_instance_uid, modality, count(distinct file_id) as num_files,\n  min(import_time) as earliest, max(import_time) as latest\nfrom \nfile_patient natural join dicom_file natural join file_series\nnatural join file_import natural join import_event\nwhere file_id in (\nselect file_id from \nctp_file where project_name =? and site_name = ? and visibility is null and not exists (select file_id from file_study where file_study.file_id = ctp_file.file_id)) group by patient_id, dicom_file_type, series_instance_uid, modality	{collection,site}	{patient_id,dicom_file_type,series_instance_uid,modality,num_files,earliest,latest}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
FindInconsistentSeriesByCollectionSite	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and site_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
GeFromToFilesFromNonDicomEditCompare	select \n  file_id as from_file_id, \n  foo.to_file_id \nfrom \n  file, \n  (\n    select \n      from_file_digest, \n      file_id as to_file_id\n    from \n      file,\n       non_dicom_edit_compare \n    where \n      to_file_digest = digest\n      and subprocess_invocation_id = ?\n  ) as foo\nwhere \n  from_file_digest = digest;	{subprocess_invocation_id}	{from_file_id,to_file_id}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Retrieve entries from patient_mapping table
SimplePhiReportAll	select \n  distinct element_sig_pattern as element, vr, value, tag_name as description, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ?\ngroup by element_sig_pattern, vr, value, description\norder by vr, element, value	{scan_id}	{element,vr,value,description,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
FileNameReportByImportEvent	select\n  file_id, patient_id,\n  study_instance_uid, study_date, study_description, series_instance_uid,\n  modality, series_date, series_description, dicom_file_type, file_name\nfrom\n  file_import natural join file_patient natural join file_series natural join\n  file_study natural join dicom_file\nwhere\n  import_event_id = ?\norder by file_name	{import_event_id}	{file_id,patient_id,study_instance_uid,study_date,study_description,series_instance_uid,modality,series_date,series_description,dicom_file_type,file_name}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
IncrementPhiNonDicomFilesScanned	update phi_non_dicom_scan_instance\nset pndsi_num_files_scanned = pndsi_num_files_scanned + 1\nwhere phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetElementByPublicDisposition	select\n  element_signature, disposition\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ? and\n  not is_private and disposition = ?\n	{sop_class_uid,name,disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Elements By Disposition, Sop Class, and name
GetPixelPaddingInfoByCollection	select\n  distinct modality, pixel_pad, slope, intercept, manufacturer, \n  image_type, pixel_representation as signed, count(*)\nfrom                                           \n  file_series natural join file_equipment natural join ctp_file natural join\n  file_slope_intercept natural join slope_intercept natural join file_image natural join image\nwhere                                                 \n  modality = 'CT' and project_name = ? and visibility is null\ngroup by \n  modality, pixel_pad, slope, intercept, manufacturer, image_type, signed\n	{collection}	{modality,pixel_pad,slope,intercept,manufacturer,image_type,signed,count}	{PixelPadding}	posda_files	Get Pixel Padding Summary Info\n
AllPublicSignaturesByScanId	select distinct element_signature as public_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\nwhere\n  scan_event_id = ? \n  and not is_private\norder by public_signature	{scan_id}	{public_signature}	{tag_usage}	posda_phi	List of non-private Element Signatures seen by Scan
PotentialDuplicateSopSeriesByCollectionSite	select distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \ncount(distinct sop_instance_uid)\nfrom\n(select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,count}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetQualifiedCTQPByLikeCollectionSiteWithNoFiles	select \n  collection, site, patient_id, qualified\nfrom\n  clinical_trial_qualified_patient_id p\nwhere collection like ? and site = ? and qualified and\n  not exists (select file_id from file_patient f where f.patient_id = p.patient_id)\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
PixelTypesWithSOP	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  coalesce(number_of_frames,1) > 1 as is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type,\n  count(*)\nfrom\n  image natural join file_image natural join file_series natural join dicom_file\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  is_multi_frame,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  dicom_file_type\norder by\n  count desc	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,is_multi_frame,pixel_representation,planar_configuration,modality,dicom_file_type,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
InsertInitialPatientStatus	insert into patient_import_status(\n  patient_id, patient_import_status\n) values (?, ?)\n	{patient_id,status}	\N	{Insert,NotInteractive,PatientStatus}	posda_files	Insert Initial Patient Status\nFor use in scripts\nNot really intended for interactive use\n
ColumnsInTable	select attname as column_name\nFROM pg_attribute,pg_class \nWHERE attrelid=pg_class.oid \nAND relname= ?\nAND attstattarget <>0; \n	{table_name}	{column_name}	{AllCollections,postgres_stats,table_size}	posda_queries	Get a list of collections and sites\n
PatientStudySeriesHierarchyByCollectionSiteExtMore	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count (distinct file_id) as num_files,\n  min(import_time) as first_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_study natural join\n  ctp_file natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient join\n  file_import using(file_id) join\n  import_event using(import_event_id)\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file\n    where project_name = ? and site_name = ? and\n    visibility is null\n  )\ngroup by patient_id, study_instance_uid, series_instance_uid,\n  dicom_file_type, modality\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,dicom_file_type,modality,num_files,first_loaded,last_loaded}	{Hierarchy,phi_simple,simple_phi}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
SubjectsWithDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, \n  count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops,\n  min(import_time) as earliest,\n  max(import_time) as latest\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id, sop_instance_uid, import_time\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_import\n    natural join import_event\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and site_name = ?\n            and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,earliest,latest}	{dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
NonDicomDifferenceReportByEditId	select\n  distinct report_file_id, count(distinct to_file_path) as num_files\nfrom non_dicom_edit_compare\nwhere subprocess_invocation_id =?\ngroup by report_file_id\norder by report_file_id	{subprocess_invocation_id}	{report_file_id,num_files}	{used_in_file_import_into_posda,used_in_file_migration,non_dicom_edit}	posda_files	Get count of files relative to storage root
SeriesSentToIntakeByDate	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,series_instance_uid,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Series Sent To Intake By Date\n
GetCopyFromPublicInfo	select\n  copy_from_public_id,\n  when_row_created,\n  who,\n  why, \n  num_file_rows_populated as num_files,\n  status_of_copy,\n  pid_of_running_process\nfrom\n  copy_from_public\n	{}	{copy_from_public_id,when_row_created,who,why,num_files,status_of_copy,pid_of_running_process}	{bills_test,copy_from_public,public_posda_consistency}	posda_files	Add a filter to a tab
FilesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid\nfrom\n  file_location natural join file_storage_root natural join file_patient\n  natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\n  \nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{by_collection_site,find_files}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
HiddenCountsByCollectionSiteDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select distinct file_id \n    from file_import natural join import_event natural join ctp_file\n    where import_time > ? and import_time < ?\n    and project_name = ? and site_name = ? and visibility = 'hidden')\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection,site}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
InsertIntoPatientMappingIntBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift) values (\n  ?, ?, ?, ?, ?, ?, interval ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with batch and interval
NonDicomPhiReportJsonMetaQuotes	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'json'\ngroup by type, path, q_value\norder by type, path, q_value	{scan_id}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi}	posda_phi_simple	Simple Phi Report with Meta Quotes
HideFileWithNoCtp	insert into ctp_file(file_id, project_name, trial_name, site_name, visibility)\nvalues(?, 'UNKNOWN', 'UNKNOWN', 'UNKNOWN', 'hidden')	{file_id}	{}	{ImageEdit,NotInteractive}	posda_files	Hide a file which currently has no ctp_file row\n\nInsert a ctp_file row with:\nproject_name = 'UNKNOWN'\nsite_name = 'UNKNOWN'\nvisibility = 'hidden'\n
GetExistenceClassModalityUniquenessOfReferencedFile	select\n  distinct file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  dicom_file_type as sop_class,\n  modality,\n  sop_class_uid,\n  series_instance_uid\nfrom\n  file_sop_common natural join\n  dicom_file natural join\n  file_series natural join\n  file_patient natural join\n  ctp_file \nwhere\n  sop_instance_uid = ? and visibility is null	{sop_instance_uid}	{file_id,collection,site,patient_id,sop_class,modality,sop_class_uid,series_instance_uid}	{LinkageChecks,used_in_dose_linkage_check,used_in_plan_linkage_check}	posda_files	Get Information related to uniqueness, modality, sop_class of a file reference by Sop Instance
InsertFileImport	insert into file_import(\n  import_event_id, file_id,  file_name\n) values (\n  currval('import_event_import_event_id_seq'),?, ?\n)\n	{file_id,file_name}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
ImportIntoFileSeries	insert into file_series\n  (file_id, modality, series_instance_uid,\n   series_number, laterality, series_date,\n   series_time, performing_phys, protocol_name,\n   series_description, operators_name, body_part_examined,\n   patient_position, smallest_pixel_value, largest_pixel_value,\n   performed_procedure_step_id, performed_procedure_step_start_date,\n       performed_procedure_step_start_time,\n   performed_procedure_step_desc, performed_procedure_step_comments)\nvalues\n  (?, ?, ?,\n   ?, ?, ?,\n   ?, ?, ?,\n   ?, ?, ?,\n   ?, ?, ?,\n   ?, ?, ?,\n   ?, ?)\n	{file_id,modality,series_instance_uid,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{}	{reimport_queries}	posda_files	Get file path from id
AddNewDataToRoiTable	update roi set\n  max_x = ?,\n  max_y = ?,\n  max_z = ?,\n  min_x = ?,\n  min_y = ?,\n  min_z = ?,\n  roi_interpreted_type = ?,\n  roi_obser_desc = ?,\n  roi_obser_label = ?\nwhere\n  roi_id = ?	{max_x,max_y,max_z,min_x,min_y,min_z,roi_interpreted_type,roi_obser_desc,roi_obser_label,roi_id}	{}	{NotInteractive,used_in_processing_structure_set_linkages}	posda_files	Get the file_storage root for newly created files
FilesByCollectionSiteWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  ctp_file\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  project_name = ?	{collection}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{hide_files}	posda_files	Get List of files for Collection, Site with visibility
RoisInStructureSetByFileId	select file_id, roi_num, roi_name, roi_interpreted_type\nfrom roi natural join file_structure_set where file_id = ?	{file_id}	{file_id,roi_num,roi_name,roi_interpreted_type}	{"Test Case based on Soft-tissue-Sarcoma"}	posda_files	Find All of the Structure Sets In Soft-tissue-Sarcoma
PublicFileBySopInstanceUid	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{file_path}	{public,used_in_simple_phi}	public	List of all Series By Collection, Site on Intake\n
PosdaTotalsWithDateRangeWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
InsertIntoCollectionCodes	insert into collection_codes(collection_name, collection_code)\nvalues (?, ?)	{collection_name,collection_code}	{}	{adding_ctp,mapping_tables,for_scripting}	posda_files	Make an entry into the collection_codes table
MRWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'MR Image Storage' and \n  visibility is null and\n  modality != 'MR'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
GetPublicTagNameAndVrBySignature	select\n  name,\n  vr\nfrom dicom_element\nwhere tag = ?\n	{tag}	{name,vr}	{DispositionReport,NotInteractive,used_in_reconcile_tag_names}	dicom_dd	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
FileTypeAndIsDicom	select file_type, is_dicom_file\nfrom file\nwhere file_id = ?\n	{file_id}	{file_type,is_dicom_file}	{NotInteractive,used_in_background_processing}	posda_files	Get the file_type of a file, by file_id\n
SimplePhiReportAllPublicOnlyMetaQuote	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, '<' || value || '>' as q_value, tag_name as description, 'k' as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and not is_private\ngroup by element_sig_pattern, vr, value, val_length, description\norder by vr, element, val_length	{scan_id}	{element,vr,disp,q_value,description,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
FastCurrentPatientStatii	select \n  patient_id,\n  patient_import_status\nfrom \n  patient_import_status\n	{}	{patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
MakePosdaFileReadyToProcess	update file\n  set ready_to_process = true\nwhere file_id = ?	{file_id}	{}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
WhatHasComeInRecentlyWithSubjectByCollectionLike	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\nand collection like ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to,collection_like}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
NumFilesInSeries	select count(distinct file_id) as num_files from file_series natural join ctp_file where \nseries_instance_uid = ? and visibility is null	{series_instance_uid}	{num_files}	{bills_test}	posda_files	Get number of files in series
ContourInfoByRoiIdAndSopInst	select\n  contour_file_offset,\n  contour_length,\n  contour_digest,\n  num_points,\n  contour_type\nfrom\n file_roi_image_linkage \nwhere\n  linked_sop_instance_uid =? and roi_id = ?\n	{linked_sop_instance_uid,roi_id}	{contour_file_offset,contour_length,contour_digest,num_points,contour_type}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
AreVisibleFilesMarkedAsBadOrUnreviewedInSeriesBad	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  file_patient natural join\n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  series_instance_uid = ?\n  and visibility is null and \n  review_status != 'Good' and\n  review_status != 'PassThrough'\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status	{series_instance_uid}	{collection,site,patient_id,series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
ListOfQueriesPerformed	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\n	{}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
DifferenceReportByEditId	select\n  distinct short_report_file_id, long_report_file_id, count(distinct to_file_path) as num_files\nfrom dicom_edit_compare\nwhere subprocess_invocation_id =?\ngroup by short_report_file_id, long_report_file_id order by short_report_file_id	{subprocess_invocation_id}	{short_report_file_id,long_report_file_id,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetListCollectionsWithNoDefinedCounts	select distinct collection\nfrom submitter s\nwhere collection not in (\n  select collection from collection_count_per_round c\n  where s.collection = c.collection\n)\n	{}	{collection}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Get a list of all collections in backlog with no defined counts
FindNumUnpopulatedPets	select\n  count(distinct file_id) as num_unimported_pets\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)	{}	{num_unimported_pets}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
GetDicomEditCompareFromFiles	select \n  file_id,\n  project_name,\n  visibility\nfrom \n  file natural left join ctp_file\nwhere\n  file_id in (\n    select file_id from file f, dicom_edit_compare dec\n    where f.digest = dec.from_file_digest and subprocess_invocation_id = ?\n  )	{subprocess_invocation_id}	{file_id,project_name,visibility}	{adding_ctp,for_scripting}	posda_files	Get a list of from files from the dicom_edit_compare table for a particular edit instance, with visibility\n\nNB: project_name will be null if there is no ctp_file row (so to hide the file you need to create a row with\n       project_name = 'UNKNOWN', site_name = 'UNKNOWN' and visibility = 'hidden' (if you want to hide the file)
UpdateCountsDb	insert into totals_by_collection_site(\n  count_report_id,\n  collection_name, site_name,\n  num_subjects, num_studies, num_series, num_sops\n) values (\n  currval('count_report_count_report_id_seq'),\n  ?, ?,\n  ?, ?, ?, ?\n)\n	{project_name,site_name,num_subjects,num_studies,num_series,num_files}	\N	{intake,posda_counts}	posda_counts	
GetEditStatusByEditId	select\n  subprocess_invocation_id as id,\n  start_creation_time, end_creation_time - start_creation_time as duration,\n  number_edits_scheduled as to_edit,\n  number_compares_with_diffs as changed,\n  number_compares_without_diffs as not_changed,\n  current_disposition as disposition,\n  dest_dir\nfrom\n  dicom_edit_compare_disposition\nwhere\n  subprocess_invocation_id = ?\norder by start_creation_time desc	{edit_id}	{id,start_creation_time,duration,to_edit,changed,not_changed,disposition,dest_dir}	{adding_ctp,find_patients,series_selection,check_edits,edit_status}	posda_files	Get List of visible patients with CTP data
FilesByScanValueLikeTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value like ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,value,sequence_level,item_number}	{tag_usage,phi_review}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesByTagWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n	{tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
RawFilesByDateRange	select \n  file_type, max(file_id) as max_file_id, min(file_id) as min_file_id, \n  count(*) as num_files, max(size) as largest, min(size) as smallest,\n  sum(size) as total_size, avg(size) as avg_size\nfrom file\nwhere file_id in (\n  select\n    file_id from (\n      select\n        distinct file_id, date_trunc(?, min(import_time)) as load_week\n      from\n        file_import natural join import_event\n      group by file_id\n  ) as foo\n  where\n    load_week >=? and load_week <  ?\n) \ngroup by file_type	{date_type,from,to}	{file_type,max_file_id,min_file_id,num_files,largest,smallest,total_size,avg_size}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
ListOfFirstNFilesByImportEventId	select\n  file_id, root_path || '/' || rel_path as path\nfrom\n  file_storage_root natural join file_location\nwhere file_id in (\n  select file_id from file_import where import_event_id = ?\n  limit ?\n)	{import_event_id,limit}	{file_id,path}	{import_events,QIN-GBM-DSC-MRI-DRO/Barrow}	posda_files	Counts query by Collection, Site\n
FindInconsistentSeriesIgnoringTime	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series\n
AgesStudyDatesSeriesByCollection	select\n  distinct patient_id, study_date, patient_age, series_instance_uid, modality\nfrom\n  file_patient natural join file_series natural join file_study natural join ctp_file\nwhere\n  project_name = ? and visibility is null\n\n	{collection}	{patient_id,study_date,patient_age,series_instance_uid,modality}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
UpdateNonDicomFileTypeSubTypeCollectionSiteSubjectById	update non_dicom_file set\n  file_type = ?,\n  file_sub_type = ?,\n  collection = ?,\n  site = ?,\n  subject = ?\nwhere file_id = ?	{file_type,file_sub_type,collection,site,subject,file_id}	{}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get stuff from non_dicom_file by id\n
WhereSopSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_sop_common natural join ctp_file\n  where\n    sop_instance_uid = ? and visibility is null\n)\n	{sop_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{posda_files,sops,BySopInstance}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
SimplePhiScanStatusInProcess	select\n  phi_scan_instance_id as id,\n  start_time,\n  now() - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned,\n  (((now() - start_time) / num_series_scanned) * (num_series -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series as float)) * 100.0 as percentage,\n  file_query\nfrom\n  phi_scan_instance\nwhere\n   num_series > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,duration,to_scan,scanned,percentage,projected_completion,file_query}	{tag_usage,simple_phi,phi_status,scan_status}	posda_phi_simple	Status of PHI scans\n
InsertIntoPatientMappingIntNoBatch	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  date_shift) values (\n  ?, ?, ?, ?, ?, interval ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,date_shift}	{}	{adding_ctp,mapping_tables,insert_pat_mapping}	posda_files	Make an entry into the patient_mapping table with no batch and interval
DupSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
GetFileIdVisibilityByPatientId	select distinct file_id, visibility\nfrom file_patient natural left join ctp_file\nwhere patient_id = ?	{patient_id}	{file_id,visibility}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
GetFromFileIdGivenToFileId	select file_id as from_file_id from file where digest = (\nselect from_file_digest as digest from dicom_edit_compare where to_file_digest = (select digest as to_file_digest from file where file_id = ?))	{to_file_id}	{from_file_id}	{edit_status}	posda_files	Get List of visible patients with CTP data
UpdateNonDicomFileById	update non_dicom_file set\n  file_type = ?, \n  file_sub_type = ?, \n  collection = ?,\n  site = ?,\n  subject = ?,\n  visibility = ?,\n  date_last_categorized = now()\nwhere \n  file_id = ?	{file_type,file_sub_type,collection,site,subject,visibility,file_id}	{}	{radcomp}	posda_files	Add a filter to a tab
GetSimplePhiScanId	select currval('phi_scan_instance_phi_scan_instance_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple PHI scan
DistinctSopsInCollectionSitePublicWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\norder by sop_instance_uid\n	{collection,site}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops,compare_collection_site}	public	Get Distinct SOPs in Collection with number files\n
HowManyFilesHiddenInCopyFromPublic	select\n  count(*) as num_hidden\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is not null) 	{copy_from_public_id}	{num_hidden}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
QueriesRunning	select \n  datname, pid,\n  now() - backend_start as time_backend_running,\n  now() - query_start as time_query_running, \n  now() - state_change as time_since_state_change,\n  state\nfrom pg_stat_activity\n  order by datname, state	{}	{datname,pid,time_backend_running,time_query_running,time_since_state_change,state}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
FindQueryNameMatching	select\n  distinct name\nfrom\n  queries\nwhere\n  name ~ ?\norder by name	{name_matching}	{name}	{meta,test,hello}	posda_queries	Find all queries with name matching arg
FromFilesVisibilitySummaryByEditId	select\n  distinct visibility, count(distinct file_id) as num_files\nfrom ctp_file\nwhere \n  file_id in (\n    select distinct file_id from file f, dicom_edit_compare dec\n     where f.digest = dec.from_file_digest and \n        subprocess_invocation_id = ?\n  )\ngroup by visibility	{subprocess_invocation_id}	{visibility,num_files}	{adding_ctp,find_patients,series_selection,check_edits}	posda_files	Get List of visible patients with CTP data
GetFilesAndSopsByStudy	select \n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id, \n  root_path || '/' || rel_path as path\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  file_location natural join\n  file_storage_root natural left join\n  ctp_file\nwhere \n  study_instance_uid = ? and\n  visibility is null	{study_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,path}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
GetVisibleFilePathPosdaBySopInst	select\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id in (\n    select file_id from file_sop_common natural join ctp_file\n    where sop_instance_uid = ? and visibility is null\n)	{sop_instance_uid}	{path}	{posda_files,sops,BySopInstance}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
GetDciodvfyWarningUncat	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'Uncategorized'\n  and warning_text = ?	{warning_text}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetDupContourCounts	select \n  distinct file_id, count(*) as num_dup_contours\nfrom\n  file_roi_image_linkage \nwhere \n  contour_digest in (\n  select contour_digest\n  from (\n    select \n      distinct contour_digest, count(*)\n    from\n      file_roi_image_linkage group by contour_digest\n  ) as foo\n  where count > 1\n) group by file_id order by num_dup_contours desc	{}	{file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
StudyHierarchyByStudyUID	select distinct\n  study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  modality,\n  count(distinct sop_instance_uid) as number_of_sops\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_sop_common\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_description,\n  series_instance_uid, series_description, modality	{study_instance_uid}	{study_instance_uid,study_description,series_instance_uid,series_description,modality,number_of_sops}	{by_study,Hierarchy}	posda_files	Show List of Study Descriptions, Series UID, Series Descriptions, and Count of SOPS for a given Study Instance UID
PrivateTagCountReport	select \n  distinct element_signature, vr, count(*) as times_seen,\n  count(distinct value) as num_distinct_values \nfrom\n  element_signature natural join scan_element natural join seen_value\nwhere\n  is_private\ngroup by element_signature, vr\norder by element_signature, vr, times_seen, num_distinct_values;\n	{}	{element_signature,vr,times_seen,num_distinct_values}	{postgres_status,PrivateTagKb}	posda_phi	Get List of all Private Tags ever scanned with occurance and distinct value counts
GetAttachmentFiles	select \n  fl.file_id,\n  root_path || '/' || rel_path as path,\n  ndf.file_type as ext\nfrom\n  non_dicom_file ndf,\n  file_location as fl natural join file_storage_root,\n  non_dicom_attachments a\nwhere\n  a.non_dicom_file_id = ndf.file_id and \n  a.non_dicom_file_id = fl.file_id and\n  ndf.collection = ?	{collection}	{file_id,path,ext}	{radcomp}	posda_files	Add a filter to a tab
GetSsByCollectionSite	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id\nfrom\n  ctp_file natural join file_patient\nwhere file_id in (\n select distinct file_id from file_structure_set\n)\nand project_name = ? and site_name = ? and visibility is null\norder by collection, site, patient_id, file_id\n	{collection,site}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetDciodvfyWarningDubious	select\n  dciodvfy_warning_id as id\nfrom \n  dciodvfy_warning\nwhere\n  warning_type = 'DubiousValue'\n  and warning_tag = ?\n  and warning_desc = ?\n  and warning_value = ?\n  and warning_reason = ?	{warning_tag,warning_desc,warning_value,warning_reason}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_warnings row by warning_text (if present)
GetDciodvfyWarningId	select currval('dciodvfy_warning_dciodvfy_warning_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get id of recently created dciodvfy_warnings row
AllProcessedManifests	select\n  distinct file_id, cm_collection, cm_site, cm_patient_id, sum(cm_num_files) as total_files\nfrom\n  ctp_manifest_row\ngroup by file_id, cm_collection, cm_site, cm_patient_id	{}	{file_id,cm_collection,cm_site,cm_patient_id,total_files}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
DiskSpaceByCollectionSiteSummary	select\n  distinct project_name as collection, site_name as site, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name, site_name\norder by total_bytes\n	{}	{collection,site,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections, sites\n
AllProcessedManifestsByCollectionLikeWithPatientAndQualAndDate	select\n  distinct file_id, import_time as date, cm_collection, collection, cm_site, site, cm_patient_id, qualified,\n  sum(cm_num_files) as total_files\nfrom\n  ctp_manifest_row m natural join file_import natural join import_event, clinical_trial_qualified_patient_id c\nwhere\n  cm_collection like ? and m.cm_patient_id = c.patient_id\ngroup by file_id, date, cm_collection, collection, cm_site, site, cm_patient_id, qualified\norder by date	{collection_like}	{file_id,date,cm_collection,collection,cm_site,site,cm_patient_id,qualified,total_files}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
PopulatePixelInfoInDicomFile	update dicom_file set\n  has_pixel_data = true,\n  pixel_data_digest = ?,\n  pixel_data_offset = ?,\n  pixel_data_length = ?\nwhere file_id = ?	{pixel_data_digest,pixel_data_offset,pixel_data_length,file_id}	{}	{adding_pixels_to_dicom_file}	posda_files	see name
GetDocxToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'docx' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetImportEventId	select  currval('import_event_import_event_id_seq') as id\n	{}	{id}	{NotInteractive,Backlog,used_in_file_import_into_posda}	posda_files	Get posda file id of created import_event row
KnownBlankImagesInSeries	select distinct pixel_digest, count(*) as num_files from (\n  select file_id, digest as pixel_digest\n  from\n    file_image join image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n  where file_id in (select file_id from file_series natural join ctp_file where series_instance_uid = ?)\n)\nas foo group by pixel_digest	{series_instance_uid}	{pixel_digest,num_files}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
InsertIntoPatientMappingNew	insert into patient_mapping(\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  diagnosis_date, baseline_date, uid_root) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,uid_root}	{}	{adding_ctp,mapping_tables,insert_pat_mapping,non_dicom_edit}	posda_files	Make an entry into the patient_mapping table with no batch and interval
GetNonDicomFiles	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n  visibility is null\n	{}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
FindingCtFilesWithImageProblem	select distinct file_id, root_path || '/' || rel_path as path\nfrom (\n  select file_id, image_id \n  from file natural left join file_image\n  where file_id in (\n    select\n       distinct file_id from file_import natural join import_event\n       natural join ctp_file natural join file_series\n    where import_time > '2018-09-17' and visibility is null and\n      project_name = 'Exceptional-Responders' and modality = 'CT'\n  )\n) as foo natural join file_location natural join file_storage_root\nwhere image_id is null\n	{}	{file_id,path}	{Exceptional-Responders_NCI_Oct2018_curation}	posda_files	Find files which have unique_pixel_data_id but no image_id, then find out where the hell they came from
GetValueForTagAllScans	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ?\norder by value	{tag}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
GetPosdaFileStorageRoots	select\n file_storage_root_id as id, root_path as root, current, storage_class\nfrom\n  file_storage_root\n	{}	{id,root,current,storage_class}	{NotInteractive,Backlog}	posda_files	Get Posda File Storage Roots
CreateEquivalenceClassNew	insert into image_equivalence_class(\n  series_instance_uid,\n  equivalence_class_number,\n  visual_review_instance_id,\n  processing_status\n) values (\n  ?, ?, ?, 'Preparing'\n)\n	{series_instance_uid,equivalence_class_number,visual_review_instance_id}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
FilesByScanWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file, value\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
AbreviatedCountsByCollectionLike	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, \n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n  ) and project_name like ? and visibility is null\ngroup by\n  collection, site, patient_id\norder by\n  collection, site, patient_id\n	{collection_like}	{collection,site,patient_id,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
GetElementByPrivateDispositionSimple	select\n  element_sig_pattern as element_signature, private_disposition as disposition\nfrom\n  element_seen\nwhere\n  is_private and private_disposition = ?\n	{private_disposition}	{element_signature,disposition}	{NotInteractive,ElementDisposition}	posda_phi_simple	Get List of Private Elements By Disposition
GetSubmissionFormsToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'docx' and file_sub_type = 'radcomp data submittal form' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
GetSeriesSignature	select distinct\n  dicom_file_type, modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ?\ngroup by dicom_file_type, signature\n	{collection}	{dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series Signatures by Collection\n
RoundInfoLastCompleteRound	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere round_id in (\n  select max(round_id) as round_id from round where round_end is not null\n)\norder by round_id, collection	{}	{round_id,collection,round_created,round_start,round_end,round_aborted,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
StructVolByFileId	select\n  distinct sop_instance,\n  sop_class,\n  study_instance_uid,\n  series_instance_uid,\n  for_uid\nfrom\n  file_structure_set natural join\n  ss_for natural join\n  ss_volume\nwhere file_id = ?	{file_id}	{sop_instance,sop_class,study_instance_uid,series_instance_uid,for_uid}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
ActivityStuffMoreWithEmailByUser	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere invoking_user = ? and background_subprocess_report.name = 'Email'\norder by subprocess_invocation_id desc\n	{user}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
FilesByCollectionSitePatientVisibility	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ? and visibility = ?\norder by collection, site, patient_id\n\n	{collection,site,patient_id,visibility}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
ListOfQueriesPerformedByDate	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere query_start_time > ? and query_end_time < ?\n	{from,to}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats_by_date}	posda_queries	Get a list of collections and sites\n
GetScanEventEventId	select currval('scan_event_scan_event_id_seq') as id\n	{}	{num_series_scanned,id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of scan_event_id
DistinctSeriesByCollectionSite	select distinct series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_series natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetSimpleValueSeenId	select currval('value_seen_value_seen_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get index of newly created value_seen
ToFileWithVisibilityBySopFromDicomEditCompare	select \n  sop_instance_uid,\n  file_id as to_file_id,\n  visibility as to_file_visibility\nfrom\n  ctp_file natural join file natural join file_sop_common,\n  dicom_edit_compare\nwhere\n  to_file_digest = file.digest and\n  subprocess_invocation_id = ?\norder by sop_instance_uid	{subprocess_invocation_id}	{sop_instance_uid,to_file_id,to_file_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
ReviewEditsBySite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for site
ImportEventsWithType	select\n  distinct import_event_id, import_time,  import_type, count(distinct file_id) as num_files\nfrom\n  import_event natural join file_import\nwhere\n  import_type = 'multi file import' and \n  import_time > ? and import_time < ?\ngroup by import_event_id, import_time, import_type	{from,to}	{import_event_id,import_time,import_type,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
RoundStatsWithCollectionSiteForDateRange	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
SeriesSendEventsByReason	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{series_instance_uid,send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
SlopeInterceptByPixelType	select \n  distinct slope, intercept, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_slope_intercept natural join slope_intercept\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by slope, intercept\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{slope,intercept,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
AddPatientAge	update file_patient set\n  patient_age = ?\nwhere file_id = ?	{age,file_id}	{}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
CreateSubprocessInvocationSpreadsheet	insert into subprocess_invocation(\n from_spreadsheet, from_button,\n spreadsheet_uploaded_id, command_line, invoking_user, when_invoked\n) values (\n  true, false, ?, ?, ?, now()\n)	{spreadsheet_uploaded_id,command_line,invoking_user}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_invocation table\n\nUsed when invoking a spreadsheet operation from a spreadsheet
CreateDciodvfyWarning	insert into dciodvfy_warning(\n  warning_type,\n  warning_tag,\n  warning_desc,\n  warning_iod,\n  warning_comment,\n  warning_value,\n  warning_reason,\n  warning_index,\n  warning_text\n) values (\n  ?, ?, ?, ?,\n  ?, ?, ?, ?,\n  ?\n)	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index,warning_text}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_warnings row
GetQueryArgs	select args from queries where name = ?	{name}	{args}	{bills_test,posda_db_populate}	posda_queries	Add a filter to a tab
GetSeriesListByDciodvyScanInstance	select distinct(unit_uid) as series_instance_uid from dciodvfy_unit_scan natural join dciodvfy_unit_scan_warning  where dciodvfy_scan_instance_id = ? union \nselect distinct(unit_uid) as series_instance_uid from dciodvfy_unit_scan natural join dciodvfy_unit_scan_error  where dciodvfy_scan_instance_id = ?\n	{dciodvfy_scan_instance_id,repeat_scan_instance_id}	{series_instance_uid}	{tag_usage,dciodvfy}	posda_phi_simple	Show all the dciodvfy scans
GetCtInfoBySeries	select \n  distinct \n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot\nfrom file_ct_image natural join file_patient natural join file_series natural join ctp_file \nwhere series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,table_feed_per_rot}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
SubprocessesByUser	select\n  distinct subprocess_invocation_id, \n  when_script_started, when_background_entered, when_script_ended, user_to_notify, \n  button_name, operation_name, count(distinct background_subprocess_report_id) as num_reports \nfrom\n  subprocess_invocation natural left join background_subprocess natural left join\n  background_subprocess_report\nwhere invoking_user = ?\ngroup by\n  subprocess_invocation_id, when_script_started, when_background_entered,\n  when_script_ended, user_to_notify, button_name, operation_name\norder by subprocess_invocation_id desc	{invoking_user}	{subprocess_invocation_id,when_script_started,when_background_entered,when_script_ended,user_to_notify,button_name,operation_name,num_reports}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
UpdateSeriesScanned	update scan_event\nset num_series_scanned = ?\nwhere scan_event_id = ?	{num_series_scanned,scan_event_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scanned in scan event\n
GetToFileIdGivenFromFileId	select file_id as to_file_id from file where digest in (\nselect to_file_digest as digest from dicom_edit_compare where from_file_digest in\n(select digest as from_file_digest from file where file_id = ?))	{from_file_id}	{to_file_id}	{edit_status}	posda_files	Get List of visible patients with CTP data
ListOfDciodvfyWarningsWithCounts	select distinct warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index, count(distinct dciodvfy_unit_scan_id)  as num_scan_units from dciodvfy_warning\nnatural join dciodvfy_unit_scan_error group by \nwarning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index\norder by warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index	{}	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index,num_scan_units}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy warnings in DB
GetPatientIdsByDateRangeLikeCollection	select \n  distinct patient_id, import_type\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) \n  join file_import using(file_id)\n  join import_event using(import_event_id)\nwhere \n  collection like ? and import_time > ? and import_time < ? and import_type not like 'script%'	{collection_like,from,to}	{patient_id,import_type}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
VisibilityChangesBySeries	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, series_instance_uid, count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and site_name = ? and\n  series_instance_uid = ?\ngroup by \n  collection, site, patient_id, user_name, prior_visibility, new_visibility,\n  time, reason_for, series_instance_uid\norder by time, collection, site, patient_id, series_instance_uid\n	{collection,site,series_instance_uid}	{collection,site,patient_id,user_name,prior_visibility,new_visibility,time,reason_for,series_instance_uid,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
DistinctSeriesByCollectionLikePublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project like ?\ngroup by series_instance_uid, modality	{collection_like}	{series_instance_uid,modality,num_images}	{by_collection,find_series,public}	public	Get Series in A Collection\n
FilesByModalityByCollectionSite	select\n  distinct patient_id, modality, series_instance_uid, sop_instance_uid, root_path || '/' || rel_path as path\nfrom\n  file_patient natural join file_series natural join file_sop_common natural join ctp_file\n  natural join file_location natural join file_storage_root\nwhere\n  modality = ? and\n  project_name = ? and \n  site_name = ? and\n  visibility is null	{modality,project_name,site_name}	{patient_id,modality,series_instance_uid,sop_instance_uid,path}	{FindSubjects,intake,FindFiles}	posda_files	Find All Files with given modality in Collection, Site
PrivsteTagsDispositionsAndValuesByScanId	select \n  distinct element_seen_id, element_sig_pattern, tag_name, private_disposition, value\nfrom\n  element_value_occurance natural join element_seen natural join value_seen \nwhere\n  phi_scan_instance_id = ? and element_sig_pattern like '%"%'\norder by element_sig_pattern;\n	{phi_scan_instance_id}	{element_seen_id,element_sig_pattern,tag_name,private_disposition,value}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
PopulateFilePtImageRow	insert into file_pt_image(\n  file_id,\n  pti_trigger_time,\n  pti_frame_time,\n  pti_intervals_acquired,\n  pti_intervals_rejected,\n  pti_reconstruction_diameter,\n  pti_gantry_detector_tilt,\n  pti_table_height,\n  pti_fov_shape,\n  pti_fov_dimensions,\n  pti_collimator_type,\n  pti_convoution_kernal,\n  pti_actual_frame_duration,\n  pti_energy_range_lower_limit,\n  pti_energy_range_upper_limit,\n  pti_radiopharmaceutical,\n  pti_radiopharmaceutical_volume,\n  pti_radiopharmaceutical_start_time,\n  pti_radiopharmaceutical_stop_time,\n  pti_radionuclide_total_dose,\n  pti_radionuclide_half_life,\n  pti_radionuclide_positron_fraction,\n  pti_number_of_slices,\n  pti_number_of_time_slices,\n  pti_type_of_detector_motion,\n  pti_image_id,\n  pti_series_type,\n  pti_units,\n  pti_counts_source,\n  pti_reprojection_method,\n  pti_randoms_correction_method,\n  pti_attenuation_correction_method,\n  pti_decay_correction,\n  pti_reconstruction_method,\n  pti_detector_lines_of_response_used,\n  pti_scatter_correction_method,\n  pti_axial_mash,\n  pti_transverse_mash,\n  pti_coincidence_window_width,\n  pti_secondary_counts_type,\n  pti_frame_reference_time,\n  pti_primary_counts_accumulated,\n  pti_secondary_counts_accumulated,\n  pti_slice_sensitivity_factor,\n  pti_decay_factor,\n  pti_dose_calibration_factor,\n  pti_scatter_fraction_factor,\n  pti_dead_time_factor,\n  pti_image_index\n) values (\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n  ?, ?, ?, ?, ?, ?, ?, ?, ?\n)	{file_id,pti_trigger_time,pti_frame_time,pti_intervals_acquired,pti_intervals_rejected,pti_reconstruction_diameter,pti_gantry_detector_tilt,pti_table_height,pti_fov_shape,pti_fov_dimensions,pti_collimator_type,pti_convoution_kernal,pti_actual_frame_duration,pti_energy_range_lower_limit,pti_energy_range_upper_limit,pti_radiopharmaceutical,pti_radiopharmaceutical_volume,pti_radiopharmaceutical_start_time,pti_radiopharmaceutical_stop_time,pti_radionuclide_total_dose,pti_radionuclide_half_life,pti_radionuclide_positron_fraction,pti_number_of_slices,pti_number_of_time_slices,pti_type_of_detector_motion,pti_image_id,pti_series_type,pti_units,pti_counts_source,pti_reprojection_method,pti_randoms_correction_method,pti_attenuation_correction_method,pti_decay_correction,pti_reconstruction_method,pti_detector_lines_of_response_used,pti_scatter_correction_method,pti_axial_mash,pti_transverse_mash,pti_coincidence_window_width,pti_secondary_counts_type,pti_frame_reference_time,pti_primary_counts_accumulated,pti_secondary_counts_accumulated,pti_slice_sensitivity_factor,pti_decay_factor,pti_dose_calibration_factor,pti_scatter_fraction_factor,pti_dead_time_factor,pti_image_index}	{}	{populate_posda_files,bills_test}	posda_files	Get Series in A Collection\n
GetQuery	select \n query\nfrom pg_stat_activity\nwhere pid = ?	{pid}	{query}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
GetPatientMappingByCollectionSiteSimple	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  diagnosis_date,\n  baseline_date,\n  date_shift,\n  baseline_date - diagnosis_date + interval '1 day' as computed_shift\nfrom\n  patient_mapping\nwhere\n  collection_name = ?\n  and site_name = ?\n  	{collection_name,site_name}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,diagnosis_date,baseline_date,date_shift,computed_shift}	{adding_ctp,for_scripting,patient_mapping}	posda_files	Retrieve entries from patient_mapping table
VisibilityChangeEventsByCollectionForAllFiles	select\n  distinct project_name as collection, \n  site_name as site,\n  user_name, \n  date_trunc('hour',time_of_change) as time, \n  reason_for, count(distinct file_id)\nfrom\n  file_visibility_change natural join\n  ctp_file\nwhere\n  project_name = ?\ngroup by collection, site, user_name, time, reason_for\norder by time, collection, site	{collection}	{collection,site,user_name,time,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
ListOpenActivities	select\n  distinct activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  count(distinct user_inbox_content_id) as num_items\nfrom\n  activity natural left join activity_inbox_content\nwhere when_closed is null\ngroup by activity_id, brief_description, when_created, who_created\norder by activity_id desc	{}	{activity_id,brief_description,when_created,who_created,num_items}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
GetInsertedSendId	select currval('dicom_send_event_dicom_send_event_id_seq') as id\n	{}	{id}	{NotInteractive,SeriesSendEvent}	posda_files	Get dicom_send_event_id after creation\nFor use in scripts.\nNot meant for interactive use\n
LinkEmailToActivity	insert into activity_inbox_content(\n activity_id, user_inbox_content_id\n) values (\n  ?, ?\n)	{activity_id,user_inbox_content_id}	{}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
GetNonDicomEditCompareFromFiles	select \n  file_id,\n  collection,\n  visibility\nfrom \n  file join non_dicom_file using(file_id)\nwhere\n  file_id in (\n    select file_id from file f, non_dicom_edit_compare ndec\n    where f.digest = ndec.from_file_digest and subprocess_invocation_id = ?\n  )	{subprocess_invocation_id}	{file_id,collection,visibility}	{adding_ctp,for_scripting,non_dicom_import}	posda_files	Get a list of from files from the non_dicom_edit_compare table for a particular edit instance, with visibility\n\nNB: collection will be null if there is no non_dicom_file row.  This shouldn't ever happen.  ever!  abort and investigate\n       visibility, on the other hand, should always be null.  
IncrementEditsDone	update dicom_edit_event\n  set edits_done = edits_done + 1\nwhere\n  dicom_edit_event_id = ?	{dicom_edit_event_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Increment edits done in dicom_edit_event table\nFor use in scripts\nNot really intended for interactive use\n
AllSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
DatesOfUploadByCollectionSiteVisible	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event natural join file_sop_common\n  natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
SeriesWithDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FinalizeSimpleSeriesScan	update series_scan_instance set\n  num_files = ?,\n  end_time = now()\nwhere\n  series_scan_instance_id = ?	{num_files,id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Finalize Series Scan
InsertFilePosda	insert into file(\n  digest, size, processing_priority, ready_to_process\n) values ( ?, ?, 1, 'false')	{digest,size}	{}	{NotInteractive,Backlog,Transaction,used_in_file_import_into_posda}	posda_files	Lock the file table in posda_files
UpdateComparePublicToPosdaInstance	update compare_public_to_posda_instance set\n  number_compares_completed = ?,\n  num_failed = ?,\n  status_of_compare = 'Comparisons In Progress',\n  last_updated = now()\nwhere\n  compare_public_to_posda_instance_id = ?\n	{number_compares_complete,num_failed,compare_public_to_posda_instance_id}	{}	{adding_ctp,for_scripting}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
FindInconsistentSeriesIgnoringTimeAll	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series\n
DupSopsByImportEvent	select sop_instance_uid, num_files from (\n  select\n    distinct sop_instance_uid, count(distinct file_id) as num_files\n  from (\n    select distinct sop_instance_uid, file_id, visibility\n    from file_sop_common natural left join ctp_file\n    where file_id in (\n      select\n        distinct file_id from file_import where import_event_id in (select import_event_id from (\n          select\n            distinct import_event_id, import_time,  import_type, count(distinct file_id) as num_files\n          from\n            import_event natural join file_import natural join file_patient\n          where\n            import_event_id = ?\n           group by import_event_id, import_time, import_type\n         ) as foo\n      )\n    )\n  ) as foo where visibility is null\n  group by sop_instance_uid\n) as foo\nwhere num_files > 1\n	{import_event_id}	{sop_instance_uid,num_files}	{adding_ctp,find_patients,no_ctp_patients,import_event}	posda_files	Get Series in A Collection\n
GetCopyInformation	select\n  status_of_copy,\n  pid_of_running_process\nfrom\n  copy_from_public\nwhere copy_from_public_id = ?	{copy_from_public_id}	{status_of_copy,pid_of_running_process}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
patient_id_and_collection_by_like_collection	select distinct project_name as collection, patient_id from file_patient natural join ctp_file where project_name like ? and visibility is null	{like_collection}	{collection,patient_id}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
UpdateNameChain	update element_signature set \n  name_chain = ?\nwhere\n  element_signature = ? and\n  vr = ?\n	{name_chain,element_signature,vr}	{}	{NotInteractive,Update,ElementDisposition}	posda_phi	Update Element Disposition\nFor use in scripts\nNot really intended for interactive use\n
FindInconsistentSeriesIgnoringTimeCollectionSite	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and site_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection,site}	{series_instance_uid}	{consistency,find_series,series_consistency}	posda_files	Find Inconsistent Series by Collection Site\n
ListVisualReviewInstances	select\n  visual_review_instance_id, visual_review_reason,\n  visual_review_scheduler,\n  visual_review_num_series,\n  when_visual_review_scheduled, \n  visual_review_num_series_done,\n  visual_review_num_equiv_class,\n  when_visual_review_sched_complete\nfrom visual_review_instance	{}	{visual_review_instance_id,visual_review_reason,visual_review_scheduler,visual_review_num_series,when_visual_review_scheduled,visual_review_num_series_done,visual_review_num_equiv_class,when_visual_review_sched_complete}	{signature,phi_review,visual_review,visual_review_new_workflow}	posda_files	Get a list of files which are hidden by series id and visual review id
FileIdPathTimesLoadedCountsBySopInstance	select\n  distinct file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common where sop_instance_uid = ?\ngroup by file_id, path\norder by first_loaded	{sop_instance_uid}	{file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get file path from id
GetStructureSetsByActivityTimepoint	select \n  file_id, root_path || '/' || rel_path as path, patient_id\nfrom\n  file_structure_set natural join activity_timepoint_file natural join file_location natural join file_storage_root\n  natural join file_patient\nwhere\n  activity_timepoint_id = ?	{activity_timepoint_id}	{file_id,path,patient_id}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get List of file_ids for structure sets in an activity timepoint\n
RoundSummary2	select\n  round_id,\n  round_created,\n  round_start,  \n  round_end,\n  round_aborted,\n  wait_count,\n  process_count\nfrom\n  round\norder by round_id	{}	{round_id,round_created,round_start,round_end,round_aborted,wait_count,process_count}	{NotInteractive,Backlog,"Backlog Monitor"}	posda_backlog	Summary of rounds
ActivityStuffByUser	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, user_to_notify, button_name,\n  operation_name, count(distinct background_subprocess_report_id) as num_reports\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere invoking_user = ?\ngroup by\n  subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  activity_id, when_script_started, when_background_entered,\n  when_script_ended, user_to_notify, button_name, operation_name\norder by subprocess_invocation_id desc	{user}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,activity_id,when_script_started,when_background_entered,when_script_ended,user_to_notify,button_name,operation_name,num_reports}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
CreateDicomEditCompareDisposition	insert into dicom_edit_compare_disposition(\n  subprocess_invocation_id, start_creation_time, current_disposition, process_pid, dest_dir\n)values (\n  ?, now(), 'Starting Up', ?, ?\n)	{subprocess_invocation_id,process_pid,dest_dir}	{}	{adding_ctp,for_scripting}	posda_files	Create an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
ListOfDciodvfyErrors	select \n  distinct error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index,\n  count(distinct dciodvfy_unit_scan_id)  as num_scan_units \nfrom \n  dciodvfy_error\n  natural join dciodvfy_unit_scan_error\ngroup by \n  error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index\norder by\n  error_type,\n  error_tag, \n  error_value,\n  error_subtype,\n  error_module, \n  error_reason,\n  error_index	{}	{error_type,error_tag,error_value,error_subtype,error_module,error_reason,error_index,num_scan_units}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy errors in DB
ReviewEditsByCollectionSite	select\n  distinct project_name,\n  site_name,\n  series_instance_uid, \n  new_visibility, \n  reason_for,\n  min(time_of_change) as earliest,\n  max(time_of_change) as latest,\n  count(*) as num_files\nfrom\n  file_visibility_change natural join\n  ctp_file natural join\n  file_series\nwhere \n  project_name = ? and site_name = ?\ngroup by \n  project_name, site_name, series_instance_uid, new_visibility, reason_for	{collection,site}	{project_name,site_name,series_instance_uid,new_visibility,reason_for,earliest,latest,num_files}	{Hierarchy,review_visibility_changes}	posda_files	Show all file visibility changes by series for collection, site
SeriesWithMultipleSopsByVisualReviewId	select \n  distinct series_instance_uid, dicom_file_type, modality, visibility, count(distinct file_id) as num_files\nfrom file_series natural join dicom_file natural join ctp_file\nwhere series_instance_uid in (\n  select series_instance_uid from (\n    select\n      distinct series_instance_uid, count(distinct dicom_file_type) as num_types, \n      count(distinct modality) as num_modalities \n    from (\n      select \n        distinct series_instance_uid, dicom_file_type, modality\n      from \n        file_series natural join dicom_file natural join image_equivalence_class\n      where visual_review_instance_id = ?\n     ) as foo\n    group by series_instance_uid\n  ) as foo \n  where num_types > 1 or num_modalities > 1\n) group by series_instance_uid, dicom_file_type, modality, visibility order by series_instance_uid	{visual_review_instance_id}	{series_instance_uid,dicom_file_type,modality,visibility,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetReferencedButUnknownPlanSops	select\n  sop_instance_uid, \n  rt_dose_referenced_plan_uid as plan_sop_instance_uid \nfrom \n  rt_dose d natural join file_dose join file_sop_common using(file_id)\nwhere\n  not exists (\n  select\n    sop_instance_uid \n  from\n    file_sop_common fsc\n  where\n    d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n)	{}	{sop_instance_uid,plan_sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of doses which reference unknown SOPs\n\n
ListOfDciodvfyWarnings	select distinct warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index\n from dciodvfy_warning\norder by warning_type, warning_tag, warning_desc, warning_iod, warning_comment, warning_value, warning_reason, warning_index	{}	{warning_type,warning_tag,warning_desc,warning_iod,warning_comment,warning_value,warning_reason,warning_index}	{tag_usage,dciodvfy}	posda_phi_simple	All dciodvfy warnings in DB
AddWaitCount	update round\n  set wait_count = ?\nwhere\n  round_id = ?\n	{wait_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set wait_count in round
SubprocessInvocationByUser	select \n  distinct subprocess_invocation_id, \n  background_subprocess_id, spreadsheet_uploaded_id, query_invoked_by_dbif_id,\n  button_name, invoking_user, when_invoked, operation_name,\n  max(line_number) as num_lines\nfrom \n  subprocess_invocation natural left join subprocess_lines\n  natural left join background_subprocess\nwhere \n  invoking_user = ?\ngroup by \n  subprocess_invocation_id, \n  background_subprocess_id, spreadsheet_uploaded_id, query_invoked_by_dbif_id,\n  button_name, invoking_user, when_invoked, operation_name\norder by when_invoked desc	{invoking_user}	{subprocess_invocation_id,background_subprocess_id,spreadsheet_uploaded_id,query_invoked_by_dbif_id,button_name,invoking_user,when_invoked,operation_name,num_lines}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
DistinctValuesByTagWithFileCount	select distinct element_signature, value, count(*) as num_files\nfrom (\nselect\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n) as foo\ngroup by element_signature, value\n	{tag}	{element_signature,value,num_files}	{tag_usage}	posda_phi	Distinct values for a tag with file count\n
DatesOfUpload	select \n  distinct project_name as collection, site_name as site,\n  date_trunc as date, count(*) as num_uploads from (\n   select \n    project_name,\n    site_name,\n    date_trunc('day', import_time),\n    file_id\n  from file_import natural join import_event\n    natural join ctp_file \n) as foo\ngroup by project_name, site_name, date\norder by date, project_name, site_name	{}	{collection,site,date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
GetSimilarDupContourCounts	select\n  distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id\nfrom\n   ctp_file\n   natural join file_patient\n   natural join file_series\n   natural join file_sop_common\nwhere file_id in (\n  select distinct file_id from (\n    select \n      distinct file_id, count(*) as num_dup_contours\n    from\n      file_roi_image_linkage \n    where \n      contour_digest in (\n      select contour_digest\n     from (\n        select \n          distinct contour_digest, count(*)\n        from\n          file_roi_image_linkage group by contour_digest\n     ) as foo\n      where count > 1\n    ) group by file_id order by num_dup_contours desc\n  ) as foo\n  where num_dup_contours = ?\n)\n	{num_dup_contours}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
VisualReviewStatusDetails	select distinct image_equivalence_class_id, series_instance_uid, processing_status, review_status, visibility, count(distinct file_id) as num_files\nfrom image_equivalence_class natural join image_equivalence_class_input_image natural join dicom_file natural join ctp_file\nwhere visual_review_instance_id = ? and dicom_file_type = ? and\n  processing_status = ? and (review_status is null or review_status = ?) group by image_equivalence_class_id, series_instance_uid, processing_status, review_status, visibility;\n	{visual_review_instance_id,dicom_file_type,processing_status,review_status}	{image_equivalence_class_id,series_instance_uid,processing_status,review_status,visibility,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
Sops In Public By Series	select \n  tdp.project as collection, dp_site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid \nfrom\n  general_image i, trial_data_provenance tdp\nwhere\n  tdp.trial_dp_pk_id = i.trial_dp_pk_id and series_instance_uid = ?\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{"Reconcile Public and Posda for CPTAC"}	public	Get the list of files by sop, excluding base series
RowsInDicomFileWithNoPixelInfo	select \n  file_id, root_path || '/' || rel_path as path\nfrom dicom_file natural join file_location natural join file_storage_root\nwhere has_pixel_data is null limit ?	{num_rows}	{file_id,path}	{adding_pixels_to_dicom_file}	posda_files	List of files (id, path) which are dicom_files with undefined pixel info
AllSeenValuesByElementVr	select distinct value \nfrom element_value_occurance natural join value_seen natural join element_seen\nwhere element_sig_pattern = ? and vr = ? order by value	{element_sig_pattern,vr}	{value}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Get the relevant features of an element_signature in posda_phi_simple schema
TagsSeen	select\n  element_signature, vr, is_private, private_disposition, name_chain\nfrom\n  element_signature order by element_signature	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{by_collection,find_series,compare_collection_site,search_series,edit_files,phi_maint}	posda_phi	Get all the data from tags_seen in posda_phi database\n
CountsByCollectionSiteSubjectDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,subject,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetDciodvfyScanDesc	select \n  type_of_unit,\n  description_of_scan,\n  number_units,\n  scanned_so_far,\n  start_time,\n  end_time\nfrom \n  dciodvfy_scan_instance\nwhere dciodvfy_scan_instance_id = ?\n	{scan_id}	{type_of_unit,description_of_scan,number_units,scanned_so_far,start_time,end_time}	{tag_usage,dciodvfy}	posda_phi_simple	Get info about a dciodvfy scan
WhereFileSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural left join\n  ctp_file\nwhere file_id = ? and visibility is null	{file_id}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{posda_files,sops,BySopInstance,by_file}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which SOP resides\n
AllValuesByElementSigIdAndScanId	select\n  distinct value\nfrom\n  seen_value natural join scan_element\nwhere\n  element_signature_id = ? and series_scan_id in (\n  select\n    series_scan_id \n  from \n    series_scan\n  where \n    scan_event_id = ?\n  )\norder by value\n	{element_signature_id,scan_id}	{value}	{tag_usage}	posda_phi	List of values seen in scan with specified tag\n
MarkFileAsInPosda	update request\nset\n  file_in_posda = true,\n  time_entered = now(),\n  posda_file_id = ?\nwhere\n  request_id = ?\n\n	{posda_file_id,request_id}	{}	{NotInteractive,Backlog}	posda_backlog	Update a request status to indicate file in Posda
ListOfPrivateElementsWithDispositionsByScanId	select\n  distinct element_signature, vr , private_disposition as disposition,\n  element_signature_id, name_chain\nfrom\n  element_signature natural join scan_element natural join series_scan\nwhere\n  is_private and scan_event_id = ?\norder by element_signature\n	{scan_id}	{element_signature,vr,disposition,element_signature_id,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
DistinctSopsInCollection	select distinct sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file\n  where\n    project_name = ? and visibility is null\n)\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
PatientStudySeriesFileHierarchyByCollectionExcludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description not like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
GetAllQualifiedCTQPByLikeCollectionWithFileCountAndLoadTimesAndStudyDateOnlySinceDate	select * from (select \n  collection, site, patient_id, qualified, study_date,\n  count(distinct file_id) as num_files, count (distinct sop_instance_uid) as num_sops,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) \n  join file_study using(file_id) join file_import using(file_id)\n  join file_sop_common using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ?\ngroup by collection, site, patient_id, qualified, study_date) as foo where earliest_day >= ? 	{collection_like,from}	{collection,site,patient_id,qualified,num_files,num_sops,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
PatientStudySeriesFileHierarchyByCollectionIncludingSeriesByDescription	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  root_path || '/' || rel_path as path\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\n  natural join file_sop_common natural join file_location\n  natural join file_storage_root\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,exclude_series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid,path}	{Hierarchy}	posda_files	Construct list of files in a collection in a Patient, Study, Series Hierarchy excluding series by series_description
DuplicateSOPInstanceUIDsGlobalWithHidden	select distinct collection, site, patient_id, count(*)\nfrom (\nselect \n  distinct collection, site, patient_id, sop_instance_uid, count(*)\n  as dups\nfrom (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\ngroup by collection, site, patient_id, sop_instance_uid\n) as foo where dups > 1\ngroup by collection, site, patient_id\norder by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{receive_reports}	posda_files	Return a report of duplicate SOP Instance UIDs ignoring visibility\n
FindQueryByTag	select\n  distinct name from (\n  select name, unnest(tags) as tag\n  from queries) as foo\nwhere\n  tag = ?	{tag_name}	{name}	{meta,test,hello}	posda_queries	Find all queries matching tag
DistinctVisibleFileReportBySeries	select distinct\n\tcoalesce(project_name, 'UNKNOWN') as collection,\n\tcoalesce(site_name, 'UNKNOWN') as site,\n\tpatient_id,\n\tstudy_instance_uid,\n\tseries_instance_uid,\n\tsop_instance_uid,\n\tdicom_file_type,\n\tmodality,\n\tfile_id\nfrom\n\tfile_patient\n\tnatural join file_study\n\tnatural join file_series\n\tnatural join file_sop_common\n\tnatural join dicom_file\n\tnatural left join ctp_file\nwhere\n\tseries_instance_uid = ?\n\tand visibility is null\norder by series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,dicom_file_type,modality,file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
SubjectsWithDupSopsWithStudySeries	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, study_instance_uid, series_instance_uid\n      from\n        file_sop_common natural join file_series natural join file_study\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with conflicting study or series
GetScanEventId	select currval('series_scan_series_scan_id_seq') as id	{}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	List of values seen in scan by VR (with count of elements)\n
GetCountSsVolumeBySeriesUid	select\n  distinct sop_instance_uid, count(distinct sop_instance_link) as num_links \nfrom (\n  select \n    sop_instance_uid, for_uid, study_instance_uid, series_instance_uid,\n    sop_class as sop_class_uid, sop_instance as sop_instance_link\n  from\n    ss_for natural join ss_volume natural join\n    file_structure_set join file_sop_common using (file_id)\n  where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid in (\n         select distinct sop_instance_uid from file_sop_common natural join file_series\n         where series_instance_uid = ?\n     )\n  )\n) as foo \ngroup by sop_instance_uid	{series_instance_uid}	{sop_instance_uid,num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
ActivityTimepointsForActivity	select\n  distinct activity_id, a.when_created as activity_created,\n  brief_description as activity_description, activity_timepoint_id,\n  t.when_created as timepoint_created, \n  comment, creating_user, count(distinct file_id) as num_files\nfrom\n  activity a join activity_timepoint t using(activity_id) join \n  activity_timepoint_file using(activity_timepoint_id)\nwhere\n  activity_id = ?\ngroup by\n  activity_id, activity_created, activity_description, activity_timepoint_id,\n  timepoint_created, comment, creating_user\norder by activity_timepoint_id desc	{activity_id}	{activity_id,activity_created,activity_description,activity_timepoint_id,timepoint_created,comment,creating_user,num_files}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_selection,activity_timepoints}	posda_queries	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
SelectCtInfoSummaryByCollection	select \n  distinct \n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot,\n  count(*) as num_files\nfrom file_ct_image natural join file_patient natural join file_series natural join ctp_file \nwhere project_name = ? and visibility is null\ngroup by\n  collection,\n  site,\n  patient_id,\n  series_instance_uid,\n  kvp,\n  scan_options,\n  data_collection_diameter,\n  reconstruction_diameter,\n  dist_source_to_detect,\n  dist_source_to_pat,\n  gantry_tilt,\n  rotation_dir,\n  exposure_time,\n  filter_type,\n  generator_power, \n  convolution_kernal,\n  table_feed_per_rot\norder by patient_id	{collection}	{collection,site,patient_id,series_instance_uid,kvp,scan_options,data_collection_diameter,reconstruction_diameter,dist_source_to_detect,dist_source_to_pat,gantry_tilt,rotation_dir,exposure_time,filter_type,generator_power,convolution_kernal,table_feed_per_rot}	{populate_posda_files,bills_test}	posda_files	Gets count of all files which are PET's which haven't been imported into file_pt_image yet.\n\n
EquivalenceClassStatusSummaryByCollection	select\n  distinct project_name as collection,\n  processing_status,\n  review_status, count(distinct image_equivalence_class_id)\nfrom\n  image_equivalence_class join file_series using(series_instance_uid) join ctp_file using(file_id)\nwhere project_name = ?\ngroup by collection, processing_status, review_status	{collection}	{collection,processing_status,review_status,count}	{find_series,equivalence_classes,consistency,visual_review}	posda_files	Find Series with more than n equivalence class
PatientReport	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description,\n  count(distinct file_id) as num_files,\n  min(import_time) as earliest_upload,\n  max(import_time) as latest_upload,\n  count(distinct import_event_id) as num_uploads\nfrom\n  file_patient natural join file_study natural join\n  file_series natural join ctp_file natural join\n  file_import natural join import_event\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ?\n  and visibility is null\ngroup by \n  collection, site,\n  patient_id, study_instance_uid, study_description,\n  series_instance_uid, series_description\norder by\n  study_instance_uid, series_instance_uid, num_files	{collection,site,patient_id}	{collection,site,patient_id,study_instance_uid,study_description,series_instance_uid,series_description,num_files,earliest_upload,latest_upload,num_uploads}	{meta,test,hello,bills_test}	posda_files	Add a filter to a tab
VisualReviewScanInstances	select \n  visual_review_instance_id as id, visual_review_reason as reason,\n  visual_review_scheduler as who_by, visual_review_num_series as num_series,\n  when_visual_review_scheduled as when_scheduled,\n  visual_review_num_series_done as num_done,\n  visual_review_num_equiv_class as num_equiv,\n  when_visual_review_sched_complete as sched_finish_time\nfrom visual_review_instance\n  order by when_scheduled desc	{}	{id,reason,who_by,num_series,when_scheduled,num_done,num_equiv,sched_finish_time}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_status}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
HowManyFilesToHideInCopyFromPublic	select\n  count(*) as num_to_hide\nfrom file_copy_from_public c, ctp_file p\nwhere\n  c.copy_from_public_id = ? and\n  (p.file_id = c.replace_file_id and p.visibility is null) 	{copy_from_public_id}	{num_to_hide}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
PosdaTotalsWithDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
FilePathComponentsByFileId	select\n  root_path, rel_path\nfrom\n  file_location natural join file_storage_root\nwhere\n  file_id = ?	{file_id}	{root_path,rel_path}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups,used_in_file_import_into_posda}	posda_files	Get file path from id
CreateBackgroundSubprocessError	insert into background_subprocess(\n  subprocess_invocation_id,\n  input_rows_processed,\n  command_executed,\n  foreground_pid,\n  background_pid,\n  when_script_started,\n  when_background_entered,\n  user_to_notify,\n  process_error\n) values (\n  ?, ?, ?, ?, ?, ?, now(), ?, ?\n)	{subprocess_invocation_id,input_rows_processed,command_executed,foreground_pid,background_pid,when_script_started,user_to_notify,process_error}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess table with an error in initialization\n\nUsed by background subprocess
ListOpenActivitiesOld	select\n  activity_id,\n  brief_description,\n  when_created,\n  who_created\nfrom\n  activity\nwhere when_closed is null\norder by activity_id desc	{}	{activity_id,brief_description,when_created,who_created}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
PatientStudySeriesHierarchyByCollectionSiteWithDateRange	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join \n  ctp_file natural join \n  file_series natural join \n  file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from \n      ctp_file  natural join\n      file_import natural join\n      import_event\n    where project_name = ? and site_name = ? and\n    visibility is null and\n    import_time > ? and import_time < ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site,from,to}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy,apply_disposition}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy with upload times within a date range
GetZipUploadEventsByDateRange	select distinct import_event_id, count(distinct file_id)  as num_files \nfrom file_import natural join import_event\nwhere\nimport_time > ? and import_time < ? and import_comment = 'zip'\ngroup by import_event_id	{from,to}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
GetFilesAndSopsBySeries	select \n  distinct patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id, \n  root_path || '/' || rel_path as path\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  file_location natural join\n  file_storage_root natural left join\n  ctp_file\nwhere \n  series_instance_uid = ? and\n  visibility is null	{series_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,path}	{ImageEdit,edit_files}	posda_files	Get File id and visibility for all files in a series
PublicSeriesByCollection	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? \n	{collection}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{public}	public	List of all Series By Collection, Site on Public\n
FirstFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	First files uploaded by series\n
GetEquipmentSignature	select * from equipment_signature where equipment_signature = ?\n	{equipment_signature}	{equipment_signature_id,equipment_signature}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get Equipment Signature Id
GetElemenSeenIdBySig	select element_seen_id\nfrom element_seen\nwhere element_sig_pattern = ?	{element_sig_pattern}	{element_seen_id}	{NotInteractive,ElementDisposition,phi_maint}	posda_phi_simple	Get List of Private Elements By Disposition
BackgroundSubprocessBySubprocessId	select \n  background_subprocess_id, subprocess_invocation_id, \n  input_rows_processed,  when_script_started, when_background_entered,\n  when_script_ended, user_to_notify, process_error\nfrom \n  background_subprocess\nwhere \n  subprocess_invocation_id = ?\norder by when_script_started desc	{subprocess_invocaton_id}	{background_subprocess_id,subprocess_invocation_id,input_rows_processed,when_script_started,when_background_entered,when_script_ended,user_to_notify,process_error}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
DistinctSeriesByCollectionSiteBatch	select distinct series_instance_uid, dicom_file_type, modality, count(distinct file_id)\nfrom\n  file_study natural join file_series natural join dicom_file natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and batch = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, modality\n	{project_name,site_name,batch}	{series_instance_uid,dicom_file_type,modality,count}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetFilesWithSeriesButNoStudy	select \n  distinct file_id\nfrom\n  file_series se natural join ctp_file\nwhere\n  not exists (\n    select file_id from file_study st where st.file_id = se.file_id\n  ) and\n  visibility is null\n  and project_name = ?	{collection}	{file_id}	{posda_db_populate,dicom_file_type}	posda_files	Add a filter to a tab
GetWeeksRangeByDate	select \n  date_trunc('week', foo) as start_week,\n  date_trunc('week', foo + interval '7 days') as end_week,\n  date_trunc('day', foo + interval '1 day') as end_partial_week\nwhere foo in (\n  select to_timestamp(?, 'yyyy-mm-dd') as foo\n)	{from}	{start_week,end_week,end_partial_week}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
DuplicateSOPInstanceUIDsGlobalWithoutHidden	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
ActivityStuffMoreForAllByDateRange	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\nwhere when_script_started >= ? and when_script_ended <= ?\norder by subprocess_invocation_id desc\n	{from,to}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
subprocess_invocations	select command_line, when_invoked, spreadsheet_uploaded_id from subprocess_invocation\nwhere from_spreadsheet\norder by when_invoked	{}	{command_line,when_invoked,spreadsheet_uploaded_id}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
ValuesWithVrTagAndCountLimited	select distinct vr, value, element_signature, num_files from (\n  select\n    distinct vr, value, element_signature, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and\n    vr not in (\n      'AE', 'AT', 'DS', 'FL', 'FD', 'IS', 'OD', 'OF', 'OL', 'OW',\n      'SL', 'SQ', 'SS', 'TM', 'UL', 'US'\n    )\n  group by value, element_signature, vr\n) as foo\norder by vr, value\n	{scan_id}	{vr,value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
PossiblyRunningBackgroundSubprocesses	select\n  subprocess_invocation_id, background_subprocess_id,\n  when_script_started, when_background_entered, command_line,\n  now()-when_background_entered as time_in_background, background_pid\nfrom\n  subprocess_invocation natural join background_subprocess\nwhere\n  when_background_entered is not null and when_script_ended is null and\n  subprocess_invocation_id != 0 and crash is null\norder by subprocess_invocation_id	{}	{subprocess_invocation_id,background_subprocess_id,when_script_started,when_background_entered,command_line,time_in_background,background_pid}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
PatientStudySeriesHierarchyByCollectionMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
ListOfQueriesPerformedAllWithLatestAndCount	select\n  query_name,\n  max(query_start_time) as last_invocation, \n  count(query_invoked_by_dbif_id) as num_invocations,\n  sum(query_end_time - query_start_time) as total_query_time,\n  avg(query_end_time - query_start_time) as avg_query_time\nfrom \n  query_invoked_by_dbif\ngroup by query_name\norder by last_invocation  desc	{}	{query_name,last_invocation,num_invocations,total_query_time,avg_query_time}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
SeriesByDistinguishedDigest	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  ctp_file natural join\n  file_patient natural\n  join file_series natural\n  join file_sop_common\nwhere file_id in(\n  select file_id \n  from\n    file_image\n    join image using (image_id)\n    join unique_pixel_data using (unique_pixel_data_id)\n  where digest = ?\n  ) and visibility is null\ngroup by collection, site, patient_id, series_instance_uid\norder by collection, site, patient_id	{distinguished_pixel_digest}	{collection,site,patient_id,series_instance_uid,num_sops}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
PublicDifferenceReportBySubprocessId	select\n  distinct short_report_file_id, long_report_file_id,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct from_file_id) as num_files\nfrom posda_public_compare\nwhere background_subprocess_id =?\ngroup by short_report_file_id, long_report_file_id order by short_report_file_id	{subprocess_invocation_id}	{short_report_file_id,long_report_file_id,num_sops,num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
DatabaseSizes	select d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20\n	{}	{name,owner,size}	{AllCollections,postgres_stats,database_size}	posda_files	Get a list of collections and sites\n
dicom_files_ids_with_no_ctp_file_like_pat	select \n  distinct patient_id,\n  dicom_file_type, \n  modality, \n  file_id,\n  root_path || '/' || rel_path as file_path\nfrom\n  dicom_file d natural join\n  file_patient natural join \n  file_series natural join\n  file_location natural join\n  file_storage_root\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) and patient_id like ?\n	{patient_id_pattern}	{patient_id,dicom_file_type,modality,file_id,file_path}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
VisibilityChangeEventsByCollectionByHourNoSeries	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere project_name = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{collection}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
CreateDciodvfyUnitScanError	insert into dciodvfy_unit_scan_error(\n  dciodvfy_scan_instance_id,\n  dciodvfy_unit_scan_id,\n  dciodvfy_error_id\n)values (?, ?, ?)	{" dicodvfy_scan_instance_id",dciodvfy_unit_scan_id,dciodvfy_error_id}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_unit_scan_error row
FilePathCountAndLoadTimesBySopInstance	select\n  distinct file_id,\n  root_path || '/' || file_location.rel_path as path,\n  min(import_time) as first_loaded,\n  count(distinct import_time) as times_loaded,\n  max(import_time) as last_loaded\nfrom\n  file_location\n  natural join file_storage_root\n  join file_import using(file_id)\n  join import_event using (import_event_id)\n  natural join file_sop_common\nwhere sop_instance_uid = ?\ngroup by file_id, path;	{sop_instance_uid}	{file_id,path,first_loaded,times_loaded,last_loaded}	{SeriesSendEvent,by_series,find_files,for_send,for_comparing_dups}	posda_files	Get file path from id
SimplePhiReportAllRelevantPrivateOnlyNew	select \n  distinct '<' || element_sig_pattern || '>'  as element, length(value) as val_length,\n  vr, value, tag_name as description, private_disposition as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and is_private and private_disposition not in ('d', 'na', 'h', 'o', 'oi')\ngroup by element_sig_pattern, vr, value, val_length, description, disp\norder by vr, element, val_length	{scan_id}	{element,vr,value,description,disp,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
PatientStatusChangeByCollection	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where project_name = ? and visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{collection}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
FindInconsistentStudyIgnoringStudyTimeByCollectionLike	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name like ? and visibility is null\n    group by\n      study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection_like}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
Sops In Posda By Series	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid,\n  modality, sop_instance_uid\nfrom\n  file_series natural join file_patient natural join ctp_file natural join\n  file_sop_common natural join file_study\nwhere file_id in (\n  select\n    file_id\nfrom\n    file_series natural join ctp_file\n  where \n    visibility is null and series_instance_uid = ?\n  )\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,modality,sop_instance_uid}	{"Reconcile Public and Posda for CPTAC"}	posda_files	Get the list of files by sop, excluding base series
background_emails_by_date	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ? and name = 'Email' and when_invoked > ? and when_invoked < ?\norder by when_invoked desc	{invoking_user,from,to}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
FileStorageRootSummaryExtended	select \n  distinct file_storage_root_id,\n  root_path,\n  storage_class,\n  count(distinct file_id) as num_files,\n  sum(size) as total_bytes\nfrom\n  file_storage_root\n  natural join file_location\n  natural join file\ngroup by file_storage_root_id, root_path, storage_class;	{}	{file_storage_root_id,root_path,storage_class,num_files,total_bytes}	{used_in_file_import_into_posda,bills_test}	posda_files	Get count of files relative to storage root
GetUnkQualifiedCTQPByLikeCollectionSiteWithFIleCount	select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id)\nwhere collection like ? and site = ? and qualified is null\ngroup by collection, site, patient_id, qualified	{collection_like,site}	{collection,site,patient_id,qualified,num_files}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
SeriesNotScheduledForVisualReviewByCollectionSiteSummary	select \n  distinct\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file\nwhere\n  file_id in (\n    select file_id from file_series\n    where series_instance_uid in\n    (\n       select distinct series_instance_uid\n       from file_series fs natural join ctp_file\n       where\n         project_name = ? and\n         site_name = ? and visibility is null\n         and not exists (\n           select series_instance_uid\n           from image_equivalence_class ie\n           where ie.series_instance_uid = fs.series_instance_uid\n         )\n    )\n  )\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality	{project_name,site_name}	{series_instance_uid,dicom_file_type,modality,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get Series which have no image_equivalence class by collection, site
SimplePublicPhiReportSelectedVrWithMetaquotes	select \n  distinct '<' || element_sig_pattern || '>' as element, vr, '<' || value || '>' as q_value, tag_name as description, \n  ' ' as disp, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and\n  not is_private and\n  vr in ('SH', 'OB', 'PN', 'DA', 'ST', 'AS', 'DT', 'LO', 'UI', 'CS', 'AE', 'LT', 'ST', 'UC', 'UN', 'UR', 'UT')\ngroup by element, vr, q_value, tag_name, disp\norder by vr, element, q_value	{scan_id}	{element,vr,q_value,description,disp,num_series}	{adding_ctp,for_scripting,phi_reports}	posda_phi_simple	Simple Phi Report with Meta Quotes
SendEventSummary	select\n  reason_for_send, num_events, files_sent, earliest_send,\n  finished, finished - earliest_send as duration\nfrom (\n  select\n    distinct reason_for_send, count(*) as num_events, sum(number_of_files) as files_sent,\n    min(send_started) as earliest_send, max(send_ended) as finished\n  from dicom_send_event\n  group by reason_for_send\n  order by earliest_send\n) as foo\n	{}	{reason_for_send,num_events,files_sent,earliest_send,finished,duration}	{send_to_intake}	posda_files	Summary of SendEvents by Reason\n
PatientStudySeriesHierarchyByCollectionSiteMatchingSeriesDesc	select distinct\n  patient_id,\n  study_instance_uid,\n  series_instance_uid\nfrom\n  file_study natural join ctp_file natural join file_series natural join file_patient\nwhere \n  file_id in (\n    select distinct file_id\n    from ctp_file natural join file_series\n    where project_name = ? and site_name = ? \n    and visibility is null and series_description like ?\n  )\norder by patient_id, study_instance_uid, series_instance_uid	{collection,site,series_descriptions_matching}	{patient_id,study_instance_uid,series_instance_uid}	{Hierarchy}	posda_files	Construct list of series in a collection in a Patient, Study, Series Hierarchy excluding matching SeriesDescriptons
GetLoadPathByImportEventId	select file_id, rel_path from file_import where import_event_id = ?	{import_event_id}	{file_id,rel_path}	{radcomp}	posda_files	Add a filter to a tab
AllHiddenSubjects	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere patient_id in (\n    select distinct patient_id \n    from file_patient\n  except \n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n) group by patient_id, project_name, site_name\norder by project_name, site_name, patient_id;\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects}	posda_files	Find All Subjects which have only hidden files\n
Checking Duplicate Pixel Data By Series	select \n  distinct project_name as collection, site_name as site, patient_id,\n  dicom_file_type, pixel_data_digest, sop_instance_uid\nfrom\n  file_series natural join file_patient natural join ctp_file natural join\n  file_sop_common natural join dicom_file\nwhere pixel_data_digest in (\n  select\n    distinct pixel_data_digest\n  from\n    file_series natural join ctp_file natural join dicom_file\n  where \n    visibility is null and series_instance_uid = ?\n  )\norder by pixel_data_digest	{series_instance_uid}	{collection,site,patient_id,dicom_file_type,pixel_data_digest,sop_instance_uid}	{"CPTAC Bolus September 2018"}	posda_files	Get the list of files by sop, excluding base series
SubjectsWithModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, count(*) as num_files\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?\ngroup by patient_id, modality\n	{modality,project_name,site_name}	{patient_id,modality,num_files}	{FindSubjects,SymLink,intake}	intake	Find All Subjects with given modality in Collection, Site\n
ListOfAvailableQueriesForDescEdit	select\n  name, description, query,\n  array_to_string(tags, ',') as tags\nfrom queries\norder by name	{}	{name,description,query,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
StartRound	update round\n  set round_start = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
PrivateTagValuesWithVrTagAndCountWhereDispositionIsNull	select\n  distinct vr , value, element_signature, private_disposition, count(*) as num_files\nfrom\n  element_signature natural left join scan_element natural left join series_scan natural left join seen_value\nwhere\n  is_private and private_disposition is null\ngroup by\n  vr, value, element_signature, private_disposition\n	{}	{vr,value,element_signature,private_disposition,count}	{DispositionReport,NotInteractive}	posda_phi	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
GetPosdaPhiElementSigInfo	select\n  element_signature,\n  vr,\n  is_private,\n  private_disposition,\n  name_chain\nfrom element_signature\n\n	{}	{element_signature,vr,is_private,private_disposition,name_chain}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi	Get the relevant features of an element_signature in posda_phi schema
GetNonDicomFileScanId	select\n  currval('non_dicom_file_scan_non_dicom_file_scan_id_seq') as id	{}	{id}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
InsertIntoPublicPosdaFileComparison	insert into public_to_posda_file_comparison(\n  compare_public_to_posda_instance_id,\n  sop_instance_uid,\n  posda_file_id,\n  posda_file_path,\n  public_file_path,\n  short_report_file_id,\n  long_report_file_id   \n)values(\n  ?, ?, ?, ?,\n  ?, ?, ?\n)\n	{compare_public_to_posda_instance_id,sop_instance_uid,posda_file_id,posda_file_path,public_file_path,short_report_file_id,long_report_file_id}	{}	{activity_timepoint_support}	posda_files	Insert a column into public_to_posda_file_comparison
get_file_to_fix_ctp	select\n  file_id, root_path || '/' || file_location.rel_path as file_path \nfrom\n  file_patient  natural join\n  file_import natural join\n  import_event join file_location using(file_id) join file_storage_root using (file_storage_root_id)\nwhere \n  import_time > ? and not exists\n  (select file_id from ctp_file where ctp_file.file_id = file_patient.file_id)\nlimit ?	{from,limit}	{file_id,file_path}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
GetEquipmentSignatureId	select currval('equipment_signature_equipment_signature_id_seq') as id	{}	{id}	{NotInteractive,UsedInPhiSeriesScan}	posda_phi	Get current value of EquipmentSignatureId Sequence\n
HowManyFilesCopiedInCopyFromPublic	select\n  count(*) as num_copied\nfrom file_copy_from_public\nwhere\n  copy_from_public_id = ? and\n  inserted_file_id is not null	{copy_from_public_id}	{num_copied}	{bills_test,copy_from_public}	posda_files	Add a filter to a tab
CancelQueryByPid	select \n  pg_cancel_backend(?)	{pid}	{pg_cancel_backend}	{AllCollections,postgres_stats,postgres_query_stats}	posda_backlog	Get a list of collections and sites\n
list_of_roles	select\n  filter_name as role\nfrom query_tag_filter	{}	{role}	{roles}	posda_queries	Show a complete list of roles\n
FilesVisibilityByCollectionSitePatient	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id, file_id, visibility\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and\n  site_name = ? and\n  patient_id = ?\norder by collection, site, patient_id\n\n	{collection,site,patient_id}	{collection,site,patient_id,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesWithNoCtp	select\n  distinct file_id\nfrom\n  file_patient p\nwhere\n  not exists(\n  select file_id from ctp_file c\n  where c.file_id = p.file_id\n)\n	{}	{file_id}	{adding_ctp}	posda_files	Get Series in A Collection\n
background_reports	select \n  background_subprocess_report_id as id, \n  button_name, operation_name, invoking_user, when_invoked, file_id, name\nfrom background_subprocess_report natural join background_subprocess natural join subprocess_invocation where invoking_user = ?\norder by when_invoked desc	{invoking_user}	{id,button_name,operation_name,invoking_user,when_invoked,file_id,name}	{meta,test,hello,query_tabs,bills_test,subprocess}	posda_queries	Add a filter to a tab
InsertRoundCounts	insert into round_counts(\n  round_id, collection,\n  num_requests, priority\n) values (\n  ?, ?,\n  ?, ?\n)\n	{round_id,collection,num_requests,priority}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into round_counts
ListOfAvailableQueries	select\n  schema, name, description,\n  array_to_string(tags, ',') as tags\nfrom queries\norder by name	{}	{schema,name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
TotalsLike	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n         where\n           project_name like ? and visibility is null\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{pattern}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get Posda totals for with collection matching pattern\n
RoiForBySopInstanceUid	select \n  distinct for_uid, count(*) as num_files\nfrom\n  file_series natural join file_sop_common natural join file_for natural join ctp_file\nwhere \n  series_instance_uid = ? and visibility is null\ngroup by for_uid	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
WhatHasComeInRecentlyWithSubject	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
FindTagsInQuery	select\n  tag from (\n  select name, unnest(tags) as tag\n  from queries) as foo\nwhere\n  name = ?	{name}	{tag}	{meta,test,hello,query_tags}	posda_queries	Find all queries matching tag
GetPublicSopsForCompareLikeCollection	select\n  i.patient_id,\n  i.study_instance_uid,\n  s.series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  s.modality,\n  i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and tdp.project like ?\n  and i.general_series_pk_id = s.general_series_pk_id	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_uri}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
InboxContentByActivityId	select\n user_name, user_inbox_content_id as id, operation_name,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  activity_inbox_content natural join user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural join subprocess_invocation\n  natural left join spreadsheet_uploaded\nwhere activity_id = ?\norder by when_script_started desc	{activity_id}	{user_name,id,operation_name,when,file_id,sub_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
GetFileStorageRootByStorageClass	select\n  root_path\nfrom\n  file_storage_root\nwhere \n storage_class = ?\n  and current	{storage_class}	{root_path}	{NotInteractive,used_in_import_edited_files,used_in_check_circular_view}	posda_files	Get root path for a storage_class
VisualReviewSeriesByIdProcessingStatusAndDicomFileTypeWhereReviewStatusIsNull	select \n  distinct image_equivalence_class_id, series_instance_uid\nfrom\n  visual_review_instance natural join image_equivalence_class natural join\n  image_equivalence_class_input_image natural join dicom_file natural join \n  file_series natural join ctp_file\nwhere\n  visual_review_instance_id = ? and review_status is null and processing_status = ? and dicom_file_type = ?\n	{visual_review_instance_id,processing_status,dicom_file_type}	{image_equivalence_class_id,series_instance_uid}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
GetDciodvfyUnitScanId	select currval('dciodvfy_unit_scan_dciodvfy_unit_scan_id_seq') as id	{}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_scan_instance row
FromAndToFileIdWithVisibilityFromDigests	select \n(select file_id from file where digest = ?) as from_file_id,\n(select file_id from file where digest = ?) as to_file_id,\n(select visibility as from_file_visibility from ctp_file natural join file where digest = ?) as from_visibility,\n(select visibility as from_file_visibility from ctp_file natural join file where digest = ?) as to_visibility	{from_digest_1,to_digest_1,from_digest_2,to_digest_2}	{from_file_id,to_file_id,from_visibility,to_visibility}	{meta,test,hello,bills_test,hide_events}	posda_files	Add a filter to a tab
ExportFilepathAndSize	select \n  root_path,\n  rel_path,\n  size,\n  digest \nfrom file \n  natural join file_location \n  natural join file_storage_root \n  natural join ctp_file \nwhere project_name = ? \n  and site_name = ? and visibility is null	{collection,site}	{root_path,rel_path,size,digest}	{Universal}	posda_files	Creates an export list for importing with python_import_csv_filelist.py
FilesAndLoadTimesInSeries	select\n  distinct sop_instance_uid, file_id, import_time\nfrom\n  file_sop_common natural join file_series\n  natural join file_import natural join import_event\nwhere\n  series_instance_uid = ?\norder by \n  sop_instance_uid, import_time, file_id\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
InsertDistinguishedValue	insert into distinguished_pixel_digest_pixel_value(\n  pixel_digest, pixel_value, num_occurances\n  ) values (\n  ?, ?, ?\n)	{pixel_digest,value,num_occurances}	{}	{duplicates,distinguished_digest}	posda_files	insert distinguished pixel digest
GetFileCountByLikeLoadPath	select distinct import_event_id, count(distinct file_id)  as num_files from file_import where rel_path like ? group by import_event_id;	{like_rel_path}	{import_event_id,num_files}	{radcomp}	posda_files	Add a filter to a tab
CreateConversionEvent	insert into conversion_event(\n  time_of_conversion, who_invoked_conversion, conversion_program\n) values (\n  now(), ?, ?\n)\n	{who_invoked_conversion,conversion_program}	{}	{radcomp}	posda_files	Add a filter to a tab
GetSsVolumeReferencingKnownImagesByCollection	select \n  distinct project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\nand project_name = ?\nand visibility is null\norder by collection, site, patient_id	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
NonDicomPhiReportCsvMetaQuotesLimit	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'csv'\ngroup by type, path, q_value\norder by type, path, q_value\nlimit ?	{scan_id,limit}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_phi_simple	Simple Phi Report with Meta Quotes
CountsByCollectionSiteDateRange	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,from,to}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,for_bill_counts}	posda_files	Counts query by Collection, Site\n
CreateEquivalenceClass	insert into image_equivalence_class(\n  series_instance_uid, equivalence_class_number,\n  processing_status\n) values (\n  ?, ?, 'Preparing'\n)\n	{series_instance_uid,equivalence_class_number}	{}	{consistency,find_series,equivalence_classes,NotInteractive}	posda_files	For building series equivalence classes
DistinctSeriesByCollectionExceptModality	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join ctp_file\nwhere\n  project_name = ? and modality != ?\n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{project_name,modality}	{series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection with modality other than specified\n
GetPublicHierarchyBySopInstance	select\n  i.patient_id, s.study_instance_uid, s.series_instance_uid, modality, sop_instance_uid\nfrom \n  general_image i, general_series s where sop_instance_uid = ? and\n  s.general_series_pk_id = i.general_series_pk_id	{sop_instance_uid}	{patient_id,study_instance_uid,series_instance_uid,modality,sop_instance_uid}	{Hierarchy}	public	Get Patient, Study, Series, Modality, Sop Instance by sop_instance from public database
DatesOfUploadByCollectionSite	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event\n  natural join ctp_file\nwhere project_name = ? and site_name = ? \n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
CreateScanElement	insert into scan_element(\n  element_signature_id, seen_value_id, series_scan_id\n)values(\n  ?, ?, ?)\n	{element_signature_id,seen_value_id,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Create Scan Element
VisibilityChangeEventsByCollectionDateRangeForHiddenFilesWithSeries	select\n  distinct project_name as collection, \n  site_name as site, patient_id,\n  user_name, prior_visibility, new_visibility,\n  date_trunc('hour',time_of_change) as time, \n  reason_for, series_instance_uid, count(*)\nfrom\n  file_visibility_change natural join\n  ctp_file natural join \n  file_patient natural join \n  file_series\nwhere\n  project_name = ? and\n  visibility is not null and\n  time_of_change > ? and time_of_change < ?\ngroup by \n  collection, site, patient_id, user_name, prior_visibility, new_visibility,\n  time, reason_for, series_instance_uid\norder by time, collection, site, patient_id, series_instance_uid	{collection,from,to}	{collection,site,patient_id,user_name,prior_visibility,new_visibility,time,series_instance_uid,reason_for,count}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files,old_hidden}	posda_files	Show Received before date by collection, site
GetFiletypes	select distinct file_type, count(*) as num_files from file group by file_type\n 	{}	{file_type,num_files}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
ComplexDuplicatePixelData	select \n  distinct project_name, site_name, patient_id, series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_patient natural join file_series \nwhere \n  file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count = ?\n    )\n    and visibility is null\n  ) \ngroup by project_name, site_name, patient_id, series_instance_uid\norder by count desc;\n	{count}	{project_name,site_name,patient_id,series_instance_uid,count}	{pix_data_dups,pixel_duplicates}	posda_files	Find series with duplicate pixel count of <n>\n
PrivateTagsByEquipment	select distinct element_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere equipment_signature = ?\norder by element_signature;\n	{scan_id,equipment_signature}	{element_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
DicomFileSummaryByImportEvent	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id as patient,\n  study_instance_uid as study,\n  series_instance_uid as series,\n  dicom_file_type as file_type,\n  modality,\n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_sop_common natural join\n  dicom_file natural left join\n  ctp_file\nwhere file_id in (\n  select distinct file_id from import_event natural join file_import where import_event_id = ?\n)\ngroup by collection, site, patient, study, series, file_type, modality\norder by collection, site, patient, series, file_type	{import_event_id}	{collection,site,patient,study,series,file_type,modality,num_sops,num_files}	{adding_ctp,for_scripting}	posda_files	A summary of DICOM files in a particular upload
AddErrorToBackgroundProcess	update background_subprocess set\n  process_error = ?\nwhere\n subprocess_invocation_id = ?\n	{process_error,background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add a error to a background_subprocess  row\n\nused in a background subprocess when an error occurs
IntakeImagesByCollectionSitePlus	select\n  p.patient_id,\n  i.sop_instance_uid,\n  t.study_instance_uid,\n  s.series_instance_uid\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n\n	{collection,site}	\N	{intake}	intake	N\no\nn\ne
ActiveQueriesOld	select\n  datname as db_name, procpid as pid,\n  usesysid as user_id, usename as user,\n  waiting, now() - xact_start as since_xact_start,\n  now() - query_start as since_query_start,\n  now() - backend_start as since_back_end_start,\n  current_query\nfrom\n  pg_stat_activity\nwhere\n  datname = ?\n	{db_name}	{db_name,pid,user_id,user,waiting,since_xact_start,since_query_start,since_back_end_start,current_query}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 8.4.20 (Current Linux)\n
DupSopsBeforeDateForHiding	select distinct file_id, latest from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?	{collection,break_date}	{file_id,latest}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
GetSimpleElementSeen	select\n  element_seen_id as id\nfrom \n  element_seen\nwhere\n  element_sig_pattern = ? and\n  vr = ?	{element_sig_pattern,vr}	{id}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Get an element_seen row by element, vr (if present)
PTWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'Positron Emission Tomography Image Storage' and \n  visibility is null and\n  modality != 'PT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
AllPatientDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  project_name is null and site_name is null and visibility is null\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients}	posda_files	Get Series in A Collection\n
SeriesWithDupSopsByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site,from,to}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FirstFileInSeriesIntake	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,intake,UsedInPhiSeriesScan}	intake	First files in series in Intake\n
FileTypeModalityCountsByImportIdWithPatId	select\n  distinct  patient_id, dicom_file_type, modality, count(*) as num_files\nfrom file_series natural join dicom_file natural join file_patient\nwhere file_id in (\n  select distinct file_id\n  from file_import natural join import_event\n  where import_event_id = ?\n) and modality = ?\ngroup by patient_id, dicom_file_type, modality	{import_event_id,modality}	{patient_id,dicom_file_type,modality,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
RoundRunningTimeCurrentRound	select now() - round_start as running_time from round where round_id in (\nselect round_id from round where round_end is null and round_start is not null)	{}	{running_time}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of round by id
FileSizeByPublic	select distinct project as collection, sum(dicom_size) as total_disc_used from general_image group by project order by total_disc_used desc	{}	{collection,total_disc_used}	{AllCollections,queries}	public	Get a list of available queries
MakeEquivClassPassThrough	update image_equivalence_class set\n  review_status = 'PassThrough',\n  processing_status = 'Reviewed'\nwhere\n  image_equivalence_class_id = ?	{image_equivalence_class_id}	{}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
ReviewSummaryForCollection	select \n  distinct project_name as collection,\n  site_name as site,\n  dicom_file_type,\n  modality,\n  coalesce(visibility, 'visable') as visiblity,\n  review_status,\n  count(distinct series_instance_uid) as num_series \nfrom\n  image_equivalence_class natural join file_series\n  natural join ctp_file natural join dicom_file\nwhere\n  project_name = ? \ngroup by project_name, site, dicom_file_type, modality, visibility, review_status;	{collection}	{collection,site,dicom_file_type,modality,visibility,review_status,num_series}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
VisiblePatientsWithCtp	select\n  distinct project_name as collection, site_name as site, patient_id,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_patient sc natural join file_series\n  natural join file_import natural join import_event\n  natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, site, patient_id	{}	{patient_id,num_series,num_files}	{adding_ctp,find_patients,series_selection,ctp_patients,select_for_phi}	posda_files	Get List of visible patients with CTP data
GetPatientMappingByCollectionSite	select\n  from_patient_id,\n  to_patient_id,\n  to_patient_name,\n  collection_name,\n  site_name,\n  batch_number,\n  date_shift,\n  '<' || diagnosis_date || '>' as diagnosis_date,\n  '<' || baseline_date || '>' as baseline_date,\n  '<' || date_trunc('year', diagnosis_date) || '>' as year_of_diagnosis,\n  baseline_date - diagnosis_date as computed_shift\nfrom\n  patient_mapping\nwhere collection_name = ? and site_name = ?\n  	{collection_name,site_name}	{from_patient_id,to_patient_id,to_patient_name,collection_name,site_name,batch_number,date_shift,diagnosis_date,baseline_date,year_of_diagnosis,computed_shift}	{adding_ctp,for_scripting,patient_mapping,"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Retrieve entries from patient_mapping table
GetAllQualifiedCTQPByLikeCollectionWithFileCountAndLoadTimesSinceDateWithEarlier	select * from (select \n  collection, site, patient_id, qualified, count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) join file_import using(file_id)\n  join file_sop_common using(file_id)\n  join import_event using(import_event_id)\nwhere collection like ?\ngroup by collection, site, patient_id, qualified) as foo where latest_day >= ? and earliest_day < ?	{collection_like,from,from_again}	{collection,site,patient_id,qualified,num_files,num_sops,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
FindPotentialDistinguishedSops	select \n  distinct project_name as collection,\n  site_name as site, \n  patient_id, \n  image_id,\n  count(*)\nfrom\n  ctp_file\n  natural join file_patient\n  natural join file_image\nwhere\n  file_id in \n  (select \n    distinct file_id \n  from\n    file_image \n  where\n    image_id in\n    (select\n       image_id from \n       (select\n         distinct image_id, count(distinct file_id) \n       from\n         file_image \n       group by image_id\n       ) as foo\n     where count > 1000\n  )\n) group by collection, site, patient_id, image_id\norder by collection, site, image_id, patient_id\n\n	{}	{collection,site,patient_id,image_id,count}	{duplicates,distinguished_digest}	posda_files	Return a count of duplicate SOP Instance UIDs\n
GetDosesReferencingBadPlans	select\n  sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select \n    file_id\n  from\n    rt_dose d natural join file_dose  \n  where\n    not exists (\n      select\n        sop_instance_uid \n      from\n        file_sop_common fsc \n      where d.rt_dose_referenced_plan_uid = fsc.sop_instance_uid\n  )\n)	{}	{sop_instance_uid}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan which reference unknown SOPs\n\n
RollbackPosda	rollback	{}	{}	{NotInteractive,Backlog,Transaction}	posda_files	Abort a transaction in Posda files
AllSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
CountsBySeriesInstanceUidPlusNoImageType	select\n  distinct\n    patient_id, study_date, series_instance_uid, modality,\n    study_description, series_description,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_series\n    where series_instance_uid  = ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id, study_date, series_instance_uid, study_description, series_description, modality\norder by\n  patient_id, study_date, modality, series_description, series_instance_uid,\n  study_description\n	{SeriesInstanceUid,collection}	{patient_id,study_date,modality,series_description,series_date,study_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetPublicSopCountByPatientId	select\n  distinct i.patient_id,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and i.patient_id = ?\n  and i.general_series_pk_id = s.general_series_pk_id\ngroup by i.patient_id	{patient_id}	{patient_id,num_sops}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
GoInService	update control_status\nset status = 'service process running',\n  processor_pid = ?	{pid}	{}	{NotInteractive,Backlog}	posda_backlog	Claim control of posda_backlog
UpdPosdaPhiSimpleEleName	update\n  element_seen\nset\n  tag_name = ?,\n  is_private = ?\nwhere\n  element_sig_pattern = ? and\n  vr = ?\n\n	{name,is_private,element_signature,vr}	{}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Update name_chain in element_seen
PatientDetails	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  study_instance_uid,\n  study_date,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_study natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  patient_id = ?\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name, study_instance_uid, study_date,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id, study_date,\n  modality\n	{patient_id}	{collection,site,visibility,patient_id,patient_name,study_instance_uid,study_date,series_instance_uid,modality,num_files}	{adding_ctp,find_patients,no_ctp_details,ctp_details}	posda_files	Get Series in A Collection\n
LastNPhiScans	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id desc\n  limit ?\n	{n}	{id,start_time,end_time,duration,description,to_scan,scanned}	{tag_usage,simple_phi,phi_status}	posda_phi_simple	Status of PHI scans\n
AddProcessCount	update round\n  set process_count = ?\nwhere\n  round_id = ?\n	{process_count,round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Set Process Count in round
CountsByCollectionDateRangePlusNoImageType	select\n  distinct\n    patient_id, study_date, series_instance_uid, modality,\n    study_description, series_description,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name = ? and visibility is null\ngroup by\n  patient_id, study_date, series_instance_uid, study_description, series_description, modality\norder by\n  patient_id, study_date, modality, series_description, series_instance_uid,\n  study_description\n	{from,to,collection}	{patient_id,study_date,series_instance_uid,modality,study_description,series_description,num_sops,num_files,latest,earliest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
GetDciodvfyErrorAttrPres	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributesPresentWhenConditionNotSatisfied'\n  and error_tag = ?\n  and error_module = ?	{error_tag,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
VisibleColSiteWithCtp	select\n  distinct project_name as collection, site_name as site,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files,\n  min(import_time) as first_import,\n  max(import_time) as last_import\nfrom\n  file_series\n  natural join file_import natural join import_event\n  natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, site	{}	{collection,site,num_series,num_files}	{adding_ctp,find_patients,series_selection,ctp_col_site,select_for_phi}	posda_files	Get List of visible patients with CTP data
FileWithInfoBySopInPublic	select\n  frame_of_reference_uid as frame_of_ref,\n  image_orientation_patient as iop,\n  image_position_patient as ipp,\n  pixel_spacing,\n  i_rows as pixel_rows,\n  i_columns as pixel_columns\nfrom\n  general_image i, general_series s\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  sop_instance_uid = ?	{sop_instance_uid}	{frame_of_ref,iop,ipp,pixel_spacing,pixel_rows,pixel_columns}	{LinkageChecks,used_in_struct_linkage_check}	public	Get list of Roi with info by file_id\n\n
InboxContentByDateRange	select\n  activity_id, brief_description as activity_description,\n  user_name, user_inbox_content_id, operation_name,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  activity natural join activity_inbox_content natural join user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural join subprocess_invocation\n  natural left join spreadsheet_uploaded\nwhere \n  when_script_started > ? and when_script_started < ?\norder by activity_id, when_script_started	{from,to}	{activity_id,activity_description,user_name,user_inbox_content_id,operation_name,when,file_id,sub_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
ShowQueryTabHierarchyWithQueries	select \n  distinct query_tab_name, filter_name, tag, query_name\nfrom(\n  select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n) as foo\nnatural join(\n  select\n     name as query_name,\n     unnest(tags) as tag\nfrom queries\n) as fie\norder by \n  query_tab_name, filter_name, tag, query_name	{}	{query_tab_name,filter_name,tag,query_name}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
ListOfCollectionsAndSitesLikeCollection	select \n    distinct project_name, site_name, count(*) \nfrom \n   ctp_file natural join file_study natural join\n   file_series\nwhere\n  visibility is null and project_name like ?\ngroup by project_name, site_name\norder by project_name, site_name\n	{CollectionLike}	{project_name,site_name,count}	{AllCollections,universal}	posda_files	Get a list of collections and sites\n
RemoveTagFromQuery	update queries\nset tags = array_remove(tags, ?::text)\nwhere name = ?	{tag_name,query_name}	{}	{meta}	posda_queries	Remove a tag from a query
DeleteFirstTagFromQuery	update queries \n  set tags = tags[(array_lower(tags,1) + 1):(array_upper(tags,1))]\nwhere name = ?	{name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
ValuesByVrWithTagAndCount	select distinct value, element_signature, private_disposition, num_files from (\n  select\n    distinct value, element_signature, private_disposition, vr, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n  group by value, element_signature, vr\n) as foo\norder by value\n	{scan_id,vr}	{value,element_signature,private_disposition,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
CreateNewQueryTab	insert into query_tabs (\n  query_tab_name,\n  query_tab_description, \n  defines_dropdown,\n  sort_order,\n  defines_search_engine)\nvalues(\n  ?, ?, true, ?, false\n)	{query_tab_name,query_tab_description,sort_order}	{}	{meta,test,hello,query_tabs}	posda_queries	Create a new query tab
AddHocQuery	select\n  distinct patient_id, study_instance_uid as study_uid, series_instance_uid as series_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join file_study natural join file_series natural join ctp_file\nwhere\n  patient_id in\n   ('HN-CHUM-050', 'HN-CHUM-052', 'HN-CHUM-054', 'HN-CHUM-056', 'HN-CHUM-030', 'HN-CHUM-032')\n  and visibility is null\ngroup by patient_id, study_uid, series_uid	{}	{patient_id,study_uid,series_uid,num_files}	{meta,test,hello,bills_test,bills_ad_hoc_scripts}	posda_files	Add a filter to a tab
GetEquivalenceClassId	select currval('image_equivalence_class_image_equivalence_class_id_seq') as id	{}	{id}	{NotInteractive,equivalence_classes}	posda_files	Get current value of EquivalenceClassId Sequence\n
GetActivities	select\n  activity_id, brief_description, when_created, who_created, when_closed\nfrom activity\n\n	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
FilesEarlierThanDateByCollectionSite	select \n  distinct file_id, visibility as old_visibility\nfrom \n  ctp_file natural join file_import natural join import_event\nwhere\n  project_name = ? and site_name = ? and visibility is null\n  and import_time < ?\n 	{collection,site,before}	{file_id,old_visibility}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Show Received before date by collection, site
InsertEditEventRow	insert into dicom_edit_event(\n  edit_desc_file, time_started, edit_comment, num_files, process_id, edits_done\n) values (?, now(), ?, ?, ?, 0)\n	{edit_desc_file,edit_comment,num_files,process_id}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert edit_event\nFor use in scripts\nNot really intended for interactive use\n
ListClosedActivities	select\n  activity_id,\n  brief_description,\n  when_created,\n  who_created,\n  when_closed\nfrom\n  activity \nwhere when_closed is not null\norder by activity_id	{}	{activity_id,brief_description,when_created,who_created,when_closed}	{AllCollections,queries,activities}	posda_queries	Get a list of available queries
GetSopListByCollectionSite	select \n  distinct project_name as collection, site_name as site,\n  patient_id, study_instance_uid, series_instance_uid,\n  sop_instance_uid\nfrom\n  ctp_file natural join file_patient natural join\n  file_study natural join file_series natural join file_sop_common\nwhere\n  project_name = ? and site_name = ? and visibility is null;	{collection,site}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid}	{bills_test,comparing_posda_to_public}	posda_files	Get a full list of sops with collection, site, patient, study_instance_uid and series_instance_uid\nby collection, site\n\n<bold>This may generate a large number of rows</bold>
GetEndOfWeek	select \n  date_trunc('week', to_timestamp(?, 'yyyy-mm-dd') + interval '1 week') as end_week\n 	{from}	{end_week}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
DupSopsWithFileIdByCollectionSiteDateRange	select\n  distinct collection, site, subj_id, \n  sop_instance_uid,\n  file_id,\n  visibility\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id,\n    visibility\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid \n      from (\n        select distinct sop_instance_uid, count(distinct file_id)\n        from file_sop_common natural join ctp_file\n        where visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from file_sop_common natural join ctp_file\n            join file_import using(file_id) \n            join import_event using(import_event_id)\n          where project_name = ? and site_name = ? and\n             visibility is null and import_time > ?\n              and import_time < ?\n        ) group by sop_instance_uid\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n\n	{collection,site,from,to}	{collection,site,subj_id,sop_instance_uid,file_id,visibility}	{duplicates,dup_sops,hide_dup_sops}	posda_files	Return a count of duplicate SOP Instance UIDs\n
CreateSimpleValueSeen	insert into value_seen(\nvalue\n)values(?)	{value}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new Simple Value Seen
GetReportOnSeriesWithNoStudy	select \n  distinct project_name as collection,\n  site_name as site, patient_id, series_instance_uid, visibility, count(*) as num_files\nfrom ctp_file natural join file natural join file_patient natural join file_series  where digest in (\nselect digest from file where file_id in (\nselect file_id from file_series where not exists(select file_id from file_study where file_series.file_id = file_study.file_id))) group by project_name, site_name, patient_id, series_instance_uid,visibility;	{}	{collection,site,patient_id,series_instance_uid,visibility,num_files}	{posda_db_populate,dicom_file_type}	posda_files	Add a filter to a tab
PixelDataIdByFileIdWithOtherFileId	select\n  distinct f.file_id as file_id, image_id, unique_pixel_data_id, \n  l.file_id as other_file_id\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location l using(unique_pixel_data_id)\nwhere\n  f.file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id,other_file_id}	{by_file_id,duplicates,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
CreateBackgroundSubprocess	insert into background_subprocess(\n  subprocess_invocation_id,\n  command_executed,\n  foreground_pid,\n  when_script_started,\n  user_to_notify\n) values (\n  ?, ?, ?, now(), ?\n)\nreturning background_subprocess_id	{subprocess_invocation_id,command_executed,foreground_pid,user_to_notify}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create row in background_subprocess table\n\nUsed by background subprocess
GetFileHierarchyByCollection	select \n  distinct root_path || '/' || rel_path as path,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  file_id \nfrom \n  ctp_file natural join\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  file_location natural join\n  file_storage_root\nwhere\n  project_name = ?\n  and visibility is null	{collection}	{path,patient_id,study_instance_uid,series_instance_uid,file_id}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get root_path for a file_storage_root\n
SeriesLike	select\n   distinct collection, site, pat_id,\n   series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     project_name as collection, site_name as site,\n     file_id, series_instance_uid, patient_id as pat_id,\n     series_description\n  from\n     ctp_file natural join file_series natural join file_patient\n  where\n     project_name = ? and site_name = ? and \n     series_description like ?\n) as foo\ngroup by collection, site, pat_id, series_instance_uid, series_description\norder by collection, site, pat_id\n	{collection,site,description_matching}	{collection,site,pat_id,series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern\n
NonDicomPhiReportCsvMetaQuotes	select \n  distinct non_dicom_file_type as type, '<' ||non_dicom_path || '>' as path,\n  '<' || value || '>' as q_value, count(distinct posda_file_id) as num_files\nfrom \n  non_dicom_path_value_occurrance natural join\n  non_dicom_path_seen natural join\n  value_seen natural join\n  non_dicom_file_scan natural join\n  phi_non_dicom_scan_instance\nwhere \n  phi_non_dicom_scan_instance_id = ? and file_type = 'csv'\ngroup by type, path, q_value\norder by type, path, q_value\n	{scan_id}	{type,path,q_value,num_files}	{adding_ctp,for_scripting,non_dicom_phi,non_dicom_edit}	posda_phi_simple	Simple Phi Report with Meta Quotes
GetValuesForTag	select\n  distinct element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ? and scan_event_id = ?\n	{tag,scan_id}	{tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
DatabaseSize	SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20;\n	{}	{Name,Owner,Size}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 9.4.5 (Current Mac)\n
GetSsVolumeReferencingUnknownImages	select \n  project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     not exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\norder by collection, site, patient_id	{}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetFullCopyFromPublicInfo	select \n  copy_from_public_id as id, who, why, \n  num_file_rows_populated as num_files, \n  (\n    select count(*) as num_waiting \n    from file_copy_from_public fc \n    where fc.copy_from_public_id = copy_from_public.copy_from_public_id and \n       not exists\n       (\n         select file_id from ctp_file where ctp_file.file_id = fc.replace_file_id and visibility is not null\n       )\n  ),\n  (\n    select count(*) as num_copied\n    from file_copy_from_public fc\n    where fc.copy_from_public_id = copy_from_public.copy_from_public_id and\n    fc.inserted_file_id is not null\n  )\nfrom\n  copy_from_public \nwhere copy_from_public_id = ?	{copy_from_public_id}	{id,who,why,num_files,num_waiting,num_copied}	{bills_test,copy_from_public,public_posda_consistency}	posda_files	Add a filter to a tab
PlanSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  file_for natural join file_plan join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_plan \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
CountsByCollectionLike	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n  ) and project_name like ? and visibility is null\ngroup by\n  collection, site, patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  collection, site, patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection_like}	{collection,site,patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection like pattern\n
WhatHasComeInRecentlyByCollectionLike	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\nand collection like ?\ngroup by collection, site, time order by time desc, collection, site	{interval,from,to,collection_like}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
SeriesWithMultipleDupSopsByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 2\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id, study_instance_uid, series_instance_uid\n\n	{collection,site}	{collection,site,subj_id,num_sops,num_files,study_instance_uid,series_instance_uid}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FindDuplicatedPixelDigestsNew	select\n  distinct pixel_digest, num_files\nfrom (\n  select\n    distinct pixel_data_digest as pixel_digest, count(distinct file_id) as num_files\n  from\n    dicom_file\n  where \n    has_pixel_data\n    group by pixel_data_digest\n) as foo \nwhere num_files > 3\norder by num_files desc	{}	{pixel_digest,num_files}	{meta,test,hello}	posda_files	Find Duplicated Pixel Digest
ForConstructingSeriesEquivalenceClasses	select distinct \n series_instance_uid, modality, series_number, laterality, series_date, dicom_file_type,\n  performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date,\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  iop, pixel_rows, pixel_columns,\n  file_id,ipp\nfrom\n  file_series natural join ctp_file natural join dicom_file\n  left join file_image using(file_id)\n  left join image using (image_id)\n  left join file_image_geometry using (file_id)\n  left join image_geometry using (image_geometry_id)\nwhere series_instance_uid = ? and visibility is null\n \n\n\n	{series_instance_uid}	{series_instance_uid,modality,series_number,laterality,series_date,dicom_file_type,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_desc,performed_procedure_step_comments,image_type,iop,pixel_rows,pixel_columns,file_id,ipp}	{consistency,find_series,equivalence_classes}	posda_files	For building series equivalence classes
PublicPatientsByCollectionSite	select\n  distinct p.patient_id as PID, count(distinct i.image_pk_id) as num_images\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by PID\n	{collection,site}	{PID,num_images}	{public}	public	List of all Files Images By Collection, Site\n
RTPLANWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Plan Storage' and \n  visibility is null and\n  modality != 'RTPLAN'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
DistinguishedDigests	select\n   pixel_digest as distinguished_pixel_digest,\n   type_of_pixel_data,\n   sample_per_pixel,\n   number_of_frames,\n   pixel_rows,\n   pixel_columns,\n   bits_stored,\n   bits_allocated,\n   high_bit,\n   pixel_mask,\n   num_distinct_pixel_values,\n   pixel_value,\n   num_occurances\nfrom \n  distinguished_pixel_digests natural join\n  distinguished_pixel_digest_pixel_value	{}	{distinguished_pixel_digest,type_of_pixel_data,sample_per_pixel,number_of_frames,pixel_rows,pixel_columns,bits_stored,bits_allocated,high_bit,pixel_mask,num_distinct_values,pixel_value,num_occurances}	{duplicates,distinguished_digest}	posda_files	show series with distinguished digests and counts
GetDciodvfyErrorCantBeNegative	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'CantBeNegative'\n  and error_tag = ?\n  and error_value = ?\n	{error_tag,error_value}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_tag where error_type = 'CantBeNegative'
DicomFileTypesNotProcessed	select \n  distinct dicom_file_type, count(distinct file_id)\nfrom\n  dicom_file d natural join ctp_file\nwhere\n  visibility is null  and\n  not exists (\n    select file_id \n    from file_series s\n    where s.file_id = d.file_id\n  )\ngroup by dicom_file_type	{}	{dicom_file_type,count}	{dicom_file_type}	posda_files	List of Distinct Dicom File Types which have unprocessed DICOM files\n
ManifestsByFileId	select\n  cm_collection,\n  cm_site,\n  cm_patient_id,\n  cm_study_date,\n  cm_series_instance_uid,\n  cm_study_description,\n  cm_series_description,\n  cm_modality,\n  cm_num_files\nfrom\n  ctp_manifest_row\nwhere\n  file_id = ?\norder by \n  cm_index	{file_id}	{cm_collection,cm_site,cm_patient_id,cm_study_date,cm_series_instance_uid,cm_study_description,cm_series_description,cm_modality,cm_num_files}	{activity_timepoint_support,manifests}	posda_files	Get a manifest from database\n\n
GetMatchingRootID	select file_storage_root_id from file_storage_root where root_path = ?	{root_path}	{file_storage_root_id}	{Universal}	posda_files	Checks for the local environment's ID for a certain root path. Used by python_import_csv_filelist.py to insert file info into local development environments for files physically stored and referenced in internal posda production. \n\n(import list will have the root path for a file in prod, this will find the local id for that path)
GetNonDicomFilesByCollectionWithPath	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized, rel_path\nfrom\n  non_dicom_file natural join file_import\nwhere\n  collection = ? and\n  visibility is null\n	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized,rel_path}	{radcomp}	posda_files	Add a filter to a tab
IntakeImagesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,SopInstance,ImageType,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Files Images By Collection, Site\n
GetSeriesWithSignatureByCollectionSite	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and site_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection,site}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature,phi_review}	posda_files	Get a list of Series with Signatures by Collection\n
AllVisibleSubjects	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
SafeToHideDupSopsBeforeDate	select distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest < ?\nexcept\nselect distinct sop_instance_uid from (\n  select\n    distinct sop_instance_uid, file_id, max(import_time) latest\n  from file_location join file_import using(file_id) join import_event using (import_event_id)  \n    join file_sop_common using(file_id) join ctp_file using (file_id)\n  where sop_instance_uid in (\n    select distinct sop_instance_uid from (\n      select distinct sop_instance_uid, count(distinct file_id)\n      from file_sop_common natural join ctp_file\n      where project_name = ? and visibility is null group by sop_instance_uid\n      ) as foo\n    where count > 1\n    ) and visibility is null\n  group by sop_instance_uid, file_id\n) as foo where latest >= ?	{collection,break_date,collection_1,break_date_1}	{collection}	{meta,test,hello,bills_test}	posda_files	List of duplicate sops with file_ids and latest load date<br><br>\n<bold>Warning: may generate a lot of output</bold>
UpdateNonDicomEditCompareDisposition	update non_dicom_edit_compare_disposition set\n  num_edits_scheduled = ?,\n  num_compares_with_diffs = ?,\n  num_compares_without_diffs = ?,\n  current_disposition = 'Comparisons In Progress',\n  last_updated = now()\nwhere\n  subprocess_invocation_id = ?\n	{number_edits_scheduled,number_compares_with_diffs,number_compares_without_diffs,subprocess_invocation_id}	{}	{adding_ctp,for_scripting,non_dicom_edit}	posda_files	Update an entry in dicom_edit_compare_disposition\n\nFrom script only.  Don't run from user interface (needs valid subprocess_invocation_id)
GetDciodvfyErrorUnrecog	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'UnrecognizedEnumeratedValue'\n  and error_value = ?\n  and error_tag = ?\n  and error_index = ?	{error_value,error_tag,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
DispositonsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name,\n  value\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name,value}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
BackgroundProcessStatsWithInvoker	select\n  distinct command_executed, invoking_user as invoker, \n  max(when_script_ended - when_script_started) as longest,\n  min(when_script_ended - when_script_started) as shortest,\n  avg(when_script_ended - when_script_started) as avg, count(*) as times_invoked,\n  min(when_script_started) as first, max(when_script_started) as last\nfrom\n  background_subprocess natural join subprocess_invocation\nwhere\n  when_script_ended is not null\ngroup by command_executed, invoker	{}	{command_executed,invoker,longest,shortest,avg,times_invoked,first,last}	{invoking_user}	posda_files	Get a list of collections and sites\n
AllProcessedManifestsBySite	select\n  distinct file_id, cm_collection, cm_site,  sum(cm_num_files) as total_files\nfrom\n  ctp_manifest_row\nwhere\n  cm_site = ?\ngroup by file_id, cm_collection, cm_site	{site}	{file_id,cm_collection,cm_site,total_files}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
ListOfAvailableQueriesByTag	select tag, name, description from (\n  select\n    unnest(tags) as tag,\n    name, description\n  from queries\n) as foo\nwhere tag = ?\norder by name	{tag}	{tag,name,description}	{AllCollections,q_list}	posda_queries	Get a list of available queries
CloseActivity	update activity set\n  when_closed = now()\nwhere\n  activity_id = ?	{activity_id}	{}	{activity_timepoint_support,activity_support}	posda_queries	Close an activity\n\n
RTSTRUCTWithBadModality	select distinct\n  project_name as collection,\n  site_name as site, \n  patient_id,\n  series_instance_uid,\n  modality,\n  dicom_file_type,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join ctp_file natural join file_patient\n  natural join dicom_file\nwhere \n  dicom_file_type = 'RT Structure Set Storage' and \n  visibility is null and\n  modality != 'RTSTRUCT'\ngroup by\n  collection, site, patient_id, series_instance_uid, modality, dicom_file_type\norder by\n  collection, site, patient_id\n	{}	{collection,site,patient_id,series_instance_uid,modality,dicom_file_type,num_files}	{by_series,consistency,for_bill_series_consistency}	posda_files	Check a Series for Consistency\n
ListSrPublic	select \n  tdp.project as collection, dp_site_name as site, i.patient_id, dicom_file_uri \nfrom\n  general_image i, general_series s, trial_data_provenance tdp\nwhere\n  tdp.trial_dp_pk_id = i.trial_dp_pk_id and s.modality = 'SR' and s.general_series_pk_id = i.general_series_pk_id\n  and tdp.project like ?	{collection_like}	{collection,site,patient_id,dicom_file_uri}	{meta,test,hello,query_tabs,bills_test,view_structured_reports}	public	Add a filter to a tab
ListOfAvailableQueriesByTagLike	select distinct name, description, tags from (\n  select\n    unnest(tags) as tag,\n    name, description,\n    array_to_string(tags, ',') as tags\n  from queries\n) as foo\nwhere tag like ?\norder by name	{tag}	{name,description,tags}	{AllCollections,q_list}	posda_queries	Get a list of available queries
ListOfPublicElementsWithDispositionsBySopClassName	select\n  element_signature, vr , disposition, name_chain\nfrom\n  element_signature natural join public_disposition\nwhere\n  sop_class_uid = ? and name = ?\norder by element_signature\n	{sop_class_uid,name}	{element_signature,vr,disposition,name_chain}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Public Disposition of element by sig and VR for SOP Class and name
PrependTagToQuery	update queries\nset tags = array_prepend(?, tags)\nwhere name = ?	{tag,name}	{}	{meta,test,hello,query_tags}	posda_queries	Add a tag to a query
VisualReviewStatusById	select\n  distinct visual_review_instance_id as id, processing_status, review_status, dicom_file_type,\n  count(distinct image_equivalence_class_id) as num_equiv, \n  count(distinct series_instance_uid) as num_series\nfrom\n  image_equivalence_class natural join image_equivalence_class_input_image \n  natural join dicom_file natural join ctp_file\nwhere\n  visual_review_instance_id = ?\ngroup by id, processing_status, review_status, dicom_file_type	{id}	{id,processing_status,review_status,dicom_file_type,num_equiv,num_series}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_reports,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
SubjectsWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
ShowQueryTabHierarchyByTab	select \n     query_tab_name,\n      filter_name,\n      unnest(tags_enabled) as tag\n  from\n    query_tabs join query_tabs_query_tag_filter using(query_tab_name)\n    natural join query_tag_filter\n  where query_tab_name = ?\n	{query_tab_name}	{query_tab_name,filter_name,tag}	{meta,test,hello,query_tabs,bills_test}	posda_queries	Add a filter to a tab
DoesDoseReferenceBadPlan	select\n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  file_id\nfrom\n  file_series natural join\n  file_patient natural join ctp_file\nwhere\n  project_name = ? and\n  visibility is null and\n  file_id in (\nselect file_id from rt_dose d natural join file_dose  where\nnot exists (select sop_instance_uid from file_sop_common fsc where d.rt_dose_referenced_plan_uid\n= fsc.sop_instance_uid))	{collection}	{collection,site,patient_id,series_instance_uid,file_id}	{LinkageChecks,used_in_dose_linkage_check}	posda_files	Get list of RTDOSE which reference unknown SOPs\n\n
GetPosdaSopsForCompareLikeCollectionForSite	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name like ? and site_name = ?\n  and visibility is null	{collection,site}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
SimplePhiReportByScanVrScreenDeletedPT	select \n  distinct element_sig_pattern as element, vr, value, \n  tag_name as description, \n  private_disposition as disposition, count(*) as num_series\nfrom element_value_occurance natural join element_seen natural join value_seen\nwhere \n  phi_scan_instance_id = ? and vr = ? and\n  private_disposition in ('k', 'oi', 'h', 'o', null)\ngroup by element_sig_pattern, vr, value, tag_name, private_disposition	{scan_id,vr}	{element,vr,value,description,disposition,num_series}	{tag_usage,simple_phi}	posda_phi_simple	Status of PHI scans\n
GetPublicSopsForCompareByPatientId	select\n  distinct i.patient_id,\n  i.study_instance_uid,\n  s.series_instance_uid,\n  sop_instance_uid,\n  sop_class_uid,\n  s.modality,\n  count(*) as num_files\nfrom\n  general_image i,\n  trial_data_provenance tdp,\n  general_series s\nwhere  \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id \n  and i.general_series_pk_id = s.general_series_pk_id\n  and i.patient_id = ?	{patient_id}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,num_files}	{public_posda_counts}	public	Generate a long list of all unhidden SOPs for a collection in public<br>\n<em>This can generate a long list</em>
InboxContentAllByUserToDismiss	select\n user_name, user_inbox_content_id as id, operation_name,\n  current_status,\n  activity_id, brief_description,\n  when_script_started as when, \n  file_id, subprocess_invocation_id as sub_id,\n  command_line,\n  file_id_in_posda as spreadsheet_file_id\nfrom \n  user_inbox natural join\n  user_inbox_content natural join background_subprocess_report\n  natural join background_subprocess natural left join subprocess_invocation\n  natural left join spreadsheet_uploaded\n  natural left join activity_inbox_content natural left join\n  activity\nwhere user_name = ? and activity_id is null and current_status != 'dismissed'\norder by user_inbox_content_id desc	{user_name}	{user_name,id,operation_name,current_status,activity_id,brief_description,when,file_id,command_line,spreadsheet_file_id}	{AllCollections,queries,activity_support}	posda_queries	Get a list of available queries
InsertCollectionCountPerRound	insert into collection_count_per_round(\n  collection, file_count\n) values (\n  ?, ?\n)\n	{collection,num_files}	{}	{NotInteractive,Backlog}	posda_backlog	Insert a row into collection count per round
DistinctSopsInSeriesForComparePublic	select \n  sop_instance_uid, sop_class_uid, i.patient_id, modality\nfrom\n  general_image i, general_series s\nwhere\n  s.series_instance_uid = i.series_instance_uid and s.series_instance_uid = ?	{series_instance_uid}	{sop_instance_uid,sop_class_uid,modality,count}	{compare_series}	public	Get Distinct SOPs in Series with number files\nOnly visible filess\n
DistinctSopsInCollectionIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DoseSopToForByCollectionSite	select \n  distinct patient_id,  sop_instance_uid, \n  for_uid\nfrom \n  file_for natural join file_dose join file_sop_common using(file_id) join file_patient using (file_id)\nwhere\n  file_id in (\n    select file_id \n    from ctp_file natural join file_dose \n    where project_name = ? and site_name = ? and visibility is null\n  )\norder by patient_id	{collection,site}	{patient_id,sop_instance_uid,for_uid}	{"Structure Sets",sops,LinkageChecks,dose_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
GetFilePathAndModality	select\n  root_path || '/' || rel_path as path, modality\nfrom\n  file_location natural join file_storage_root join file_series using(file_id)\nwhere\n  file_id = ?	{file_id}	{path,modality}	{AllCollections,universal,public_posda_consistency}	posda_files	Get path to file by id
GetCollectionSitePatientStudyDateFileCountMaxMinLoadDateForPatientsByDateRange	select * from (select \n  collection, site, patient_id, qualified, study_date,\n  count(distinct file_id) as num_files, count (distinct sop_instance_uid) as num_sops,\n  min(date_trunc('day',import_time)) as earliest_day, max(date_trunc('day', import_time)) as latest_day\nfrom\n  clinical_trial_qualified_patient_id join file_patient using (patient_id) \n  join file_study using(file_id) join file_import using(file_id)\n  join file_sop_common using(file_id)\n  join import_event using(import_event_id)\nwhere patient_id in (\n  select \n    distinct patient_id\n  from\n    clinical_trial_qualified_patient_id join file_patient using (patient_id) \n    join file_import using(file_id)\n    join import_event using(import_event_id)\n  where \n    collection like ? and import_time > ? and import_time < ? and import_type not like 'script%'\n)\ngroup by collection, site, patient_id, qualified, study_date) as foo\nwhere earliest_day < ?	{collection_like,from,to,to_again}	{collection,site,patient_id,qualified,study_date,num_files,num_sops,earliest_day,latest_day}	{clin_qual}	posda_files	Create An Activity Timepoint\n\n
RoundSummary1VeryRecent	select\n  distinct round_id,\n  round_start, \n  round_end - round_start as duration, \n  round_end, \n  sum(num_entered + num_dups),\n  ((round_end - round_start) / sum(num_entered + num_dups)) as sec_per_file\nfrom\n  round natural join round_collection\nwhere\n  round_end is not null and (now() - round_end) < '1:00'\ngroup by \n  round_id, round_start, duration, round_end \norder by round_id	{}	{round_id,round_start,duration,round_end,sum,sec_per_file}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
UnHideFilesCSP	update ctp_file set visibility = null where file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_patient\n  where\n    project_name = ? and site_name = ?\n    and visibility = 'hidden' and patient_id = ?\n);\n	{collection,site,subject}	\N	{}	posda_files	UnHide all files hidden by Collection, Site, Subject\n
FindUnpopulatedPets	select\n  file_id, root_path || '/' || rel_path as file_path\nfrom file_location natural join file_storage_root\nwhere file_id in\n(\n  select distinct file_id from dicom_file df\n  where dicom_file_type = 'Positron Emission Tomography Image Storage'\n  and not exists (select file_id from file_pt_image pti where pti.file_id = df.file_id)\n)	{}	{file_id,file_path}	{populate_posda_files,bills_test}	posda_files	Get's all files which are PET's which haven't been imported into file_pt_image yet.\n\n<bold>Don't run interactively</bold>
GetAdverseFileEventsByEditEventId	select\n  adverse_file_event_id,\n  file_id,\n  event_description,\n  when_occured\nfrom\n  adverse_file_event natural join\n  dicom_edit_event_adverse_file_event\nwhere\n  dicom_edit_event_id = ?	{dicom_edit_event_id}	{adverse_file_event_id,file_id,event_description,when_occured}	{NotInteractive,used_in_import_edited_files}	posda_files	Get List of Adverse File Events for a given dicom_edit_event\nFor use in scripts\nNot really intended for interactive use\n
UpdCTQP	update clinical_trial_qualified_patient_id\n  set qualified = ?\nwhere\n  collection = ? and site = ? and patient_id = ?\n 	{qualified,collection,site,patient_id}	{}	{activity_timepoint_support}	posda_files	Create An Activity Timepoint\n\n
ShowAllHideEventsByCollectionSiteModality	select\n  file_id,\n  user_name,\n  time_of_change,\n  prior_visibility,\n  new_visibility,\n  reason_for\nfrom\n   file_visibility_change \nwhere file_id in (\n  select file_id \n  from ctp_file natural join file_series\n  where project_name = ? and site_name = ? and\n  modality = ?\n)	{collection,site,modality}	{file_id,user_name,time_of_change,prior_visibility,new_visibility,reason_for}	{old_hidden}	posda_files	Show All Hide Events by Collection, Site
SeriesInCollectionSiteForApplicationOfPrivateDisposition	select\n  distinct \n  patient_id, study_instance_uid, series_instance_uid\nfrom\n  file_patient natural join ctp_file natural join file_study \n  natural join file_sop_common natural join file_series\nwhere\n  collection = ? and site = ? and visibility is null\n	{collection,site}	{patient_id,study_instance_uid,series_instance_uid}	{by_collection_site,find_files}	posda_files	Get a patient, study, series hierarchy by collection, site
DismissInboxContentItem	update user_inbox_content\nset date_dismissed = now(),\ncurrent_status = 'dismissed'\nwhere user_inbox_content_id = ?\n\n	{user_inbox_content_id}	{}	{}	posda_queries	Set the date_dismissed value on an Inbox item
FindInconsistentSeries	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series,for_bill_series_consistency}	posda_files	Find Inconsistent Series\n
CreateDicomFileEditRow	insert into dicom_file_edit(\n  dicom_edit_event_id, from_file_digest, to_file_digest\n) values (?, ?, ?)\n	{dicom_edit_event_id,from_file_digest,to_file_digest}	{}	{Insert,NotInteractive,used_in_import_edited_files}	posda_files	Insert dicom_edit_event row\nFor use in scripts\nNot really intended for interactive use\n
Series In Public By PatientId	select \n  distinct series_instance_uid\nfrom\n  general_image i, trial_data_provenance tdp\nwhere\n  tdp.trial_dp_pk_id = i.trial_dp_pk_id and patient_id = ?\n	{patient_id}	{series_instance_uid}	{"Reconcile Public and Posda for CPTAC"}	public	Get the list of files by sop, excluding base series
PlansWithNoFrameOfRef	select \n  file_id,\n  root_path || '/' || rel_path as path\nfrom\n  file_location natural join file_storage_root natural join ctp_file\nwhere \n  file_id in (\n    select file_id \n    from file_plan p\n    where not exists (select for_uid from file_for f where f.file_id = p.file_id)\n  )	{}	{file_id,path}	{"Structure Sets",sops,LinkageChecks,plan_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
SeriesWithDupSopsWithConflictingPixels	select \n  distinct project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, count(distinct file_id)\nfrom\n  ctp_file natural join file_sop_common natural join file_patient natural join \n  file_study natural join file_series \nwhere sop_instance_uid in (\n  select distinct sop_instance_uid\n  from (\n    select\n      distinct sop_instance_uid, count(*)\n    from (\n      select\n        sop_instance_uid, unique_pixel_data.digest as pixel_digest\n      from\n        file_sop_common natural join file natural join file_image join\n        image using (image_id) join unique_pixel_data using (unique_pixel_data_id)\n    )as foo group by sop_instance_uid\n  ) as foo where count > 1\n)\ngroup by\n  project_name, site_name, patient_id, study_instance_uid, series_instance_uid\norder by \n  project_name, site_name, patient_id, count desc\n  	{}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,count}	{pix_data_dups}	posda_files	Find list of series with SOP with duplicate pixel data
RoundStatsByCollectionForDateRange	select\n  distinct collection, site, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ? and collection = ?\ngroup by collection, site, time order by time desc, collection	{interval,from,to,collection}	{collection,site,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
DistinctSeriesBySubjectPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,public}	public	Get Series in A Collection, Site, Subject\n
GetBacklogCountAndPrioritySummary	select\n  distinct collection, file_count as priority, count(*) as num_requests\nfrom\n  submitter natural join request natural join collection_count_per_round\nwhere\n  not file_in_posda\ngroup by collection, file_count\n	{}	{collection,priority,num_requests}	{NotInteractive,Backlog,backlog_status}	posda_backlog	Get List of Collections with Backlog and Priority Counts
ListOfPublicDispositionTables	select\n  distinct sop_class_uid, name, count(*)\nfrom\n  public_disposition\ngroup by\n  sop_class_uid, name\norder by\n  sop_class_uid, name	{}	{sop_class_uid,name,count}	{NotInteractive,ElementDisposition}	posda_phi	Get List of Public Disposition Tables
EquipmentByValueSignature	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,value,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of equipment, values seen in scan by VR with count\n
SubjectsWithDuplicateSopsWithConflictingGeometricInfo	select distinct patient_id, study_instance_uid, series_instance_uid, count(*)\nfrom\n  file_patient natural join file_sop_common natural join file_series natural join file_study\nwhere sop_instance_uid in (\n  select sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n    select \n      distinct sop_instance_uid, iop as image_orientation_patient,\n      ipp as image_position_patient,\n      pixel_spacing,\n      pixel_rows as i_rows,\n      pixel_columns as i_columns\n    from\n      file_sop_common join \n      file_patient using (file_id) join\n      file_image using (file_id) join \n      file_series using (file_id) join\n      file_study using (file_id) join\n      image using (image_id) join\n      file_image_geometry using (file_id) join\n      image_geometry using (image_geometry_id) \n    ) as foo \n    group by sop_instance_uid\n  ) as foo where count > 1\n) group by patient_id, study_instance_uid, series_instance_uid	{}	{patient_id,study_instance_uid,series_instance_uid,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs with conflicting Geometric Information by Patient Id, study, series\n
GetPrivateTagNameAndVrBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr}	{DispositionReport,NotInteractive,used_in_reconcile_tag_names}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
insert_list_of_roles	update query_tag_filter\nset tags_enabled = ?\nwhere filter_name = ?	{tag_list,role}	{}	{roles}	posda_queries	Insert a list of tags for a role\n
WindowLevelByPixelType	select \n  distinct window_width, window_center, count(*)\nfrom (select\n    distinct photometric_interpretation,\n    samples_per_pixel,\n    bits_allocated,\n    bits_stored,\n    high_bit,\n    coalesce(number_of_frames,1) > 1 as is_multi_frame,\n    pixel_representation,\n    planar_configuration,\n    modality,\n    file_id\n  from\n    image natural join file_image natural join file_series\n  ) as foo natural join file_win_lev natural join window_level\nwhere\n  photometric_interpretation = ? and\n  samples_per_pixel = ? and\n  bits_allocated = ? and\n  bits_stored = ? and\n  high_bit = ? and\n  pixel_representation = ? and\n  modality = ?\ngroup by window_width, window_center\n	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,modality}	{window_width,window_center,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
WhatHasComeInRecentlyWithSubjectByCollectionLikeAndFileInPosdaCount	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files, count(distinct posda_file_id) as num_files_in_posda,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\nand collection like ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to,collection_like}	{collection,site,subj,time,number_of_files,num_files_in_posda,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",backlog_round_history}	posda_backlog	Summary of rounds
DistinctSeriesByCollectionSiteIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and tdp.dp_site_name = ?\ngroup by series_instance_uid, modality	{project_name,site_name}	{series_instance_uid,modality,num_images}	{by_collection,find_series,intake,compare_collection_site,simple_phi}	intake	Get Series in A Collection, Site\n
FinalizePhiNonDicomInstance	update phi_non_dicom_scan_instance\nset pndsi_end_time = now()\nwhere phi_non_dicom_scan_instance_id = ?	{phi_non_dicom_scan_instance_id}	{}	{used_in_simple_phi,NotInteractive,non_dicom_phi}	posda_phi_simple	Get value seen if exists
GetThisWeeksRange	select \n  date_trunc('week', now()) as start_week,\n  date_trunc('week', now() + interval '7 days') as end_week,\n  date_trunc('day', now() + interval '1 day') as end_partial_week,\n  date_trunc('day', now()) as today\n	{}	{start_week,end_week,end_partial_week,today}	{downloads_by_date}	posda_files	Counts query by Collection, Site\n
IntakeSeriesWithSignatureByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as series_instance_uid,\n  concat(q.manufacturer, ":", q.manufacturer_model_name, ":",\n  q.software_versions) as signature\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{series_instance_uid,Modality,signature}	{intake}	intake	List of all Series By Collection, Site on Intake\n
RowsInDicomFileWithNoPixelInfoEarliest	select \n  file_id, root_path || '/' || rel_path as path\nfrom dicom_file natural join file_location natural join file_storage_root\nwhere has_pixel_data is null and file_is_present\norder by file_id limit ?	{num_rows}	{file_id,path}	{adding_pixels_to_dicom_file}	posda_files	List of files (id, path) which are dicom_files with undefined pixel info
CloseRound	update round\n  set round_end = now()\nwhere\n  round_id = ?\n	{round_id}	{}	{NotInteractive,Backlog}	posda_backlog	Close row in round (set end time)
GetSsVolumeReferencingUnknownImagesByCollection	select \n  distinct project_name as collection, \n  site_name as site, patient_id, \n  file_id \nfrom \n  ctp_file natural join file_patient \nwhere file_id in (\n   select\n    distinct file_id from ss_volume v \n    join ss_for using(ss_for_id) \n    join file_structure_set using (structure_set_id) \n  where \n     not exists (\n       select file_id \n       from file_sop_common s \n       where s.sop_instance_uid = v.sop_instance\n  )\n)\nand project_name = ?\nand visibility is null\norder by collection, site, patient_id	{collection}	{collection,site,patient_id,file_id}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
ImageFrameOfReferenceBySeries	select \n  distinct for_uid, count(*) as num_files\nfrom\n  file_series natural join file_sop_common natural join file_for natural join ctp_file\nwhere \n  series_instance_uid = ? and visibility is null\ngroup by for_uid	{series_instance_uid}	{for_uid,num_files}	{"Structure Sets",sops,LinkageChecks,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
RtdoseSopsByCollectionSiteDateRange	select distinct\n  sop_instance_uid\nfrom\n  file_series natural join ctp_file natural join file_sop_common\n  natural join file_import natural join import_event\nwhere \n  project_name = ? and site_name = ?\n  and visibility is null and import_time > ? and \n  import_time < ?\n  and modality = 'RTDOSE'	{collection,site,from,to}	{sop_instance_uid}	{Hierarchy,apply_disposition,hash_unhashed}	posda_files	Construct list of files in a collection, site in a Patient, Study, Series Hierarchy
GetRoiContoursAndFiles	select distinct root_path || '/' || rel_path as file_path, roi_id, roi_contour_id, roi_num, contour_num, geometric_type, number_of_points \nfrom roi_contour natural join roi natural join structure_set natural join file_structure_set natural join file_storage_root natural join file_location\nwhere file_id = ?	{file_id}	{file_path,roi_id,roi_contour_id,roi_num,contour_num,geometric_type,number_of_points}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
PosdaImagesByCollectionSitePlus	select distinct\n  patient_id,\n  sop_instance_uid,\n  study_instance_uid,\n  series_instance_uid,\n  digest\nfrom\n  file\n  natural join  file_patient\n  natural join file_series\n  natural join file_sop_common\n  natural join file_study\n   natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n\n	{collection,site}	{patient_id,sop_instance_uid,study_instance_uid,series_instance_uid,digest}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
GetDciodvfyErrorMissingAttr	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'MissingAttributes'\n  and error_subtype = ?\n  and error_tag = ?\n  and error_module = ?	{error_subtype,error_tag,error_module}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get an dciodvfy_errors row by error_text (if present)
VisibilityChangeEventsByReasonFor	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  date_trunc('hour', time_of_change) as when_done,\n  user_name, prior_visibility, new_visibility, reason_for, count(distinct file_id) as num_files,\n  count (distinct series_instance_uid) as num_series\nfrom\n   ctp_file natural join file_patient natural join file_series natural join file_visibility_change \nwhere reason_for = ?\ngroup by\n collection, site, patient_id, when_done, user_name, prior_visibility, new_visibility, reason_for\norder by when_done desc	{reason_for}	{collection,site,patient_id,when_done,user_name,prior_visibility,new_visibility,reason_for,num_files,num_series}	{meta,test,hello,bills_test,hide_events,show_hidden}	posda_files	Add a filter to a tab
GetSeriesWithImageAndNoEquivalenceClassByCollectionSiteDateRange	select distinct\n  project_name as collection, site_name as site,\n  patient_id, modality, series_instance_uid, \n  count(distinct sop_instance_uid) as num_sops,\n  count(distinct file_id) as num_files\nfrom\n  file_series fs natural join file_sop_common\n  natural join file_patient\n  natural join file_image natural join ctp_file\n  natural join file_import natural join import_event\nwhere project_name = ? and site_name = ? and visibility is null\n  and import_time > ? and import_time < ?\n  and (\n    select count(*) \n    from image_equivalence_class ie\n    where ie.series_instance_uid = fs.series_instance_uid\n  ) = 0\ngroup by\n  collection, site, patient_id, modality, series_instance_uid\n	{collection,site,from,to}	{collection,site,patient_id,modality,series_instance_uid,num_sops,num_files}	{signature,phi_review,visual_review}	posda_files	Get a list of Series with images by CollectionSite\n
RoundWithIntervalOverlap	select\n  round_id, collection,\n  round_created,\n  round_start,  \n  round_end - round_start as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and \n  round_end > ? and round_start < ?\norder by round_id, collection	{collection,from,to}	{round_id,collection,num_dups,round_created,round_start,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_analysis_reporting_tools,backlog_round_history}	posda_backlog	Summary of rounds
RoundCountsByCollection2Recent	select\n  round_id, collection,\n  round_created,\n  round_start - round_created as q_time,  \n  round_end - round_created as duration,\n  wait_count,\n  process_count,\n  num_entered,\n  num_failed,\n  num_dups,\n  num_requests,\n  priority\nfrom\n  round natural join round_counts natural join round_collection\nwhere collection = ? and (now() - round_end) < '1:00'\norder by round_id, collection	{collection}	{round_id,collection,round_created,q_time,duration,wait_count,process_count,num_entered,num_failed,num_dups,num_requests,priority}	{NotInteractive,Backlog,"Backlog Monitor",backlog_status}	posda_backlog	Summary of rounds
FileTypeModalityCountsByImportId	select\n  distinct  dicom_file_type, modality, count(*) as num_files\nfrom file_series natural join dicom_file\nwhere file_id in (\n  select distinct file_id\n  from file_import natural join import_event\n  where import_event_id = ?\n) group by dicom_file_type, modality	{import_event_id}	{dicom_file_type,modality,num_files}	{"ACRIN-NSCLC-FDG-PET Curation"}	posda_files	Get the list of files by sop, excluding base series
GetValueForTagBySeries	select\n  distinct series_instance_uid, element_signature as tag, value\nfrom\n  series_scan natural join scan_element natural join seen_value natural join element_signature\nwhere\n  series_instance_uid = ? and element_signature = ?	{series_instance_uid,tag}	{series_instance_uid,tag,value}	{tag_values}	posda_phi	Find Distinct value for a given tag for a particular scanned series\n
CreateSubprocessLine	insert into subprocess_lines(\n subprocess_invocation_id,\n line_number,\n line\n) values (\n  ?, ?, ?\n)	{subprocess_invocation_id,line_number,line}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Create a row in subprocess_lines table\n\nUsed when invoking a spreadsheet operation from a either a button or a spreadsheet \nto record data retrieved from subprocess (i.e response displayed on screen)
GetNRequestsForCollection	select \n  distinct request_id, collection, received_file_path, file_digest, time_received, size\nfrom \n  request natural join submitter\nwhere\n  collection = ? and not file_in_posda \norder by time_received \nlimit ?\n	{collection,num_rows}	{request_id,collection,received_file_path,file_digest,time_received,size}	{NotInteractive,Backlog}	posda_backlog	Get N Requests for a Given Collection
GetSimpleValuesForTag	select\n  distinct value\nfrom\n  element_seen natural join\n  element_value_occurance natural join\n  value_seen\nwhere element_sig_pattern = ? and vr = ?\n	{tag,vr}	{value}	{tag_values}	posda_phi_simple	Find Values for a given tag, vr in posda_phi_simple\n
SentToIntakeByDate	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Files Sent To Intake By Date\n
GetPublicInfoBySop	select \n  tdp.project, dp_site_name as site_name, dp_site_id as site_id,\n  patient_id, study_instance_uid, series_instance_uid\nfrom \n  general_image i, trial_data_provenance tdp \nwhere \n  tdp.trial_dp_pk_id = i.trial_dp_pk_id and sop_instance_uid = ?	{sop_instance_uid}	{project,site_name,site_id,patient_id,study_instance_uid,series_instance_uid}	{bills_test,comparing_posda_to_public}	public	Add a filter to a tab
FileType	select file_type\nfrom file\nwhere file_id = ?\n	{file_id}	{file_type}	{NotInteractive,used_in_background_processing}	posda_files	Get the file_type of a file, by file_id\n
FilesByReviewStatusByCollectionSiteWithVisibility	select\n  distinct\n  file_id,\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  series_instance_uid,\n  sop_instance_uid,\n  file_id,\n  visibility\nfrom\n  image_equivalence_class_input_image\n  join ctp_file using(file_id)\n  join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\nwhere \n  image_equivalence_class_id in (\n    select\n      image_equivalence_class_id \n    from\n      image_equivalence_class \n      join file_series using(series_instance_uid)\n      join ctp_file using(file_id)\n    where \n      project_name = ? and site_name = ?\n      and review_status = ?\n)	{collection,site,status}	{collection,site,patient_id,series_instance_uid,sop_instance_uid,file_id,visibility}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
InsertImportEvent	  insert into import_event(\n    import_type, import_time\n  ) values (\n    'Processing Backlog', ?\n  )	{time_tag}	{}	{NotInteractive,Backlog}	posda_files	Create an import_event
DistinctDispositionsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
CurrentPatientWithoutStatii	select \n  distinct project_name as collection,\n  site_name as site,\n  patient_id,\n  '<undef>' as patient_import_status\nfrom \n  ctp_file natural join file_patient p\nwhere \n  visibility is null and\n  not exists (select * from patient_import_status s where p.patient_id = s.patient_id)	{}	{collection,site,patient_id,patient_import_status}	{counts,patient_status,for_bill_counts}	posda_files	Get the current status of all patients
UpdateSendEvent	update dicom_send_event\n  set send_ended = now()\nwhere dicom_send_event_id = ?\n	{id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Update dicom_send_event_id after creation and completion of send\nFor use in scripts.\nNot meant for interactive use\n
PlanToSsLinkageByCollectionSite	select\n  sop_instance_uid as referencing_plan, ss_referenced_from_plan as referenced_ss\nfrom\n  file_plan natural join plan join file_sop_common using(file_id) natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null	{collection,site}	{referencing_plan,referenced_ss}	{"Structure Sets",sops,LinkageChecks,plan_linkages,struct_linkages}	posda_files	Get list of plan which reference unknown SOPs\n\n
CountsBySiteCollectionLikeDateRangePlus	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, series_date,\n    study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files,\n    min(import_time) as earliest,\n    max(import_time) as latest\nfrom\n  ctp_file join file_patient using(file_id)\n  join dicom_file using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  join file_import using(file_id)\n  join import_event using(import_event_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  file_id in (\n    select file_id \n    from file_import natural join import_event\n    where import_time > ? and import_time < ?\n  ) and project_name like ? and site_name like ? and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality, study_date, \n  series_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, series_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{from,to,collection_like,site}	{patient_id,image_type,dicom_file_type,modality,study_date,series_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files,earliest,latest}	{counts,count_queries}	posda_files	Counts query by Collection, Site\n
UpdateSeriesScan	update series_scan\n  set series_scan_status = ?\nwhere series_scan_id = ?	{series_scan_status,series_scan_id}	{}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Update Series Scan to set status\n
ActivityStuffMoreForAll	select\n  distinct subprocess_invocation_id, background_subprocess_id, user_inbox_content_id,\n  background_subprocess_report_id, file_id,\n  background_subprocess_report.name as report_type,\n  activity_id, when_script_started,\n  when_background_entered, when_script_ended, \n  invoking_user, user_to_notify, button_name,\n  operation_name, command_line\nfrom\n  subprocess_invocation natural left join background_subprocess natural left join background_subprocess_report\n  natural left join user_inbox_content natural left join activity_inbox_content\norder by subprocess_invocation_id desc\n	{}	{subprocess_invocation_id,background_subprocess_id,user_inbox_content_id,background_subprocess_report_id,file_id,report_type,activity_id,when_script_started,when_background_entered,when_script_ended,invoking_user,user_to_notify,button_name,operation_name,command_line}	{activity_timepoint_support}	posda_queries	Create An Activity Timepoint\n\n
GetCurrentEditEventRowId	select currval('dicom_edit_event_dicom_edit_event_id_seq') as id	{}	{id}	{NotInteractive,used_in_import_edited_files}	posda_files	Get current dicom_edit_event_id\nFor use in scripts\nNot really intended for interactive use\n
GetSeenValueId	select currval('seen_value_seen_value_id_seq') as id	{}	{id}	{UsedInPhiSeriesScan,NotInteractive}	posda_phi	Get current value of seen_value_id sequence
DistinctDispositonsNeededSimple	select \n  distinct \n  element_seen_id as id, \n  element_sig_pattern,\n  vr,\n  tag_name\nfrom\n  element_seen\n  natural join element_value_occurance\n  natural join value_seen\nwhere\n  is_private and \n  private_disposition is null\n	{}	{id,element_sig_pattern,vr,tag_name}	{tag_usage,simple_phi_maint,phi_maint}	posda_phi_simple	Private tags with no disposition with values in phi_simple
AddCompletionTimeToBackgroundProcess	update background_subprocess set\n  when_script_ended = now()\nwhere\n  background_subprocess_id = ?\n	{background_subprocess_id}	{}	{NotInteractive,used_in_background_processing}	posda_queries	Add when_script_ended to a background_subprocess  row\n\nused in a background subprocess when complete
ListOfQueriesPerformedByUser	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n  invoking_user = ?	{user}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
DuplicatesInDifferentSeriesByCollectionSite	select\n  distinct collection, site, subj_id, study_instance_uid, series_instance_uid, sop_instance_uid,\n  file_id, file_path\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    study_instance_uid, series_instance_uid,\n    sop_instance_uid,\n    file_id, root_path ||'/' || rel_path as file_path\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient natural join file_study natural join file_series\n    join file_location using(file_id) join file_storage_root using(file_storage_root_id)\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(distinct file_id) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null and project_name = ? and site_name = ?\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\norder by sop_instance_uid\n\n	{collection,site}	{collection,site,subj_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id,file_path}	{duplicates,dup_sops,hide_dup_sops,sops_different_series}	posda_files	Return a count of duplicate SOP Instance UIDs\n
FilesRemainingToBeHiddenByScanInstance	select\n  distinct file_id\nfrom\n  file_sop_common natural\n  join ctp_file\nwhere\n  visibility is null and\n  sop_instance_uid in (\n    select\n      sop_instance_uid\n    from\n      file_sop_common\n      where file_id in (\n          select\n            distinct file_id\n          from\n             image_equivalence_class natural join\n             image_equivalence_class_input_image\n           where\n             visual_review_instance_id = ? and\n             review_status = 'Bad'\n        )\n     )	{visual_review_instance_id}	{file_id}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_status}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
TotalPosdaSeriesCounts	select\n  distinct project_name as collection, site_name as site,  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom \n  ctp_file natural join file_series \nwhere\n  visibility is null group by collection, site           \norder by collection, site	{}	{collection,site,num_series,num_files}	{meta,test,hello,query_tabs,bills_test}	posda_files	Files for a specific patient which were first received after a specific time
CountsByCollectionSiteSubject	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join dicom_file using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality,\n  study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  dicom_file_type, modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,patient_id}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site, Subject\n
GetPosdaSopsForCompareLikeCollection	select\n  distinct patient_id,\n  study_instance_uid, \n  series_instance_uid, \n  sop_instance_uid,\n  sop_class_uid,\n  modality,\n  dicom_file_type,\n  root_path || '/' || rel_path as file_path,\n  file_id\nfrom\n  ctp_file\n  natural join dicom_file\n  natural join file_patient\n  natural join file_study\n  natural join file_series\n  natural join file_sop_common\n  natural join file_location\n  natural join file_storage_root\nwhere\n  project_name like ? \n  and visibility is null	{collection}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,sop_class_uid,modality,dicom_file_type,file_path,file_id}	{public_posda_counts}	posda_files	Generate a long list of all unhidden SOPs for a collection in posda<br>\n<em>This can generate a long list</em>
DistinctHiddenFilesInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is not null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
DistinctSopsInSeries	select distinct sop_instance_uid, count(*)\nfrom file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{by_series_instance_uid,duplicates,posda_files,sops}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
AreVisibleFilesMarkedAsBadOrUnreviewed	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ?\n  and visibility is null\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  processing_status\norder by\n  series_instance_uid	{collection,site}	{series_instance_uid,dicom_file_type,modality,review_status,processing_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_events}	posda_files	Get visual review status report by series for Collection, Site
SeriesVisualReviewResultsByCollectionSiteStatus	select \n  distinct series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status,\n  count(distinct file_id) as num_files\nfrom \n  dicom_file natural join \n  file_series natural join \n  ctp_file join \n  image_equivalence_class using(series_instance_uid)\nwhere\n  project_name = ? and\n  site_name = ? and review_status = ?\ngroup by\n  series_instance_uid,\n  dicom_file_type,\n  modality,\n  review_status\norder by\n  series_instance_uid	{project_name,site_name,status}	{series_instance_uid,dicom_file_type,modality,review_status,num_files}	{find_series,equivalence_classes,consistency,visual_review_results,hide_files}	posda_files	Get visual review status report by series for Collection, Site
GetCountSsVolume	select count(distinct sop_instance_uid) as num_links from \n(select \n  for_uid, study_instance_uid, series_instance_uid,\n  sop_class as sop_class_uid, sop_instance as sop_instance_uid\n  from ss_for natural join ss_volume where structure_set_id in (\n    select \n      structure_set_id \n    from\n      file_structure_set fs, file_sop_common sc\n    where\n      sc.file_id = fs.file_id and sop_instance_uid = ?\n)\n) as foo;	{sop_instance_uid}	{num_links}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get Structure Set Volume\n\n
WherePatientSits	select\n  distinct project_name as collection,\n  site_name as site,\n  visibility,\n  patient_id,\n  patient_name,\n  series_instance_uid,\n  modality,\n  count (distinct file_id) as num_files\nfrom\n  file_patient natural left join\n  file_series natural left join\n  ctp_file\nwhere\n  patient_id = ?\ngroup by\n  project_name, site_name, visibility, \n  patient_id, patient_name,\n  series_instance_uid, modality\norder by \n  project_name, site_name, patient_id,\n  modality\n	{patient_id}	{collection,site,visibility,patient_id,patient_name,series_instance_uid,modality,num_files}	{adding_ctp}	posda_files	Get Series in A Collection\n
GetEditStatusExt	select\n  subprocess_invocation_id as id,\n  start_creation_time, end_creation_time - start_creation_time as duration,\n  number_edits_scheduled as to_edit,\n  number_compares_with_diffs as changed,\n  number_compares_without_diffs as not_changed,\n  current_disposition as disposition,\n  dest_dir, command_line, b.crash\nfrom\n  dicom_edit_compare_disposition  join subprocess_invocation using (subprocess_invocation_id)\n  join background_subprocess b using(subprocess_invocation_id)\norder by start_creation_time desc	{}	{id,start_creation_time,duration,to_edit,changed,not_changed,disposition,dest_dir,command_line,crash}	{adding_ctp,find_patients,series_selection,check_edits,testing_edit_objects,edit_status,crash}	posda_files	Get List of visible patients with CTP data
CreateSimpleElementValueOccurance	insert into element_value_occurance(\nelement_seen_id, value_seen_id, series_scan_instance_id, phi_scan_instance_id\n)values(?, ?, ?, ?)	{element_seen_id,value_seen_id,series_scan_instance_id,scan_instance_id}	{}	{used_in_simple_phi,NotInteractive}	posda_phi_simple	Create a new scanned value instance
GetFromToDigestsEditCompare	select from_file_digest, to_file_digest from dicom_edit_compare where subprocess_invocation_id = ?	{subprocess_invocation_id}	{from_file_digest,to_file_digest}	{bills_test,posda_db_populate}	posda_files	Add a filter to a tab
VrsSeen	select distinct vr, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ?\n) as foo\ngroup by vr\norder by vr\n	{scan_id}	{vr,count}	{tag_usage}	posda_phi	List of VR's seen in scan (with count)\n
NumFilesToMigrate	select\n  count(*) as num_files\nfrom\n  file_location natural join file_storage_root\nwhere\n  storage_class = ?	{storage_class}	{num_files}	{used_in_file_import_into_posda,used_in_file_migration}	posda_files	Get count of files relative to storage root
GetDupContourCountsExtendedByCollection	select\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  file_id,\n  num_dup_contours\nfrom (\n  select \n    distinct file_id, count(*) as num_dup_contours\n  from\n    file_roi_image_linkage \n  where \n    contour_digest in (\n    select contour_digest\n    from (\n      select \n        distinct contour_digest, count(*)\n      from\n        file_roi_image_linkage group by contour_digest\n    ) as foo\n    where count > 1\n  ) group by file_id \n) foo join ctp_file using (file_id) join file_patient using(file_id)\nwhere project_name = ? and visibility is null\norder by num_dup_contours desc	{collection}	{collection,site,patient_id,file_id,num_dup_contours}	{"Structure Sets",sops,LinkageChecks,dup_contours}	posda_files	Get list of plan which reference unknown SOPs\n\n
ListOfQueriesPerformedByQueryName	select\n  query_invoked_by_dbif_id as id,\n  query_name,\n  query_end_time - query_start_time as duration,\n  invoking_user as invoked_by,\n  query_start_time as at, \n  number_of_rows\nfrom\n  query_invoked_by_dbif\nwhere\n query_name = ?	{query_name}	{id,query_name,duration,invoked_by,at,number_of_rows}	{AllCollections,q_stats}	posda_queries	Get a list of collections and sites\n
GetPosdaPhiSimplePrivateElements	select\n  element_seen_id,\n  element_sig_pattern,\n  vr,\n  is_private,\n  private_disposition,\n  tag_name\nfrom element_seen\nwhere element_sig_pattern like '%"%'\n\n	{}	{element_seen_id,element_sig_pattern,vr,is_private,private_disposition,tag_name}	{NotInteractive,used_in_reconcile_tag_names}	posda_phi_simple	Get the relevant features of an element_signature in posda_phi_simple schema
ListOfElementSignaturesAndVrs	select\n  distinct element_signature, vr, name_chain, count(*)\nfrom\n  element_signature\ngroup by element_signature, vr, name_chain\n	{}	{element_signature,vr,name_chain,count}	{NotInteractive,Update,ElementDisposition}	posda_phi	Get Disposition of element by sig and VR
DuplicateFilesBySop	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, sop_instance_uid, modality, file_id,\n    root_path || '/' || file_location.rel_path as file_path,\n    count(*) as num_uploads,\n    min(import_time) as first_upload, \n    max(import_time) as last_upload\nfrom\n  file_patient left join ctp_file using(file_id)\n  join file_sop_common using(file_id)\n  join file_series using(file_id)\n  join file_location using(file_id)\n  join file_storage_root using(file_storage_root_id)\n  join file_import using (file_id)\n  join import_event using (import_event_id)\nwhere\n  sop_instance_uid = ?\n  and visibility is null\ngroup by\n  project_name, site_name, patient_id, sop_instance_uid, modality, \n  file_id, file_path\norder by\n  collection, site, patient_id, sop_instance_uid, modality\n	{sop_instance_uid}	{collection,site,patient_id,sop_instance_uid,modality,file_id,file_path,num_uploads,first_upload,last_upload}	{duplicates}	posda_files	Counts query by Collection, Site\n
DistinctSeriesByPatient	select distinct series_instance_uid, patient_id, count(distinct file_id) as num_files,\n  count(distinct sop_instance_uid) as num_sops\nfrom\n  file_series natural join file_patient natural join file_sop_common\n  natural left join ctp_file\nwhere\n  patient_id = ? and visibility is null\ngroup by series_instance_uid, patient_id\n\n	{patient_id}	{series_instance_uid,patient_id,num_files,num_sops}	{find_series,search_series,send_series,phi_simple,simple_phi,dciodvfy,series_selection,ctp_details}	posda_files	Get Series in for a patient\n
GetEquipmentInfoById	select\n  file_id,\n  manufacturer,\n  institution_name,\n  institution_addr,\n  station_name,\n  inst_dept_name,\n  manuf_model_name,\n  dev_serial_num,\n  software_versions,\n  spatial_resolution,\n  last_calib_date,\n  last_calib_time,\n  pixel_pad\nfrom file_equipment\nwhere file_id = ?	{file_id}	{file_id,manufacturer,institution_name,institution_addr,station_name,inst_dept_name,manuf_model_name,dev_serial_num,software_versions,spatial_resolution,last_calib_date,last_calib_time,pixel_pad}	{reimport_queries}	posda_files	Get file path from id
CreateDciodvfyError	insert into dciodvfy_error(\n  error_type, error_tag, error_subtype, error_module,\n  error_reason, error_index, error_value, error_text\n) values (\n  ?, ?, ?, ?,\n  ?, ?, ?, ?\n)	{error_type,error_tag,error_subtype,error_module,error_reason,error_index,error_value,error_text}	{}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Create a dciodvfy_errors row by error_text 
GetXlsToConvert	select \n  file_id, file_type, file_sub_type, collection, site, subject, visibility, date_last_categorized\nfrom\n  non_dicom_file\nwhere\n collection = ? and file_type = 'xls' and visibility is null	{collection}	{file_id,file_type,file_sub_type,collection,site,subject,visibility,date_last_categorized}	{radcomp}	posda_files	Add a filter to a tab
dicom_files_with_no_ctp_file_like_pat	select \n  distinct patient_id,\n  dicom_file_type, \n  modality, \n  count(distinct file_id) as num_files, \n  min(import_time) as earliest, \n  max(import_time) as latest \nfrom\n  dicom_file d natural join\n  file_patient natural join \n  file_series natural join\n  file_import natural join\n  import_event\nwhere not exists (select file_id from ctp_file c where c.file_id = d.file_id) and patient_id like ?\ngroup by patient_id, dicom_file_type, modality	{patient_id_pattern}	{patient_id,dicom_file_type,modality,num_files,earliest,latest}	{meta,test,hello,query_tabs,bills_test}	posda_files	Add a filter to a tab
VisibleImagesWithDetailsByVisualIdAndTypeAndStatus	select \n  distinct patient_id, study_instance_uid, series_instance_uid, sop_instance_uid, modality, \n  root_path || '/' || rel_path as path\nfrom \n  file_patient natural join file_study natural join file_series natural join \n  file_location natural join file_storage_root natural join\n  file_sop_common natural join ctp_file\nwhere series_instance_uid in (\n  select\n    distinct series_instance_uid\n  from\n    image_equivalence_class natural join file_series natural join\n    image_equivalence_class_input_image natural join dicom_file natural join ctp_file\n  where\n    visual_review_instance_id = ? and \n    processing_status = ? and review_status = ? and \n    dicom_file_type = ?\n)\nand visibility is null	{visual_review_instance_id,processing_status,review_status,dicom_file_type}	{patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality,path}	{by_collection,find_series,compare_collection_site,search_series,edit_files,simple_phi,dciodvfy,ctp_details,select_for_phi,visual_review_new_workflow}	posda_files	Get Series in A Collection, site with dicom_file_type, modality, and sop_count\n
RoiLinkagesByFileId	select\n  distinct roi_id,\n  linked_sop_instance_uid as sop_instance_uid,\n  contour_type\nfrom\n  file_roi_image_linkage\nwhere file_id =?	{file_id}	{roi_id,sop_instance_uid,contour_type}	{LinkageChecks,used_in_struct_linkage_check}	posda_files	Get list of Roi with info by file_id\n\n
GetDciodvfyErrorAttrSpecWithIndex	select\n  dciodvfy_error_id as id\nfrom \n  dciodvfy_error\nwhere\n  error_type = 'AttributeSpecificErrorWithIndex'\n  and error_tag = ?\n  and error_subtype= ?\n  and error_index = ?	{error_tag,error_subtype,error_index}	{id}	{NotInteractive,used_in_dciodvfy}	posda_phi_simple	Get dciodvfy_errors row where subtype = AttributeSpecificErrorWithIndex
GetPlansAndSSReferences	select sop_instance_uid as plan_referencing,\nss_referenced_from_plan as ss_referenced\nfrom plan natural join file_plan join file_sop_common using(file_id)	{}	{plan_referencing,ss_referenced}	{"Structure Sets",sops,LinkageChecks}	posda_files	Get list of plan and ss sops where plan references ss\n\n
DiskSpaceByCollectionSummary	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
FindInconsistentStudyIgnoringStudyTimeIncludingPatientIdAll	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join file_patient natural join ctp_file\n    where\n      visibility is null\n    group by\n      patient_id, study_instance_uid, study_date,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{}	{study_instance_uid}	{by_study,consistency,study_consistency}	posda_files	Find Inconsistent Studies\n
PhiScanStatus	select\n  phi_scan_instance_id as id,\n  start_time,\n  end_time,\n  end_time - start_time as duration,\n  description,\n  num_series as to_scan,\n  num_series_scanned as scanned\nfrom \n  phi_scan_instance\norder by id\n	{}	{id,start_time,end_time,duration,description,to_scan,scanned}	{tag_usage,phi_review,phi_status,scan_status}	posda_phi_simple	Status of PHI scans\n
ManifestsByDate	select\n  distinct file_id, import_time, size, root_path || '/' || l.rel_path as path, i.file_name as alt_path\nfrom\n  file_location l join file_storage_root using(file_storage_root_id) \n  join file_import i using (file_id) natural join file join import_event using(import_event_id)\nwhere\n  import_time >?and import_time < ? and\n  file_type like '%ASCII%' and\n  l.rel_path like '%/Manifests/%'\norder by import_time	{from,to}	{file_id,import_time,size,path,alt_path}	{activity_timepoint_support,manifests}	posda_files	Create An Activity Timepoint\n\n
ToExamineRecentFiles	select \n  file_id, project_name as collection, site_name as site,\n  patient_id, series_instance_uid, dicom_file_type, modality\nfrom\n  ctp_file natural join file_patient natural join dicom_file natural join file_series where file_id in \n  (\n     select file_id from \n     (  \n        select \n           distinct file_id, min(import_time) as import_time \n        from \n          file_import natural join import_event \n        where file_id in \n        (\n          select \n            distinct file_id \n          from \n             ctp_file natural join file_import natural join import_event\n             natural join file_patient \n           where patient_id =? and import_time > ?\n         ) group by file_id\n      ) as foo\n      where import_time > ?\n  )	{patient_id,import_time_1,import_time_2}	{file_id,collection,site,patient_id,series_instance_uid,dicom_file_type,modality}	{meta,test,hello,query_tabs,bills_test}	posda_files	Files for a specific patient which were first received after a specific time
DistinctSeriesHierarchyByCollectionPublic	select\n  distinct i. patient_id, i.study_instance_uid, s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by patient_id, study_instance_uid, series_instance_uid, modality	{project_name}	{patient_id,study_instance_uid,series_instance_uid,modality,num_images}	{by_collection,find_series,public,series_search}	public	Get Series in A Collection\n
RoundStatsWithCollectionSiteSubjectForDateRange	select\n  distinct collection, site, subj, date_trunc(?, time_received) as time,\n  count(*) as number_of_files,\n  max(time_entered - time_received) as max_delay,\n  min(time_entered - time_received) as min_delay\nfrom request natural join submitter\nwhere time_received > ? and time_received < ?\ngroup by collection, site, subj, time order by time desc, collection, site, subj	{interval,from,to}	{collection,site,subj,time,number_of_files,max_delay,min_delay}	{NotInteractive,Backlog,"Backlog Monitor",for_bill}	posda_backlog	Summary of rounds
\.


--
-- Data for Name: query_tabs; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.query_tabs (query_tab_name, query_tab_description, defines_dropdown, sort_order, defines_search_engine) FROM stdin;
\.


--
-- Data for Name: query_tabs_query_tag_filter; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.query_tabs_query_tag_filter (query_tab_name, filter_name, sort_order) FROM stdin;
\.


--
-- Data for Name: query_tag_filter; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.query_tag_filter (filter_name, tags_enabled) FROM stdin;
\.


--
-- Data for Name: role; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.role (role_name) FROM stdin;
\.


--
-- Data for Name: role_tabs; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.role_tabs (role_name, query_tab_name, sort_order) FROM stdin;
\.


--
-- Data for Name: spreadsheet_operation; Type: TABLE DATA; Schema: dbif_config; Owner: -
--

COPY dbif_config.spreadsheet_operation (operation_name, command_line, operation_type, input_line_format, tags) FROM stdin;
\.


--
-- Name: background_buttons_background_button_id_seq; Type: SEQUENCE SET; Schema: dbif_config; Owner: -
--

SELECT pg_catalog.setval('dbif_config.background_buttons_background_button_id_seq', 1, false);


--
-- Name: chained_query_chained_query_id_seq; Type: SEQUENCE SET; Schema: dbif_config; Owner: -
--

SELECT pg_catalog.setval('dbif_config.chained_query_chained_query_id_seq', 1, false);


--
-- Name: popup_buttons_popup_button_id_seq1; Type: SEQUENCE SET; Schema: dbif_config; Owner: -
--

SELECT pg_catalog.setval('dbif_config.popup_buttons_popup_button_id_seq1', 1, false);


--
-- PostgreSQL database dump complete
--

