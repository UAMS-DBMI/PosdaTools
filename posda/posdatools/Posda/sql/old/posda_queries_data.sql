--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.4
-- Dumped by pg_dump version 9.5.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: queries; Type: TABLE; Schema: public; Owner: quasar
--

CREATE TABLE queries (
    name text NOT NULL,
    query text,
    args text[],
    columns text[],
    tags text[],
    schema text,
    description text
);


ALTER TABLE queries OWNER TO quasar;

--
-- Data for Name: queries; Type: TABLE DATA; Schema: public; Owner: quasar
--

COPY queries (name, query, args, columns, tags, schema, description) FROM stdin;
ActiveQueriesOld	select\n  datname as db_name, procpid as pid,\n  usesysid as user_id, usename as user,\n  waiting, now() - xact_start as since_xact_start,\n  now() - query_start as since_query_start,\n  now() - backend_start as since_back_end_start,\n  current_query\nfrom\n  pg_stat_activity\nwhere\n  datname = ?\n	{db_name}	{db_name,pid,user_id,user,waiting,since_xact_start,since_query_start,since_back_end_start,current_query}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 8.4.20 (Current Linux)\n
AllHiddenSubjects	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere patient_id in (\n    select distinct patient_id \n    from file_patient\n  except \n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n) group by patient_id, project_name, site_name\norder by project_name, site_name, patient_id;\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects}	posda_files	Find All Subjects which have only hidden files\n
AllPixelInfo	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from ctp_file\n  where visibility is null\n)\n	{}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByBitDepth	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and bits_allocated = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByModality	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_series \n  where visibility is null and modality = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllPixelInfoByPhotometricInterp	select\n  f.file_id as file_id, root_path || '/' || rel_path as file,\n  file_offset, size, modality,\n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from\n    ctp_file natural join file_image natural join image\n  where visibility is null and photometric_interpretation = ?\n)\n	{bits_allocated}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,modality}	{}	posda_files	Get pixel descriptors for all files\n
AllSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
AllSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates regardless of duplicates\n
DistinctSeriesBySubjectIntake	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,intake}	intake	Get Series in A Collection, Site, Subject\n
AllSubjectsWithNoStatus	select\n  distinct patient_id, project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file\nwhere\n  patient_id in (\n    select \n      distinct patient_id\n    from\n      file_patient p\n    where\n       not exists (\n         select\n           patient_id\n         from\n            patient_import_status s\n         where\n            p.patient_id = s.patient_id\n       )\n  ) \n  and visibility is null\ngroup by patient_id, project_name, site_name\norder by project_name, site_name, patient_id\n	{}	{patient_id,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	All Subjects With No Patient Import Status\n
AllValuesByElementSig	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
AllVisibleSubjects	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
AllVisibleSubjectsByCollection	select\n  distinct patient_id,\n  patient_import_status as status,\n  project_name, site_name,\n  count(*) as num_files\nfrom\n  file_patient natural join ctp_file natural join patient_import_status\nwhere\n  patient_id in (\n    select patient_id \n    from\n      file_patient natural join ctp_file \n    where\n      project_name = ? and\n      visibility is null\n  ) and\n  visibility is null\ngroup by patient_id, status, project_name, site_name\norder by project_name, status, site_name, patient_id;\n	{collection}	{patient_id,status,project_name,site_name,num_files}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
AllVrsByElementSig	select distinct vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\nwhere\n  scan_event_id = ? and\n  element_signature = ?\n) as foo\ngroup by element_signature, vr, equipment_signature\norder by element_signature, vr, equipment_signature\n	{scan_id,tag_signature}	{vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of values seen in scan by ElementSignature with VR and count\n
AverageSecondsPerFile	select avg(seconds_per_file) from (\n  select (send_ended - send_started)/number_of_files as seconds_per_file \n  from dicom_send_event where send_ended is not null and number_of_files > 0\n  and send_started > ? and send_ended < ?\n) as foo\n	{from_date,to_date}	{avg}	{send_to_intake}	posda_files	Average Time to send a file between times\n
ComplexDuplicatePixelData	select \n  distinct project_name, site_name, patient_id, series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_patient natural join file_series \nwhere \n  file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count = ?\n    )\n    and visibility is null\n  ) \ngroup by project_name, site_name, patient_id, series_instance_uid\norder by count desc;\n	{count}	{project_name,site_name,patient_id,series_instance_uid,count}	{pix_data_dups}	posda_files	Find series with duplicate pixel count of <n>\n
CountsByCollection	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection\n
GetInsertedSendId	select currval('dicom_send_event_dicom_send_event_id_seq') as id\n	{}	{id}	{NotInteractive,SeriesSendEvent}	posda_files	Get dicom_send_event_id after creation\nFor use in scripts.\nNot meant for interactive use\n
GetPatientStatus	select\n  patient_import_status as status\nfrom\n  patient_import_status\nwhere\n  patient_id = ?\n	{patient_id}	{status}	{NotInteractive,PatientStatus,Update}	posda_files	\N
CountsByCollectionSite	select\n  distinct\n    patient_id, image_type, modality, study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id, image_type, modality, study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site}	{patient_id,image_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site\n
CountsByCollectionSiteSubject	select\n  distinct\n    patient_id, image_type, dicom_file_type, modality,\n    study_date, study_description,\n    series_description, study_instance_uid, series_instance_uid,\n    manufacturer, manuf_model_name, software_versions,\n    count(distinct sop_instance_uid) as num_sops,\n    count(distinct file_id) as num_files\nfrom\n  ctp_file join file_patient using(file_id)\n  join file_series using(file_id)\n  join file_sop_common using(file_id)\n  join dicom_file using(file_id)\n  join file_study using(file_id)\n  join file_equipment using(file_id)\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere\n  project_name = ? and site_name = ? and patient_id = ?\n  and visibility is null\ngroup by\n  patient_id, image_type, dicom_file_type, modality,\n  study_date, study_description,\n  series_description, study_instance_uid, series_instance_uid,\n  manufacturer, manuf_model_name, software_versions\norder by\n  patient_id, study_instance_uid, series_instance_uid, image_type,\n  dicom_file_type, modality, study_date, study_description,\n  series_description,\n  manufacturer, manuf_model_name, software_versions\n	{collection,site,patient_id}	{patient_id,image_type,dicom_file_type,modality,study_date,study_description,series_description,study_instance_uid,series_instance_uid,manufacturer,manuf_model_name,software_versions,num_sops,num_files}	{counts}	posda_files	Counts query by Collection, Site, Subject\n
CreateFileSend	insert into dicom_file_send(\n  dicom_send_event_id, file_path, status, file_id_sent\n) values (\n  ?, ?, ?, ?\n)\n	{id,path,status,file_id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Add a file send row\nFor use in scripts.\nNot meant for interactive use\n
DatabaseSize	SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))\n        ELSE 'No Access'\n    END AS SIZE\nFROM pg_catalog.pg_database d\n    ORDER BY\n    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')\n        THEN pg_catalog.pg_database_size(d.datname)\n        ELSE NULL\n    END DESC -- nulls first\n    LIMIT 20;\n	{}	{Name,Owner,Size}	{postgres_status}	posda_files	Show active queries for a database\nWorks for PostgreSQL 9.4.5 (Current Mac)\n
DatesOfUploadByCollectionSite	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event\n  natural join ctp_file\nwhere project_name = ? and site_name = ? \n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
DatesOfUploadByCollectionSiteVisible	select distinct date_trunc as date, count(*) as num_uploads from (\n select \n  date_trunc('day', import_time),\n  file_id\nfrom file_import natural join import_event natural join file_sop_common\n  natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n) as foo\ngroup by date\norder by date\n	{collection,site}	{date,num_uploads}	{receive_reports}	posda_files	Show me the dates with uploads for Collection from Site\n
DiskSpaceByCollection	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  where project_name = ?\n  )\ngroup by project_name\n	{collection}	{collection,total_bytes}	{by_collection,posda_files,storage_used}	posda_files	Get disk space used by collection\n
DiskSpaceByCollectionSummary	select\n  distinct project_name as collection, sum(size) as total_bytes\nfrom\n  ctp_file natural join file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\ngroup by project_name\norder by total_bytes\n	{}	{collection,total_bytes}	{by_collection,posda_files,storage_used,summary}	posda_files	Get disk space used for all collections\n
DistinctSeriesByCollection	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join ctp_file\nwhere\n  project_name = ? \n  and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{project_name}	{series_instance_uid,modality,count}	{by_collection,find_series}	posda_files	Get Series in A Collection\n
DistinctSeriesBySubject	select distinct series_instance_uid, modality, count(*)\nfrom (\nselect distinct series_instance_uid, sop_instance_uid, modality from (\nselect\n   distinct series_instance_uid, modality, sop_instance_uid,\n   file_id\n from file_series natural join file_sop_common\n   natural join file_patient natural join ctp_file\nwhere\n  patient_id = ? and project_name = ? \n  and site_name = ? and visibility is null)\nas foo\ngroup by series_instance_uid, sop_instance_uid, modality)\nas foo\ngroup by series_instance_uid, modality\n	{subject_id,project_name,site_name}	{series_instance_uid,modality,count}	{by_subject,find_series}	posda_files	Get Series in A Collection, Site, Subject\n
GetPatientStautus	\N	\N	\N	{}	\N	Get Current Patient Status\nFor use in scripts\nNot really intended for interactive use\n
DistinctSeriesBySubjectPublic	select\n  distinct s.series_instance_uid, modality, count(*) as num_images\nfrom\n  general_image i, general_series s,\n  trial_data_provenance tdp\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and\n  i.patient_id = ? and i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\ngroup by series_instance_uid, modality\n	{subject_id,project_name}	{series_instance_uid,modality,num_images}	{by_subject,find_series,intake}	public	Get Series in A Collection, Site, Subject\n
DistinctSopsInCollection	select distinct sop_instance_uid\nfrom\n  file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file\n  where\n    project_name = ? and visibility is null\n)\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionByStorageClass	select distinct sop_instance_uid, rel_path\nfrom\n  file_sop_common natural join file_location natural join file_storage_root\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_location natural join file_storage_root\n  where\n    project_name = ? and visibility is null and storage_class = ?\n) and current\norder by sop_instance_uid\n	{collection,storage_class}	{sop_instance_uid,rel_path}	{by_collection,posda_files,sops}	posda_files	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionIntake	select\n  distinct i.sop_instance_uid\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid}	{by_collection,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInCollectionIntakeWithFile	select\n  distinct i.sop_instance_uid, i.dicom_file_uri\nfrom\n  general_image i,\n  trial_data_provenance tdp\nwhere\n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ?\norder by sop_instance_uid\n	{collection}	{sop_instance_uid,dicom_file_uri}	{by_collection,files,intake,sops}	intake	Get Distinct SOPs in Collection with number files\nOnly visible files\n
DistinctSopsInSeries	select distinct sop_instance_uid, count(*)\nfrom file_sop_common\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by sop_instance_uid\norder by count desc\n	{series_instance_uid}	{sop_instance_uid,count}	{by_series_instance_uid,duplicates,posda_files,sops}	posda_files	Get Distinct SOPs in Series with number files\nOnly visible filess\n
DistinctUnhiddenFilesInSeries	select\n  distinct file_id\nfrom\n  file_series natural join file_sop_common natural join ctp_file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id}	{by_series_instance_uid,file_ids,posda_files}	posda_files	Get Distinct Unhidden Files in Series\n
DistinctValuesByTagWithFileCount	select distinct element_signature, value, count(*) as num_files\nfrom (\nselect\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n) as foo\ngroup by element_signature, value\n	{tag}	{element_signature,value,num_files}	{tag_usage}	posda_phi	Distinct values for a tag with file count\n
DupSopCountsByCSS	select\n  distinct sop_instance_uid, min, max, count\nfrom (\n  select\n    distinct sop_instance_uid, min(file_id),\n    max(file_id),count(*)\n  from (\n    select\n      distinct sop_instance_uid, file_id\n    from\n      file_sop_common \n    where sop_instance_uid in (\n      select\n        distinct sop_instance_uid\n      from\n        file_sop_common natural join ctp_file\n        natural join file_patient\n      where\n        project_name = ? and site_name = ? \n        and patient_id = ? and visibility is null\n    )\n  ) as foo natural join ctp_file\n  where visibility is null\n  group by sop_instance_uid\n)as foo where count > 1\n	{collection,site,subject}	{sop_instance_uid,min,max,count}	{}	posda_files	Counts of DuplicateSops By Collection, Site, Subject\n
DupSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
DupSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   sum(num_files) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n             natural join ctp_file\n          where import_time > ? and import_time < ?\n            and project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads > 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,num_files,num_uploads,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with duplicate sops\n
GetPrivateTagFeaturesBySignature	select\n  pt_consensus_name as name,\n  pt_consensus_vr as vr,\n  pt_consensus_disposition as disposition\nfrom pt\nwhere pt_signature = ?\n	{signature}	{name,vr,disposition}	{DispositionReport,NotInteractive}	posda_private_tag	Get the relevant features of a private tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
DuplicateDownloadsByCollection	select distinct patient_id, series_instance_uid, count(*)\nfrom file_series natural join file_patient\nwhere file_id in (\n  select file_id from (\n    select\n      distinct file_id, count(*)\n    from file_import\n    where file_id in (\n      select\n        distinct file_id\n      from \n        file_patient natural join ctp_file\n      where\n        project_name = ? \n        and site_name = ? and visibility is null\n    )\n    group by file_id\n  ) as foo\n  where count > 1\n)\ngroup by patient_id, series_instance_uid\norder by patient_id\n	{project_name,site_name}	{series_instance_uid,count}	{by_collection,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
DuplicateDownloadsBySubject	select count(*) from (\n  select\n    distinct file_id, count(*)\n  from file_import\n  where file_id in (\n    select\n      distinct file_id\n    from \n      file_patient natural join ctp_file\n    where\n      patient_id = ? and project_name = ? \n      and site_name = ? and visibility is null\n  )\n  group by file_id\n) as foo\nwhere count > 1\n	{subject_id,project_name,site_name}	{count}	{by_subject,duplicates,find_series}	posda_files	Number of files for a subject which have been downloaded more than once\n
DuplicateFilesBySop	select\n  distinct\n    project_name as collection, site_name as site,\n    patient_id, sop_instance_uid, modality, file_id,\n    root_path || '/' || rel_path as file_path,\n    count(*) as num_uploads,\n    min(import_time) as first_upload, \n    max(import_time) as last_upload\nfrom\n  ctp_file natural join file_patient natural join file_sop_common\n  natural join file_series natural join file_location natural join\n  file_storage_root natural join file_import natural join\n  import_event\nwhere\n  sop_instance_uid = ?\ngroup by\n  project_name, site_name, patient_id, sop_instance_uid, modality, \n  file_id, file_path\norder by\n  collection, site, patient_id, sop_instance_uid, modality\n	{sop_instance_uid}	{collection,site,patient_id,sop_instance_uid,modality,file_id,file_path,num_uploads,first_upload,last_upload}	{duplicates}	posda_files	Counts query by Collection, Site\n
DuplicatePixelDataByProject	select image_id, file_id\nfrom file_image where image_id in (\n  select image_id\n  from (\n    select distinct image_id, count(*)\n    from (\n      select distinct image_id, file_id \n      from file_image\n      where file_id in (\n        select\n          distinct file_id \n        from ctp_file\n        where project_name = ? and visibility is null\n      )\n    ) as foo\n    group by image_id\n  ) as foo\n  where count > 1\n)\norder by image_id;\n	{collection}	{image_id,file_id}	{}	posda_files	Return a list of files with duplicate pixel data\n
DuplicatePixelDataThatMatters	select image_id, count from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1;\n	{collection}	{image_id,count}	{}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
DuplicateSOPInstanceUIDs	select\n  sop_instance_uid, min(file_id) as first,\n  max(file_id) as last, count(*)\nfrom file_sop_common\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n      where project_name = ? and site_name = ? and patient_id = ?\n    ) as foo natural join ctp_file\n    where visibility is null\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by sop_instance_uid;\n	{collection,site,subject}	{sop_instance_uid,first,last,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
DuplicateSOPInstanceUIDsByCollectionWithoutHidden1	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo natural join ctp_file\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid}	{receive_reports}	posda_files	Return a count of visible duplicate SOP Instance UIDs\n
DuplicateSOPInstanceUIDsGlobalWithHidden	select distinct collection, site, patient_id, count(*)\nfrom (\nselect \n  distinct collection, site, patient_id, sop_instance_uid, count(*)\n  as dups\nfrom (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_patient\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\ngroup by collection, site, patient_id, sop_instance_uid\n) as foo where dups > 1\ngroup by collection, site, patient_id\norder by collection, site, patient_id\n	{}	{collection,site,patient_id,count}	{receive_reports}	posda_files	Return a report of duplicate SOP Instance UIDs ignoring visibility\n
DuplicateSOPInstanceUIDsGlobalWithoutHidden	select\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,file_id}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
DuplicateSopsInSeries	select\n  sop_instance_uid, import_time, file_id\nfrom \n  file_sop_common\n  natural join file_import natural join import_event\nwhere sop_instance_uid in (\nselect sop_instance_uid from (\nselect\n  distinct sop_instance_uid, count(distinct file_id) \nfrom\n  file_sop_common natural join file_series\nwhere\n  series_instance_uid = ?\ngroup by sop_instance_uid\n) as foo\nwhere count > 1\n)\norder by sop_instance_uid, import_time\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of Actual duplicate SOPs (i.e. different files, same SOP)\nin a series\n
ElementScanIdByScanValueTag	select \n  distinct scan_element_id\nfrom\n  scan_element natural join element_signature\n  natural join series_scan natural join seen_value\n  natural join scan_event\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n	{scan_id,value,tag}	{scan_element_id}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
ElementsWithMultipleVRs	select element_signature, count from (\n  select element_signature, count(*)\n  from (\n    select\n      distinct element_signature, vr\n    from\n      scan_event natural join series_scan\n      natural join scan_element natural join element_signature\n      natural join equipment_signature\n    where\n      scan_event_id = ?\n  ) as foo\n  group by element_signature\n) as foo\nwhere count > 1\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	List of Elements with multiple VRs seen\n
EquipmentByPrivateTag	select distinct equipment_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere element_signature = ?\norder by equipment_signature;\n	{scan_id,element_signature}	{equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
EquipmentByValueSignature	select distinct value, vr, element_signature, equipment_signature, count(*)\nfrom (\nselect\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\n) as foo\ngroup by value, element_signature, vr, equipment_signature\norder by value, element_signature, vr, equipment_signature\n	{scan_id,value,tag_signature}	{value,vr,element_signature,equipment_signature,count}	{tag_usage}	posda_phi	List of equipment, values seen in scan by VR with count\n
FilesAndLoadTimesInSeries	select\n  distinct sop_instance_uid, file_id, import_time\nfrom\n  file_sop_common natural join file_series\n  natural join file_import natural join import_event\nwhere\n  series_instance_uid = ?\norder by \n  sop_instance_uid, import_time, file_id\n	{series_instance_uid}	{sop_instance_uid,import_time,file_id}	{by_series}	posda_files	List of SOPs, files, and import times in a series\n
FilesByScanValueTag	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, sequence_level,\n  item_number\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and value = ? and element_signature = ?\norder by series_instance_uid, file\n	{scan_id,value,tag}	{series_instance_uid,file,element_signature,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesByScanWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_event_id = ? and element_signature = ?\norder by series_instance_uid, file, value\n	{scan_id,tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesByTagWithValue	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, value\nfrom\n  scan_event natural join series_scan natural join seen_value\n  natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  element_signature = ?\norder by series_instance_uid, file, value\n	{tag}	{series_instance_uid,file,element_signature,value}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FilesInCollectionSiteForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, \n  xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{by_collection_site,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a Collection Site\n
FilesInSeriesForSend	select\n  distinct file_id, root_path || '/' || rel_path as path, xfer_syntax, sop_class_uid,\n  data_set_size, data_set_start, sop_instance_uid, digest\nfrom\n  file_location natural join file_storage_root\n  natural join dicom_file natural join ctp_file\n  natural join file_sop_common natural join file_series\n  natural join file_meta natural join file\nwhere\n  series_instance_uid = ? and visibility is null\n	{series_instance_uid}	{file_id,path,xfer_syntax,sop_class_uid,data_set_size,data_set_start,sop_instance_uid,digest}	{SeriesSendEvent,by_series,find_files,for_send}	posda_files	Get everything you need to negotiate a presentation_context\nfor all files in a series\n
FilesWithIndicesByElementScanId	select\n  distinct series_instance_uid,\n  series_scanned_file as file, \n  element_signature, sequence_level,\n  item_number\nfrom\n  series_scan natural join element_signature natural join \n  scan_element natural left join sequence_index\nwhere\n  scan_element_id = ?\n	{scan_element_id}	{series_instance_uid,file,element_signature,sequence_level,item_number}	{tag_usage}	posda_phi	Find out where specific value, tag combinations occur in a scan\n
FindInconsistentSeries	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    count(*)\n  from\n    file_series natural join ctp_file\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series\n
FindInconsistentSeriesExtended	select series_instance_uid from (\nselect distinct series_instance_uid, count(*) from (\n  select distinct\n    series_instance_uid, modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments,\n    image_type, count(*)\n  from\n    file_series natural join ctp_file\n    left join file_image using(file_id)\n    left join image using(image_id)\n  where\n    project_name = ? and visibility is null\n  group by\n    series_instance_uid, image_type,\n    modality, series_number, laterality, series_date,\n    series_time, performing_phys, protocol_name, series_description,\n    operators_name, body_part_examined, patient_position,\n    smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n    performed_procedure_step_start_date, performed_procedure_step_start_time,\n    performed_procedure_step_desc, performed_procedure_step_comments\n) as foo\ngroup by series_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{series_instance_uid}	{consistency,find_series}	posda_files	Find Inconsistent Series Extended to include image type\n
FindInconsistentStudy	select distinct study_instance_uid from (\n  select distinct study_instance_uid, count(*) from (\n    select distinct\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n    from\n      file_study natural join ctp_file\n    where\n      project_name = ? and visibility is null\n    group by\n      study_instance_uid, study_date, study_time,\n      referring_phy_name, study_id, accession_number,\n      study_description, phys_of_record, phys_reading,\n      admitting_diag\n  ) as foo\n  group by study_instance_uid\n) as foo\nwhere count > 1\n	{collection}	{study_instance_uid}	{by_study,consistency}	posda_files	Find Inconsistent Studies\n
FirstFileInSeriesIntake	select\n  dicom_file_uri as path\nfrom\n  general_image\nwhere\n  series_instance_uid =  ?\nlimit 1\n	{series_instance_uid}	{path}	{by_series,intake}	intake	First files in series in Intake\n
FirstFileInSeriesPosda	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo)\nlimit 1\n	{series_instance_uid}	{path}	{by_series}	posda_files	First files in series in Posda\n
FirstFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, min(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	First files uploaded by series\n
GetInfoForDupFilesByCollection	select\n  file_id, image_id, patient_id, study_instance_uid, series_instance_uid,\n   sop_instance_uid, modality\nfrom\n  file_patient natural join file_series natural join file_study\n  natural join file_sop_common natural join file_image\nwhere file_id in (\n  select file_id\n  from (\n    select image_id, file_id\n    from file_image\n    where image_id in (\n      select image_id\n      from (\n        select distinct image_id, count(*)\n        from (\n          select distinct image_id, file_id\n          from file_image\n          where file_id in (\n            select\n              distinct file_id\n              from ctp_file\n              where project_name = ? and visibility is null\n          )\n        ) as foo\n        group by image_id\n      ) as foo \n      where count > 1\n    )\n  ) as foo\n);\n	{collection}	{file_id,image_id,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,modality}	{}	posda_files	Get information related to duplicate files by collection\n
GetPublicTagDispositionBySignature	select\n  disposition\nfrom public_tag_disposition\nwhere tag_name = ?\n	{signature}	{disposition}	{DispositionReport,NotInteractive}	posda_public_tag	Get the disposition of a public tag by signature\nUsed in DispositionReport.pl - not for interactive use\n
GetSeriesSignature	select distinct\n  dicom_file_type, modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ?\ngroup by dicom_file_type, signature\n	{collection}	{dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series Signatures by Collection\n
GetSeriesWithSignature	select distinct\n  series_instance_uid, dicom_file_type, \n  modality|| ':' || coalesce(manufacturer, '<undef>') || ':' \n  || coalesce(manuf_model_name, '<undef>') ||\n  ':' || coalesce(software_versions, '<undef>') as signature,\n  count(distinct series_instance_uid) as num_series,\n  count(distinct file_id) as num_files\nfrom\n  file_series natural join file_equipment natural join ctp_file\n  natural join dicom_file\nwhere project_name = ? and visibility is null\ngroup by series_instance_uid, dicom_file_type, signature\n	{collection}	{series_instance_uid,dicom_file_type,signature,num_series,num_files}	{signature}	posda_files	Get a list of Series with Signatures by Collection\n
GetSlopeIntercept	select\n  slope, intercept, si_units\nfrom\n  file_slope_intercept natural join slope_intercept\nwhere\n  file_id = ?\n	{file_id}	{slope,intercept,si_units}	{by_file_id,posda_files,slope_intercept}	posda_files	Get a Slope, Intercept for a particular file \n
GetValueForTag	select\n  series_instance_uid, element_signature as tag, value\nfrom\n  scan_element natural join series_scan natural join\n  seen_value natural join element_signature\nwhere element_signature = ? and scan_event_id = ?\n	{tag,scan_id}	{series_instance_uid,tag,value}	{tag_values}	posda_phi	Find Values for a given tag for all scanned series in a phi scan instance\n
GetWinLev	select\n  window_width, window_center, win_lev_desc, wl_index\nfrom\n  file_win_lev natural join window_level\nwhere\n  file_id = ?\norder by wl_index desc;\n	{file_id}	{window_width,window_center,win_lev_desc,wl_index}	{by_file_id,posda_files,window_level}	posda_files	Get a Window, Level(s) for a particular file \n
GlobalUnhiddenSOPDuplicatesSummary	select \n  distinct project_name as collection, site_name as site, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid, min(import_time) as first_upload, max(import_time) as\n  last_upload, count(distinct file_id) as num_dup_sops,\n  count(*) as num_uploads from (\nselect\n  distinct project_name as collection,\n  site_name as site, patient_id,\n  study_instance_uid, series_instance_uid, sop_instance_uid, file_id\nfrom file_sop_common natural join ctp_file natural join file_patient\n  natural join file_study natural join file_series\nwhere visibility is null and sop_instance_uid in (\n  select distinct sop_instance_uid from (\n    select distinct sop_instance_uid, count(*) from (\n      select distinct file_id, sop_instance_uid \n      from\n        ctp_file natural join file_sop_common\n        natural join file_study natural join file_series\n        natural join file_patient\n      where visibility is null\n    ) as foo\n    group by sop_instance_uid order by count desc\n  ) as foo where count > 1\n) group by project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid, sop_instance_uid, file_id\n) as foo\nnatural join file_sop_common natural join file_series natural join file_study\nnatural join ctp_file natural join file_patient natural join file_import\nnatural join import_event\ngroup by project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid,\n  sop_instance_uid\norder by project_name, site_name, patient_id\n	{}	{collection,site,patient_id,study_instance_uid,series_instance_uid,sop_instance_uid,num_dup_sops,num_uploads,first_upload,last_upload}	{receive_reports}	posda_files	Return a report of visible duplicate SOP Instance UIDs\n
HideEarlyFilesCSP	update ctp_file set visibility = 'hidden' where file_id in (\n  select min as file_id\n  from (\n    select\n      distinct sop_instance_uid, min, max, count\n    from (\n      select\n        distinct sop_instance_uid, min(file_id),\n        max(file_id),count(*)\n      from (\n        select\n          distinct sop_instance_uid, file_id\n        from\n          file_sop_common \n        where sop_instance_uid in (\n          select\n            distinct sop_instance_uid\n          from\n            file_sop_common natural join ctp_file\n            natural join file_patient\n          where\n            project_name = ? and site_name = ? \n            and patient_id = ? and visibility is null\n        )\n      ) as foo natural join ctp_file\n      where visibility is null\n      group by sop_instance_uid\n    )as foo where count > 1\n  ) as foo\n);\n	{collection,site,subject}	\N	{}	posda_files	Hide earliest submission of a file:\n  Note:    uses sequencing of file_id to determine earliest\n           file, not import_time\n
HideSeriesNotLikeWithModality	update ctp_file set visibility = 'hidden'\nwhere file_id in (\n  select\n    file_id\n  from\n    file_series\n  where\n    series_instance_uid in (\n      select\n         distinct series_instance_uid\n      from (\n        select\n         distinct\n           file_id, series_instance_uid, series_description\n        from\n           ctp_file natural join file_series\n        where\n           modality = ? and project_name = ? and site_name = ?and \n           series_description not like ?\n      ) as foo\n    )\n  )\n	{modality,collection,site,description_not_matching}	\N	{Update,posda_files}	posda_files	Hide series not matching pattern by modality\n
ImageIdByFileId	select\n  distinct file_id, image_id\nfrom\n  file_image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id}	{by_file_id,image_id,posda_files}	posda_files	Get image_id for file_id \n
InsertInitialPatientStatus	insert into patient_import_status(\n  patient_id, patient_import_status\n) values (?, ?)\n	{patient_id,status}	\N	{Insert,NotInteractive,PatientStatus}	posda_files	Insert Initial Patient Status\nFor use in scripts\nNot really intended for interactive use\n
StudiesInCollectionSite	select\n  distinct study_instance_uid\nfrom\n  file_study natural join ctp_file\nwhere\n  project_name = ? and site_name = ? and visibility is null\n	{project_name,site_name}	{study_instance_uid}	{find_studies}	posda_files	Get Studies in A Collection, Site\n
InsertSendEvent	insert into dicom_send_event(\n  destination_host, destination_port,\n  called_ae, calling_ae,\n  send_started, invoking_user,\n  reason_for_send, number_of_files,\n  is_series_send, series_to_send\n)values(\n  ?, ?,\n  ?, ?,\n  now(), ?,\n  ?, ?,\n  true, ?\n)\n	{host,port,called,calling,who,why,num_files,series}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Create a DICOM Series Send Event\nFor use in scripts.\nNot meant for interactive use\n
IntakeFilesInSeries	select\n  dicom_file_uri as file_path\nfrom\n  general_image\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{file_path}	{intake}	intake	List of all Series By Collection, Site on Intake\n
IntakeImagesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,SopInstance,ImageType,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Files Images By Collection, Site\n
IntakeImagesByCollectionSiteSubj	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  i.dicom_file_uri as FilePath,\n  i.sop_instance_uid as SopInstance,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_image i,\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  i.general_series_pk_id = s.general_series_pk_id and\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ? and\n  p.patient_id = ?\n	{collection,site,patient_id}	{PID,Modality,SopInstance,FilePath}	{SymLink,intake}	intake	List of all Files Images By Collection, Site\n
IntakeSeriesByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as SeriesInstanceUID,\n  q.manufacturer as Mfr,\n  q.manufacturer_model_name as Model,\n  q.software_versions\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{PID,Modality,StudyDate,StudyDescription,SeriesDescription,SeriesNumber,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{intake}	intake	List of all Series By Collection, Site on Intake\n
IntakeSeriesWithSignatureByCollectionSite	select\n  p.patient_id as PID,\n  s.modality as Modality,\n  t.study_date as StudyDate,\n  t.study_desc as StudyDescription,\n  s.series_desc as SeriesDescription,\n  s.series_number as SeriesNumber,\n  t.study_instance_uid as StudyInstanceUID,\n  s.series_instance_uid as series_instance_uid,\n  concat(q.manufacturer, ":", q.manufacturer_model_name, ":",\n  q.software_versions) as signature\nfrom\n  general_series s,\n  study t,\n  patient p,\n  trial_data_provenance tdp,\n  general_equipment q\nwhere\n  s.study_pk_id = t.study_pk_id and\n  s.general_equipment_pk_id = q.general_equipment_pk_id and\n  t.patient_pk_id = p.patient_pk_id and\n  p.trial_dp_pk_id = tdp.trial_dp_pk_id and\n  tdp.project = ? and\n  tdp.dp_site_name = ?\n	{collection,site}	{series_instance_uid,Modality,signature}	{intake}	intake	List of all Series By Collection, Site on Intake\n
LastFilesInSeries	select root_path || '/' || rel_path as path\nfrom file_location natural join file_storage_root\nwhere file_id in (\nselect file_id from \n  (\n  select \n    distinct sop_instance_uid, max(file_id) as file_id\n  from \n    file_series natural join ctp_file \n    natural join file_sop_common\n  where \n    series_instance_uid = ?\n    and visibility is null\n  group by sop_instance_uid\n) as foo);\n	{series_instance_uid}	{path}	{by_series}	posda_files	Last files uploaded by series\n
NewSopsReceivedBetweenDates	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n          where import_time > ? and import_time < ?\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
NewSopsReceivedBetweenDatesByCollection	select\n   distinct project_name, site_name, patient_id,\n   study_instance_uid, series_instance_uid, count(*) as num_sops,\n   min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\nfrom (\n  select \n    distinct project_name, site_name, patient_id,\n    study_instance_uid, series_instance_uid, sop_instance_uid,\n    count(*) as num_files, sum(num_uploads) as num_uploads,\n    min(first_loaded) as first_loaded, max(last_loaded) as last_loaded\n  from (\n    select\n      distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, count(*) as num_uploads, max(import_time) as last_loaded,\n         min(import_time) as first_loaded\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid, sop_instance_uid,\n        file_id, import_time\n      from\n        ctp_file natural join file_patient natural join\n        file_study natural join file_series natural join\n        file_sop_common natural join file_import natural join\n        import_event\n      where\n        visibility is null and sop_instance_uid in (\n          select distinct sop_instance_uid\n          from \n            file_import natural join import_event natural join file_sop_common\n            natural join ctp_file\n          where import_time > ? and import_time < ? and\n            project_name = ? and visibility is null\n        )\n      ) as foo\n    group by\n      project_name, site_name, patient_id, study_instance_uid, \n      series_instance_uid, sop_instance_uid, file_id\n  )as foo\n  group by \n    project_name, site_name, patient_id, study_instance_uid, \n    series_instance_uid, sop_instance_uid\n) as foo\nwhere num_uploads = 1\ngroup by \n  project_name, site_name, patient_id, study_instance_uid, \n  series_instance_uid\n	{start_time,end_time,collection}	{project_name,site_name,patient_id,study_instance_uid,series_instance_uid,num_sops,first_loaded,last_loaded}	{receive_reports}	posda_files	Series received between dates with sops without duplicates\n
NumEquipSigsForPrivateTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
NumEquipSigsForTagSigs	select distinct element_signature, count(*) from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?) as foo\ngroup by element_signature\norder by element_signature\n	{scan_id}	{element_signature,count}	{tag_usage}	posda_phi	Number of Equipment signatures in which tags are featured\n
PatientStatusChangeByCollection	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id in(\n  select distinct patient_id\n  from file_patient natural join ctp_file\n  where project_name = ? and visibility is null\n)\norder by patient_id, when_pat_stat_changed\n	{collection}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Collection\n
PatientStatusChangeByPatient	select\n  patient_id, old_pat_status as from,\n  new_pat_status as to, pat_stat_change_who as by,\n  pat_stat_change_why as why,\n  when_pat_stat_changed as when\nfrom patient_import_status_change\nwhere patient_id = ?\norder by when\n	{patient_id}	{patient_id,from,to,by,why,when}	{PatientStatus}	posda_files	Get History of Patient Status Changes by Patient Id\n
PatientStatusCounts	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere\n  visibility is null\ngroup by collection, status\norder by collection, status\n	{}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
PatientStatusCountsByCollection	select\n  distinct project_name as collection, patient_import_status as status,\n  count(distinct patient_id) as num_patients\nfrom\n  patient_import_status natural join file_patient natural join ctp_file\nwhere project_name = ? and visibility is null\ngroup by collection, status\n	{collection}	{collection,status,num_patients}	{FindSubjects,PatientStatus}	posda_files	Find All Subjects which have at least one visible file\n
PhiScanStatus	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned\nfrom \n  scan_event\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned}	{tag_usage}	posda_phi	Status of PHI scans\n
PhiScanStatusInProcess	select\n  scan_event_id as id,\n  scan_started as start_time,\n  scan_ended as end_time,\n  scan_ended - scan_started as duration,\n  scan_status as status,\n  scan_description as description,\n  num_series_to_scan as to_scan,\n  num_series_scanned as scanned,\n  (((now() - scan_started) / num_series_scanned) * (num_series_to_scan -\n  num_series_scanned)) + now() as projected_completion,\n  (cast(num_series_scanned as float) / \n    cast(num_series_to_scan as float)) * 100.0 as percentage\nfrom\n  scan_event\nwhere\n   num_series_to_scan > num_series_scanned\n   and num_series_scanned > 0\norder by id\n	{}	{id,description,start_time,end_time,duration,status,to_scan,scanned,percentage,projected_completion}	{tag_usage}	posda_phi	Status of PHI scans\n
PixDupsByCollecton	select \n  distinct series_instance_uid, count(*)\nfrom \n  ctp_file natural join file_series \nwhere \n  project_name = ? and visibility is null\n  and file_id in (\n    select \n      distinct file_id\n    from\n      file_image natural join image natural join unique_pixel_data\n      natural join ctp_file\n    where digest in (\n      select\n        distinct pixel_digest\n      from (\n        select\n          distinct pixel_digest, count(*)\n        from (\n          select \n            distinct unique_pixel_data_id, pixel_digest, project_name,\n            site_name, patient_id, count(*) \n          from (\n            select\n              distinct unique_pixel_data_id, file_id, project_name,\n              site_name, patient_id, \n              unique_pixel_data.digest as pixel_digest \n            from\n              image natural join file_image natural join \n              ctp_file natural join file_patient fq\n              join unique_pixel_data using(unique_pixel_data_id)\n            where visibility is null\n          ) as foo \n          group by \n            unique_pixel_data_id, project_name, pixel_digest,\n            site_name, patient_id\n        ) as foo \n        group by pixel_digest\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) \ngroup by series_instance_uid\norder by count desc;\n	{collection}	{series_instance_uid,count}	{pix_data_dups}	posda_files	Counts of duplicate pixel data in series by Collection\n
PixelDataIdByFileId	select\n  distinct file_id, image_id, unique_pixel_data_id\nfrom\n  file_image natural join image\nwhere\n  file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id}	{by_file_id,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
PixelDataIdByFileIdWithOtherFileId	select\n  distinct f.file_id as file_id, image_id, unique_pixel_data_id, \n  l.file_id as other_file_id\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location l using(unique_pixel_data_id)\nwhere\n  f.file_id = ?\n	{file_id}	{file_id,image_id,unique_pixel_data_id,other_file_id}	{by_file_id,duplicates,pixel_data_id,posda_files}	posda_files	Get unique_pixel_data_id for file_id \n
ValuesWithVrTagAndCount	select distinct vr, value, element_signature, num_files from (\n  select\n    distinct vr, value, element_signature, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ?\n  group by value, element_signature, vr\n) as foo\norder by vr, value\n	{scan_id}	{vr,value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
PixelInfoByFileId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  f.file_id = ? and pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoByImageId	select\n  root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation\nfrom\n  image natural join unique_pixel_data natural join pixel_location\n  natural join file_location natural join file_storage_root\nwhere image_id = ?\n	{image_id}	{file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelInfoBySopInstance	select\n  f.file_id, root_path || '/' || rel_path as file, file_offset, size, \n  bits_stored, bits_allocated, pixel_representation, number_of_frames,\n  samples_per_pixel, pixel_rows, pixel_columns, photometric_interpretation,\n  planar_configuration, modality\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\n  natural join file_series \nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n    select distinct file_id\n    from file_sop_common where sop_instance_uid = ?\n  )\n	{sop_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for a particular image id\n
PixelTypes	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality\norder by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,modality,count}	{all,find_pixel_types,posda_files}	posda_files	Get distinct pixel types\n
PixelTypesWithGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get distinct pixel types with geometry\n
PixelTypesWithGeoRGB	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  iop\nfrom\n  image natural join image_geometry\nwhere\n  photometric_interpretation = 'RGB'\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,iop}	{find_pixel_types,image_geometry,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
PixelTypesWithNoGeo	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration\nfrom\n  image i where image_id not in (\n    select image_id from image_geometry g where g.image_id = i.image_id\n  )\norder by photometric_interpretation\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration}	{find_pixel_types,image_geometry,posda_files}	posda_files	Get pixel types with no geometry\n
PixelTypesWithSlopeCT	select\n  distinct photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept,\n  count(*)\nfrom\n  image natural join file_image natural join file_series\n  natural join file_slope_intercept natural join slope_intercept\nwhere\n  modality = 'CT'\ngroup by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\norder by\n  photometric_interpretation,\n  samples_per_pixel,\n  bits_allocated,\n  bits_stored,\n  high_bit,\n  pixel_representation,\n  planar_configuration,\n  modality,\n  slope,\n  intercept\n	{}	{photometric_interpretation,samples_per_pixel,bits_allocated,bits_stored,high_bit,pixel_representation,planar_configuration,modality,slope,intercept,count}	{}	posda_files	Get distinct pixel types\n
PosdaImagesByCollectionSite	select distinct\n  patient_id as "PID",\n  modality as "Modality",\n  sop_instance_uid as "SopInstance",\n  study_date as "StudyDate",\n  study_description as "StudyDescription",\n  series_description as "SeriesDescription",\n  study_instance_uid as "StudyInstanceUID",\n  series_instance_uid as "SeriesInstanceUID",\n  manufacturer as "Mfr",\n  manuf_model_name as "Model",\n  software_versions\nfrom\n  file_patient natural join file_series natural join\n  file_sop_common natural join file_study natural join\n  file_equipment natural join ctp_file\nwhere\n  file_id in (\n  select distinct file_id from ctp_file\n  where project_name = ? and site_name = ? and visibility is null)\n	{collection,site}	{PID,Modality,SopInstance,StudyDate,StudyDescription,SeriesDescription,StudyInstanceUID,SeriesInstanceUID,Mfr,Model,software_versions}	{posda_files}	posda_files	List of all Files Images By Collection, Site\n
PosdaTotals	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility is null\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Produce total counts for all collections currently in Posda\n
PosdaTotalsHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files,\n    sum(total_sops) as total_sops\nfrom (\n  select\n    distinct project_name, site_name, patient_id,\n    count(*) as num_studies, sum(num_series) as num_series, \n    sum(total_files) as total_files,\n    sum(total_sops) as total_sops\n  from (\n    select\n       distinct project_name, site_name, patient_id, \n       study_instance_uid, count(*) as num_series,\n       sum(num_sops) as total_sops,\n       sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id,\n        study_instance_uid, series_instance_uid,\n        count(distinct file_id) as num_files,\n        count(distinct sop_instance_uid) as num_sops\n      from (\n        select\n          distinct project_name, site_name, patient_id,\n          study_instance_uid, series_instance_uid, sop_instance_uid,\n          file_id\n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common\n           natural join file_patient\n        where\n          visibility = 'hidden'\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files,total_sops}	{}	posda_files	Get totals of files hidden in Posda\n
PosdaTotalsWithDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
PosdaTotalsWithDateRangeWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get posda totals by date range\n
PosdaTotalsWithHidden	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get total posda files including hidden\n
PrivateTagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
PrivateTagsByEquipment	select distinct element_signature from (\nselect\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ? and is_private ) as foo\nwhere equipment_signature = ?\norder by element_signature;\n	{scan_id,equipment_signature}	{element_signature}	{tag_usage}	posda_phi	Which equipment signatures for which private tags\n
RecordPatientStatusChange	insert into patient_import_status_change(\n  patient_id, when_pat_stat_changed,\n  pat_stat_change_who, pat_stat_change_why,\n  old_pat_status, new_pat_status\n) values (\n  ?, now(),\n  ?, ?,\n  ?, ?\n)\n	{patient_id,who,why,old_status,new_status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Record a change to Patient Import Status\nFor use in scripts\nNot really intended for interactive use\n
SendEventSummary	select\n  reason_for_send, num_events, files_sent, earliest_send,\n  finished, finished - earliest_send as duration\nfrom (\n  select\n    distinct reason_for_send, count(*) as num_events, sum(number_of_files) as files_sent,\n    min(send_started) as earliest_send, max(send_ended) as finished\n  from dicom_send_event\n  group by reason_for_send\n  order by earliest_send\n) as foo\n	{}	{reason_for_send,num_events,files_sent,earliest_send,finished,duration}	{send_to_intake}	posda_files	Summary of SendEvents by Reason\n
SendEventsByReason	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    reason_for_send = ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{reason}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Send Events By Reason\n
SentToIntakeByDate	select\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Files Sent To Intake By Date\n
SeriesByLikeDescriptionAndCollection	select distinct\n  series_instance_uid, series_description\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and series_description like ?\n	{collection,pattern}	{series_instance_uid,series_description}	{find_series}	posda_files	Get a list of Series by Collection matching Series Description\n
SeriesCollectionSite	select distinct\n  series_instance_uid\nfrom\n  file_series natural join ctp_file\nwhere project_name = ? and site_name = ? and visibility is null\n	{collection,site}	{series_instance_uid}	{find_series}	posda_files	Get a list of Series by Collection, Site\n
SeriesConsistency	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments,\n  count(*)\nfrom\n  file_series natural join ctp_file\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,modality,series_number,laterality,series_date,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{by_series,consistency}	posda_files	Check a Series for Consistency\n
SeriesConsistencyExtended	select distinct\n  series_instance_uid, modality, series_number, laterality, series_date,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments, image_type,\n  count(*)\nfrom\n  file_series natural join ctp_file\n  left join file_image using(file_id)\n  left join image using (image_id)\nwhere series_instance_uid = ? and visibility is null\ngroup by\n  series_instance_uid, modality, series_number, laterality,\n  series_date, image_type,\n  series_time, performing_phys, protocol_name, series_description,\n  operators_name, body_part_examined, patient_position,\n  smallest_pixel_value, largest_pixel_value, performed_procedure_step_id,\n  performed_procedure_step_start_date, performed_procedure_step_start_time,\n  performed_procedure_step_desc, performed_procedure_step_comments\n	{series_instance_uid}	{series_instance_uid,count,modality,series_number,laterality,series_date,image_type,series_time,performing_phys,protocol_name,series_description,operators_name,body_part_examined,patient_position,smallest_pixel_value,largest_pixel_value,performed_procedure_step_id,performed_procedure_step_start_date,performed_procedure_step_start_time,performed_procedure_step_desc,performed_procedure_step_comments}	{by_series,consistency}	posda_files	Check a Series for Consistency (including Image Type)\n
SeriesEquipmentByValueSignature	select\n  distinct series_instance_uid, element_signature, value, vr,\n  equipment_signature\nfrom\n  scan_event natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join equipment_signature\n  natural join seen_value\nwhere\n  scan_event_id = ? and\n  value = ? and\n  element_signature = ?\norder by value, element_signature, vr\n	{scan_id,value,tag_signature}	{series_instance_uid,value,vr,element_signature,equipment_signature}	{tag_usage}	posda_phi	List of series, values, vr seen in scan with equipment signature\n
SeriesLike	select\n   distinct collection, site, pat_id,\n   series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     project_name as collection, site_name as site,\n     file_id, series_instance_uid, patient_id as pat_id,\n     series_description\n  from\n     ctp_file natural join file_series natural join file_patient\n  where\n     project_name = ? and site_name = ? and \n     series_description like ?\n) as foo\ngroup by collection, site, pat_id, series_instance_uid, series_description\norder by collection, site, pat_id\n	{collection,site,description_matching}	{collection,site,pat_id,series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern\n
SeriesNickname	select\n  project_name, site_name, subj_id, series_nickname\nfrom\n  series_nickname\nwhere\n  series_instance_uid = ?\n	{series_instance_uid}	{project_name,site_name,subj_id,series_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular series uid\n
SeriesNotLikeWithModality	select\n   distinct series_instance_uid, series_description, count(*)\nfrom (\n  select\n   distinct\n     file_id, series_instance_uid, series_description\n  from\n     ctp_file natural join file_series\n  where\n     modality = ? and project_name = ? and site_name = ? and \n     series_description not like ? and visibility is null\n) as foo\ngroup by series_instance_uid, series_description\n	{modality,collection,site,description_not_matching}	{series_instance_uid,series_description,count}	{find_series,pattern,posda_files}	posda_files	Select series not matching pattern by modality\n
SeriesSentToIntakeByDate	select\n  series_to_send as series_instance_uid,\n  send_started, send_ended - send_started as duration,\n  destination_host, destination_port,\n  number_of_files as to_send, files_sent,\n  invoking_user, reason_for_send\nfrom (\n  select\n    distinct dicom_send_event_id,\n    count(distinct file_path) as files_sent\n  from\n    dicom_send_event natural join dicom_file_send\n  where\n    send_started > ? and send_started < ?\n  group by dicom_send_event_id\n) as foo\nnatural join dicom_send_event\norder by send_started\n	{from_date,to_date}	{send_started,duration,series_instance_uid,destination_host,destination_port,to_send,files_sent,invoking_user,reason_for_send}	{send_to_intake}	posda_files	List of Series Sent To Intake By Date\n
SeriesWithDuplicatePixelDataThatMatters	select distinct series_instance_uid\nfrom file_series natural join file_image\nwhere image_id in (\nselect image_id from (\n  select distinct image_id, count(*)\n  from (\n    select distinct image_id, file_id\n    from (\n      select\n        file_id, image_id, patient_id, study_instance_uid, \n        series_instance_uid, sop_instance_uid, modality\n      from\n        file_patient natural join file_series natural join \n        file_study natural join file_sop_common\n        natural join file_image\n      where file_id in (\n        select file_id\n        from (\n          select image_id, file_id \n          from file_image \n          where image_id in (\n            select image_id\n            from (\n              select distinct image_id, count(*)\n              from (\n                select distinct image_id, file_id\n                from file_image where file_id in (\n                  select distinct file_id\n                  from ctp_file\n                  where project_name = ? and visibility is null\n                )\n              ) as foo\n              group by image_id\n            ) as foo \n            where count > 1\n          )\n        ) as foo\n      )\n    ) as foo\n  ) as foo\n  group by image_id\n) as foo \nwhere count > 1\n)\n	{collection}	{series_instance_uid}	{}	posda_files	Return a list of files with duplicate pixel data,\nrestricted to those files which have parsed DICOM data\nrepresentations in Database.\n
SeriesWithRGB	select\n  distinct series_instance_uid\nfrom\n  image natural join file_image\n  natural join file_series\n  natural join ctp_file\nwhere\n  photometric_interpretation = 'RGB'\n  and visibility is null\n	{}	{series_instance_uid}	{find_series,posda_files,rgb}	posda_files	Get distinct pixel types with geometry and rgb\n
SopNickname	select\n  project_name, site_name, subj_id, sop_nickname, modality,\n  has_modality_conflict\nfrom\n  sop_nickname\nwhere\n  sop_instance_uid = ?\n	{sop_instance_uid}	{project_name,site_name,subj_id,sop_nickname,modality,has_modality_conflict}	{}	posda_nicknames	Get a nickname, etc for a particular SOP Instance  uid\n
StudyConsistency	select distinct\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag, count(*)\nfrom\n  file_study natural join ctp_file\nwhere study_instance_uid = ? and visibility is null\ngroup by\n  study_instance_uid, study_date, study_time,\n  referring_phy_name, study_id, accession_number,\n  study_description, phys_of_record, phys_reading,\n  admitting_diag\n	{study_instance_uid}	{study_instance_uid,count,study_description,study_date,study_time,referring_phy_name,study_id,accession_number,phys_of_record,phys_reading,admitting_diag}	{by_study,consistency}	posda_files	Check a Study for Consistency\n
StudyNickname	select\n  project_name, site_name, subj_id, study_nickname\nfrom\n  study_nickname\nwhere\n  study_instance_uid = ?\n	{study_instance_uid}	{project_name,site_name,subj_id,study_nickname}	{}	posda_nicknames	Get a nickname, etc for a particular study uid\n
SubjectCountByCollectionSite	select\n  distinct\n    patient_id, count(distinct file_id)\nfrom\n  ctp_file natural join file_patient\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by\n  patient_id \norder by\n  patient_id\n	{collection,site}	{patient_id,count}	{counts}	posda_files	Counts query by Collection, Site\n
SubjectsWithDupSops	select\n  distinct collection, site, subj_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{}	{collection,site,subj_id,count}	{duplicates}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SubjectsWithDupSopsByCollection	select\n  distinct collection, site, subj_id, count(*)\nfrom (\n  select\n    distinct project_name as collection,\n    site_name as site, patient_id as subj_id,\n    file_id\n  from\n    ctp_file natural join file_sop_common\n    natural join file_patient\n  where\n    sop_instance_uid in (\n      select distinct sop_instance_uid from (\n        select distinct sop_instance_uid, count(*) from (\n          select distinct file_id, sop_instance_uid \n          from\n            ctp_file natural join file_sop_common\n            natural join file_patient\n          where\n            project_name = ? and visibility is null\n        ) as foo group by sop_instance_uid order by count desc\n      ) as foo \n      where count > 1\n    )\n    and visibility is null\n  ) as foo\ngroup by collection, site, subj_id\n	{collection}	{collection,site,subj_id,count}	{}	posda_files	Return a count of duplicate SOP Instance UIDs\n
SubjectsWithModalityByCollectionSite	select\n  distinct patient_id, count(*) as num_files\nfrom\n  ctp_file natural join file_patient natural join file_series\nwhere\n  modality = ? and project_name = ? and site_name = ?\ngroup by patient_id\norder by patient_id\n	{modality,project_name,site_name}	{patient_id,num_files}	{FindSubjects}	posda_files	Find All Subjects with given modality in Collection, Site\n
SubjectsWithModalityByCollectionSiteIntake	select\n  distinct i.patient_id, modality, count(*) as num_files\nfrom\n  general_image i, trial_data_provenance tdp, general_series s\nwhere\n  s.general_series_pk_id = i.general_series_pk_id and \n  i.trial_dp_pk_id = tdp.trial_dp_pk_id and \n  modality = ? and\n  tdp.project = ? and \n  tdp.dp_site_name = ?\ngroup by patient_id, modality\n	{modality,project_name,site_name}	{patient_id,modality,num_files}	{FindSubjects,SymLink,intake}	intake	Find All Subjects with given modality in Collection, Site\n
TagUsage	select\n  distinct element_signature, equipment_signature\nfrom \n  equipment_signature natural join series_scan\n  natural join scan_element natural join element_signature\n  natural join scan_event\nwhere scan_event_id = ?\norder by element_signature;\n	{scan_id}	{element_signature,equipment_signature}	{tag_usage}	posda_phi	Which equipment signatures for which tags\n
TestThisOne	select\n  patient_id, patient_import_status,\n  count(distinct file_id) as total_files,\n  min(import_time) min_time, max(import_time) as max_time,\n  count(distinct study_instance_uid) as num_studies,\n  count(distinct series_instance_uid) as num_series\nfrom\n  ctp_file natural join file natural join\n  file_import natural join import_event natural join\n  file_study natural join file_series natural join file_patient\n  natural join patient_import_status\nwhere\n  project_name = ? and site_name = ? and visibility is null\ngroup by patient_id, patient_import_status\n	{project_name,site_name,PatientStatus}	{patient_id,patient_import_status,total_files,min_time,max_time,num_studies,num_series}	{}	posda_files	
TotalDiskSpace	select\n  sum(size) as total_bytes\nfrom\n  file\nwhere\n  file_id in (\n  select distinct file_id\n  from ctp_file\n  )\n	{}	{total_bytes}	{all,posda_files,storage_used}	posda_files	Get total disk space used\n
ValuesWithVrTagAndCountLimited	select distinct vr, value, element_signature, num_files from (\n  select\n    distinct vr, value, element_signature, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and\n    vr not in (\n      'AE', 'AT', 'DS', 'FL', 'FD', 'IS', 'OD', 'OF', 'OL', 'OW',\n      'SL', 'SQ', 'SS', 'TM', 'UL', 'US'\n    )\n  group by value, element_signature, vr\n) as foo\norder by vr, value\n	{scan_id}	{vr,value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
VrsSeen	select distinct vr, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ?\n) as foo\ngroup by vr\norder by vr\n	{scan_id}	{vr,count}	{tag_usage}	posda_phi	List of VR's seen in scan (with count)\n
TotalsByDateRange	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? \n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{AllCollections,DateRange,Kirk,Totals}	posda_files	Get posda totals by date range\n
TotalsByDateRangeAndCollection	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n           natural join file_import natural join import_event\n        where\n          visibility is null and import_time >= ? and\n          import_time < ? and project_name = ?\n      ) as foo\n      group by\n        project_name, site_name, patient_id, \n        study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{start_time,end_time,project_name}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{DateRange,Kirk,Totals}	posda_files	Get posda totals by date range\n
TotalsLike	select \n    distinct project_name, site_name, count(*) as num_subjects,\n    sum(num_studies) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\nfrom (\n  select\n    distinct project_name, site_name, patient_id, count(*) as num_studies,\n    sum(num_series) as num_series, sum(total_files) as total_files\n  from (\n    select\n       distinct project_name, site_name, patient_id, study_instance_uid, \n       count(*) as num_series, sum(num_files) as total_files\n    from (\n      select\n        distinct project_name, site_name, patient_id, study_instance_uid, \n        series_instance_uid, count(*) as num_files \n      from (\n        select\n          distinct project_name, site_name, patient_id, study_instance_uid,\n          series_instance_uid, sop_instance_uid \n        from\n           ctp_file natural join file_study natural join\n           file_series natural join file_sop_common natural join file_patient\n         where\n           project_name like ? and visibility is null\n       ) as foo\n       group by\n         project_name, site_name, patient_id, \n         study_instance_uid, series_instance_uid\n    ) as foo\n    group by project_name, site_name, patient_id, study_instance_uid\n  ) as foo\n  group by project_name, site_name, patient_id\n  order by project_name, site_name, patient_id\n) as foo\ngroup by project_name, site_name\norder by project_name, site_name\n	{pattern}	{project_name,site_name,num_subjects,num_studies,num_series,total_files}	{}	posda_files	Get Posda totals for with collection matching pattern\n
UnHideFilesCSP	update ctp_file set visibility = null where file_id in (\n  select\n    distinct file_id\n  from\n    ctp_file natural join file_patient\n  where\n    project_name = ? and site_name = ?\n    and visibility = 'hidden' and patient_id = ?\n);\n	{collection,site,subject}	\N	{}	posda_files	UnHide all files hidden by Collection, Site, Subject\n
UpdateCountsDb	insert into totals_by_collection_site(\n  count_report_id,\n  collection_name, site_name,\n  num_subjects, num_studies, num_series, num_sops\n) values (\n  currval('count_report_count_report_id_seq'),\n  ?, ?,\n  ?, ?, ?, ?\n)\n	{project_name,site_name,num_subjects,num_studies,num_series,num_files}	\N	{insert,posda_counts}	posda_counts	
UpdatePatientImportStatus	update patient_import_status set \n  patient_import_status = ?\nwhere patient_id = ?\n	{patient_id,status}	\N	{NotInteractive,PatientStatus,Update}	posda_files	Update Patient Status\nFor use in scripts\nNot really intended for interactive use\n
UpdateSendEvent	update dicom_send_event\n  set send_ended = now()\nwhere dicom_send_event_id = ?\n	{id}	\N	{NotInteractive,SeriesSendEvent}	posda_files	Update dicom_send_event_id after creation and completion of send\nFor use in scripts.\nNot meant for interactive use\n
ValuesByVr	select distinct value, count(*) from (\n  select\n    distinct value, element_signature, vr\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n) as foo\ngroup by value\norder by value\n	{scan_id,vr}	{value,count}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
ValuesByVrWithTagAndCount	select distinct value, element_signature, num_files from (\n  select\n    distinct value, element_signature, vr, count(*)  as num_files\n  from\n    scan_event natural join series_scan natural join seen_value\n    natural join element_signature natural join scan_element\n  where\n    scan_event_id = ? and vr = ?\n  group by value, element_signature, vr\n) as foo\norder by value\n	{scan_id,vr}	{value,element_signature,num_files}	{tag_usage}	posda_phi	List of values seen in scan by VR (with count of elements)\n
WhereSeriesSits	select distinct\n  project_name as collection,\n  site_name as site,\n  patient_id,\n  study_instance_uid,\n  series_instance_uid,\n  count(distinct file_id) as num_files\nfrom\n  file_patient natural join\n  file_study natural join\n  file_series natural join\n  ctp_file\nwhere file_id in (\n  select\n    distinct file_id\n  from\n    file_series natural join ctp_file\n  where\n    series_instance_uid = ? and visibility is null\n)\ngroup by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\norder by\n  project_name, site_name, patient_id,\n  study_instance_uid, series_instance_uid\n	{series_instance_uid}	{collection,site,patient_id,study_instance_uid,series_instance_uid,num_files}	{by_series_instance_uid,posda_files,sops}	posda_files	Get Collection, Site, Patient, Study Hierarchy in which series resides\n
PixelInfoBySeries	select\n  f.file_id as file_id, \n  root_path || '/' || rel_path as file,\n  file_offset, \n  size, \n  bits_stored, \n  bits_allocated, \n  pixel_representation, \n  number_of_frames,\n  samples_per_pixel, \n  pixel_rows, \n  pixel_columns, \n  photometric_interpretation,\n  planar_configuration,\n  modality\nfrom\n  file_image f natural join image natural join unique_pixel_data\n  natural join file_series\n  join pixel_location pl using(unique_pixel_data_id), \n  file_location fl natural join file_storage_root\nwhere\n  pl.file_id = fl.file_id\n  and f.file_id = pl.file_id\n  and f.file_id in (\n  select distinct file_id\n  from file_series natural join ctp_file\n  where series_instance_uid = ? and visibility is null\n)	{series_instance_uid}	{file_id,file,file_offset,size,bits_stored,bits_allocated,pixel_representation,number_of_frames,samples_per_pixel,pixel_rows,pixel_columns,photometric_interpretation,planar_configuration,modality}	{}	posda_files	Get pixel descriptors for all files in a series\n
\.


--
-- Name: queries_pkey; Type: CONSTRAINT; Schema: public; Owner: quasar
--

ALTER TABLE ONLY queries
    ADD CONSTRAINT queries_pkey PRIMARY KEY (name);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

