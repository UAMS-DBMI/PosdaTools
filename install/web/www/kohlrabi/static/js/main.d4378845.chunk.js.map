{"version":3,"sources":["useFetch.js","Images.js","GBreport.js","App.js","index.js"],"names":["useFetch","url","useState","data","setData","useEffect","a","fetch","response","ok","console","log","json","fetchData","Images","props","invertValue","setInvertValue","rotValue","setRotValue","images","preview_files","original_file","VRindex","map","row","i","className","style","filter","transform","src","preview_file_id","alt","filestatus","current_file_data","status","good","file_name","onClick","GBreport","myfiles","sortedfiles","sort","b","App","index","setIndex","complete","setComplete","nextButtonPress","original_files","length","backButtonPress","buttonPress","alert","path_file_id","method","then","match","window","location","pathname","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4378845.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useFetch = url => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    async function fetchData(){\n      const response = await fetch(url);\n      if(!response.ok){\n        console.log(\"bad response from server\");\n        return;\n      }\n\n      const json = await response.json();\n      setData(json);\n    }\n    fetchData();\n  }, [url]);\n  return data;\n}\n","import './App.css';\nimport { useFetch } from './useFetch';\nimport { useState } from \"react\";\n\n\nfunction Images(props) {\n  const [invertValue, setInvertValue] = useState(0);\n  const [rotValue, setRotValue] = useState(0);\n  //const currentClass = \"smallImage\";\n\n\n  function invertButtonPress(){\n    if (invertValue === 1){\n      setInvertValue(0);\n    }else {\n      setInvertValue(1);\n    }\n  }\n  function rotateButtonPress(){\n    if (rotValue < 280){\n      setRotValue(rotValue+90);\n    } else {\n      setRotValue(0);\n    }\n  }\n\n    var images = [];\n    const preview_files = useFetch(`/papi/v1/pathology/preview/${props.original_file}/${props.VRindex}`);\n    if(preview_files){\n      images = preview_files.map((row, i) =>\n         <img className=\"smallImage\" style={{filter: `invert(${invertValue})`,  transform: `rotate(${rotValue}deg)`}} src={`/papi/v1/files/${row.preview_file_id}/data`} key={i} alt=\"svs-preview\"/>\n       );\n    }\n\n    var filestatus = [];\n    const current_file_data = useFetch(`/papi/v1/pathology/preview_file_name/${props.original_file}`);\n\n    if(current_file_data){\n      filestatus = current_file_data.map((row, i) => {\n        var status = \"Unreviewed\";\n        if (row.good === true){\n          status = \"Good\";\n        }else if(row.good === false){\n          status = \"Bad\";\n        }\n        return <div key={i}> <h2>File {row.file_name}</h2> <h3>Status: {status} </h3> </div>\n      });\n    }\n\n\n    return (\n      <div>\n          <div>\n            <button className=\"btn btn-warning\" onClick={() => invertButtonPress()}>Invert</button>\n            <button className=\"btn btn-warning\" onClick={() => rotateButtonPress()}>Rotate</button>\n          </div>\n        <div className =\"imgdisplay\">\n          {filestatus}\n          {images}\n        </div>\n      </div>\n    );\n  }\n\n\nexport default Images;\n","import './App.css';\nimport { useFetch } from './useFetch';\n\n\nfunction GBreport(props) {\n\n    var myfilesdiv = [];\n    var filestatus = [];\n    const myfiles = useFetch(`/papi/v1/pathology/review/${props.VRindex}`);\n    if(myfiles){\n      let sortedfiles = [...myfiles];\n      sortedfiles.sort((a, b) => {\n        if (a.good < b.good) {\n          return -1;\n        }\n        if (a.good > b.good) {\n          return 1;\n        }\n        return 0;\n      });\n\n        filestatus = sortedfiles.map((row, i) => {\n          var status = \"Unreviewed\";\n          if (row.good === true){\n            status = \"Good\";\n          }else if(row.good === false){\n            status = \"Bad\";\n          }\n          return  <div key={i}> <tr><td> {row.file_name} </td> <td>{status}</td> </tr></div>\n      });\n    }\n\n\n\n    return (\n      <div>\n          <div>\n            <h1>Files as currently labeled</h1>\n            <table>\n            <tr><th>File</th><th>Status</th></tr>\n              {filestatus}\n            </table>\n          </div>\n      </div>\n    );\n  }\n\n\nexport default GBreport;\n","import './App.css';\nimport { useFetch } from './useFetch';\nimport { useState } from \"react\";\nimport Images from \"./Images\";\nimport GBReport from \"./GBreport\";\n\n\nfunction App(props) {\n  const [index, setIndex] = useState(0);\n  const [complete, setComplete] = useState(0);\n\n  function nextButtonPress(){\n    if (index < (original_files.length-1)){\n      setIndex(index+1);\n    }else{\n      setComplete(1);\n    }\n    //else route to summary page with option to download the summary??\n  }\n  function backButtonPress(){\n    if (index > 0){\n      setComplete(0);\n      setIndex(index-1);\n    }\n  }\n  function buttonPress(){\n    alert(\"not yet implemented\");\n  }\n  function buttonPressGood(){\n    fetch('/papi/v1/pathology/set_edit/' + original_files[index].path_file_id +'/good', {method: 'PUT'}).then( () => nextButtonPress());\n  }\n  function buttonPressBad(){\n    fetch('/papi/v1/pathology/set_edit/' + original_files[index].path_file_id +'/bad', {method: 'PUT'}).then( () => nextButtonPress());\n  }\n\n\n\n  const original_files = useFetch('/papi/v1/pathology/start/' + props.VRindex);\n  if(props.VRindex === null){\n    return <span>Improper URL. No visual review instance selected.</span>\n  }\n  if(!original_files){\n    return(<span>loading....</span>);\n  }else if (original_files.length === 0) {\n      return(<span>No files for review in VR {props.VRindex} </span>);\n  }else if (complete === 1){\n    return (\n      <div>\n      <GBReport VRindex={props.VRindex} />\n        <button className=\"btn btn-warning\" onClick={() => backButtonPress()}>Back</button>\n      </div>\n    )\n  }else{\n    return (\n      <div>\n          <h1>Now Viewing Image {index+1} out of {original_files.length}</h1>\n          <div>\n            <button className=\"btn btn-success\" onClick={() => buttonPressGood()}>Good</button>\n            <button className=\"btn btn-error\" onClick={() => buttonPressBad()}>Bad</button>\n            <button className=\"btn btn-warning\" onClick={() => buttonPress()}>Edit</button>\n            <button className=\"btn btn-warning\" onClick={() => buttonPress()}>Download</button>\n          </div>\n        <div>\n          <button className=\"btn btn-warning\" onClick={() => backButtonPress()}>Back</button>\n          <button className=\"btn btn-warning\" onClick={() => nextButtonPress()}>Next</button>\n        </div>\n        <div>\n          <Images original_file={original_files[index].path_file_id} VRindex={props.VRindex} />\n        </div>\n      </div>\n  );}\n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nlet match = window.location.pathname.match(/\\/(\\d+)/);\nlet id = null;\nif(match){\n  id = match[1];\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App VRindex={id} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}